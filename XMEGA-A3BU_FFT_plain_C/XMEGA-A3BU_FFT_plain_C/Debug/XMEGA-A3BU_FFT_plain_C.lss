
XMEGA-A3BU_FFT_plain_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000001a0  00802000  00802000  00000ae2  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000ae2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001a0  00000000  00000000  00000b18  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00003c5c  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000de5  00000000  00000000  00004914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00002ba2  00000000  00000000  000056f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000051c  00000000  00000000  0000829c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0002a0ad  00000000  00000000  000087b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001275  00000000  00000000  00032865  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  00033ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009ea9  00000000  00000000  00033c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
   6:	00 00       	nop
   8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>
   a:	00 00       	nop
   c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
   e:	00 00       	nop
  10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
  12:	00 00       	nop
  14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
  16:	00 00       	nop
  18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
  1e:	00 00       	nop
  20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
  22:	00 00       	nop
  24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
  26:	00 00       	nop
  28:	08 c1       	rjmp	.+528    	; 0x23a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	06 c1       	rjmp	.+524    	; 0x23a <__bad_interrupt>
  2e:	00 00       	nop
  30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
  32:	00 00       	nop
  34:	02 c1       	rjmp	.+516    	; 0x23a <__bad_interrupt>
  36:	00 00       	nop
  38:	00 c1       	rjmp	.+512    	; 0x23a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fe c0       	rjmp	.+508    	; 0x23a <__bad_interrupt>
  3e:	00 00       	nop
  40:	fc c0       	rjmp	.+504    	; 0x23a <__bad_interrupt>
  42:	00 00       	nop
  44:	fa c0       	rjmp	.+500    	; 0x23a <__bad_interrupt>
  46:	00 00       	nop
  48:	f8 c0       	rjmp	.+496    	; 0x23a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f6 c0       	rjmp	.+492    	; 0x23a <__bad_interrupt>
  4e:	00 00       	nop
  50:	f4 c0       	rjmp	.+488    	; 0x23a <__bad_interrupt>
  52:	00 00       	nop
  54:	f2 c0       	rjmp	.+484    	; 0x23a <__bad_interrupt>
  56:	00 00       	nop
  58:	f0 c0       	rjmp	.+480    	; 0x23a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ee c0       	rjmp	.+476    	; 0x23a <__bad_interrupt>
  5e:	00 00       	nop
  60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
  62:	00 00       	nop
  64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
  66:	00 00       	nop
  68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
  6e:	00 00       	nop
  70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
  72:	00 00       	nop
  74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
  76:	00 00       	nop
  78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
  7e:	00 00       	nop
  80:	dc c0       	rjmp	.+440    	; 0x23a <__bad_interrupt>
  82:	00 00       	nop
  84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
  86:	00 00       	nop
  88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
  8e:	00 00       	nop
  90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
  92:	00 00       	nop
  94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
  96:	00 00       	nop
  98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ea c1       	rjmp	.+980    	; 0x472 <__vector_39>
  9e:	00 00       	nop
  a0:	1a c2       	rjmp	.+1076   	; 0x4d6 <__vector_40>
  a2:	00 00       	nop
  a4:	4a c2       	rjmp	.+1172   	; 0x53a <__vector_41>
  a6:	00 00       	nop
  a8:	7a c2       	rjmp	.+1268   	; 0x59e <__vector_42>
  aa:	00 00       	nop
  ac:	c6 c0       	rjmp	.+396    	; 0x23a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c4 c0       	rjmp	.+392    	; 0x23a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c2 c0       	rjmp	.+388    	; 0x23a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c0 c0       	rjmp	.+384    	; 0x23a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	be c0       	rjmp	.+380    	; 0x23a <__bad_interrupt>
  be:	00 00       	nop
  c0:	bc c0       	rjmp	.+376    	; 0x23a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ba c0       	rjmp	.+372    	; 0x23a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b8 c0       	rjmp	.+368    	; 0x23a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b6 c0       	rjmp	.+364    	; 0x23a <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b4 c0       	rjmp	.+360    	; 0x23a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b2 c0       	rjmp	.+356    	; 0x23a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b0 c0       	rjmp	.+352    	; 0x23a <__bad_interrupt>
  da:	00 00       	nop
  dc:	ae c0       	rjmp	.+348    	; 0x23a <__bad_interrupt>
  de:	00 00       	nop
  e0:	ac c0       	rjmp	.+344    	; 0x23a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	aa c0       	rjmp	.+340    	; 0x23a <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a8 c0       	rjmp	.+336    	; 0x23a <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a6 c0       	rjmp	.+332    	; 0x23a <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a4 c0       	rjmp	.+328    	; 0x23a <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a2 c0       	rjmp	.+324    	; 0x23a <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a0 c0       	rjmp	.+320    	; 0x23a <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9e c0       	rjmp	.+316    	; 0x23a <__bad_interrupt>
  fe:	00 00       	nop
 100:	9c c0       	rjmp	.+312    	; 0x23a <__bad_interrupt>
 102:	00 00       	nop
 104:	9a c0       	rjmp	.+308    	; 0x23a <__bad_interrupt>
 106:	00 00       	nop
 108:	98 c0       	rjmp	.+304    	; 0x23a <__bad_interrupt>
 10a:	00 00       	nop
 10c:	96 c0       	rjmp	.+300    	; 0x23a <__bad_interrupt>
 10e:	00 00       	nop
 110:	94 c0       	rjmp	.+296    	; 0x23a <__bad_interrupt>
 112:	00 00       	nop
 114:	92 c0       	rjmp	.+292    	; 0x23a <__bad_interrupt>
 116:	00 00       	nop
 118:	90 c0       	rjmp	.+288    	; 0x23a <__bad_interrupt>
 11a:	00 00       	nop
 11c:	e2 c0       	rjmp	.+452    	; 0x2e2 <__vector_71>
 11e:	00 00       	nop
 120:	12 c1       	rjmp	.+548    	; 0x346 <__vector_72>
 122:	00 00       	nop
 124:	42 c1       	rjmp	.+644    	; 0x3aa <__vector_73>
 126:	00 00       	nop
 128:	72 c1       	rjmp	.+740    	; 0x40e <__vector_74>
 12a:	00 00       	nop
 12c:	86 c0       	rjmp	.+268    	; 0x23a <__bad_interrupt>
 12e:	00 00       	nop
 130:	84 c0       	rjmp	.+264    	; 0x23a <__bad_interrupt>
 132:	00 00       	nop
 134:	82 c0       	rjmp	.+260    	; 0x23a <__bad_interrupt>
 136:	00 00       	nop
 138:	80 c0       	rjmp	.+256    	; 0x23a <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7e c0       	rjmp	.+252    	; 0x23a <__bad_interrupt>
 13e:	00 00       	nop
 140:	7c c0       	rjmp	.+248    	; 0x23a <__bad_interrupt>
 142:	00 00       	nop
 144:	7a c0       	rjmp	.+244    	; 0x23a <__bad_interrupt>
 146:	00 00       	nop
 148:	78 c0       	rjmp	.+240    	; 0x23a <__bad_interrupt>
 14a:	00 00       	nop
 14c:	76 c0       	rjmp	.+236    	; 0x23a <__bad_interrupt>
 14e:	00 00       	nop
 150:	74 c0       	rjmp	.+232    	; 0x23a <__bad_interrupt>
 152:	00 00       	nop
 154:	72 c0       	rjmp	.+228    	; 0x23a <__bad_interrupt>
 156:	00 00       	nop
 158:	70 c0       	rjmp	.+224    	; 0x23a <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6e c0       	rjmp	.+220    	; 0x23a <__bad_interrupt>
 15e:	00 00       	nop
 160:	6c c0       	rjmp	.+216    	; 0x23a <__bad_interrupt>
 162:	00 00       	nop
 164:	6a c0       	rjmp	.+212    	; 0x23a <__bad_interrupt>
 166:	00 00       	nop
 168:	68 c0       	rjmp	.+208    	; 0x23a <__bad_interrupt>
 16a:	00 00       	nop
 16c:	66 c0       	rjmp	.+204    	; 0x23a <__bad_interrupt>
 16e:	00 00       	nop
 170:	64 c0       	rjmp	.+200    	; 0x23a <__bad_interrupt>
 172:	00 00       	nop
 174:	62 c0       	rjmp	.+196    	; 0x23a <__bad_interrupt>
 176:	00 00       	nop
 178:	60 c0       	rjmp	.+192    	; 0x23a <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5e c0       	rjmp	.+188    	; 0x23a <__bad_interrupt>
 17e:	00 00       	nop
 180:	5c c0       	rjmp	.+184    	; 0x23a <__bad_interrupt>
 182:	00 00       	nop
 184:	5a c0       	rjmp	.+180    	; 0x23a <__bad_interrupt>
 186:	00 00       	nop
 188:	58 c0       	rjmp	.+176    	; 0x23a <__bad_interrupt>
 18a:	00 00       	nop
 18c:	56 c0       	rjmp	.+172    	; 0x23a <__bad_interrupt>
 18e:	00 00       	nop
 190:	54 c0       	rjmp	.+168    	; 0x23a <__bad_interrupt>
 192:	00 00       	nop
 194:	52 c0       	rjmp	.+164    	; 0x23a <__bad_interrupt>
 196:	00 00       	nop
 198:	50 c0       	rjmp	.+160    	; 0x23a <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4e c0       	rjmp	.+156    	; 0x23a <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4c c0       	rjmp	.+152    	; 0x23a <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4a c0       	rjmp	.+148    	; 0x23a <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	48 c0       	rjmp	.+144    	; 0x23a <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	46 c0       	rjmp	.+140    	; 0x23a <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	44 c0       	rjmp	.+136    	; 0x23a <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	42 c0       	rjmp	.+132    	; 0x23a <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	40 c0       	rjmp	.+128    	; 0x23a <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3e c0       	rjmp	.+124    	; 0x23a <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3c c0       	rjmp	.+120    	; 0x23a <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3a c0       	rjmp	.+116    	; 0x23a <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	38 c0       	rjmp	.+112    	; 0x23a <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	36 c0       	rjmp	.+108    	; 0x23a <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	34 c0       	rjmp	.+104    	; 0x23a <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	32 c0       	rjmp	.+100    	; 0x23a <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	30 c0       	rjmp	.+96     	; 0x23a <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2e c0       	rjmp	.+92     	; 0x23a <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2c c0       	rjmp	.+88     	; 0x23a <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2a c0       	rjmp	.+84     	; 0x23a <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	28 c0       	rjmp	.+80     	; 0x23a <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	26 c0       	rjmp	.+76     	; 0x23a <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	24 c0       	rjmp	.+72     	; 0x23a <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	22 c0       	rjmp	.+68     	; 0x23a <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ee e6       	ldi	r30, 0x6E	; 110
 214:	fa e0       	ldi	r31, 0x0A	; 10
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	21 e2       	ldi	r18, 0x21	; 33
 228:	a0 e0       	ldi	r26, 0x00	; 0
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a0 3a       	cpi	r26, 0xA0	; 160
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	c2 d3       	rcall	.+1924   	; 0x9bc <main>
 238:	18 c4       	rjmp	.+2096   	; 0xa6a <_exit>

0000023a <__bad_interrupt>:
 23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
 23c:	81 15       	cp	r24, r1
 23e:	22 e0       	ldi	r18, 0x02	; 2
 240:	92 07       	cpc	r25, r18
 242:	61 f4       	brne	.+24     	; 0x25c <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
 244:	80 91 01 20 	lds	r24, 0x2001
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	98 0f       	add	r25, r24
 24c:	90 93 01 20 	sts	0x2001, r25
 250:	81 11       	cpse	r24, r1
 252:	12 c0       	rjmp	.+36     	; 0x278 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	cb c2       	rjmp	.+1430   	; 0x7f0 <sysclk_enable_module>
 25a:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
 25c:	80 34       	cpi	r24, 0x40	; 64
 25e:	92 40       	sbci	r25, 0x02	; 2
 260:	59 f4       	brne	.+22     	; 0x278 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
 262:	80 91 00 20 	lds	r24, 0x2000
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	98 0f       	add	r25, r24
 26a:	90 93 00 20 	sts	0x2000, r25
 26e:	81 11       	cpse	r24, r1
 270:	03 c0       	rjmp	.+6      	; 0x278 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	bc c2       	rjmp	.+1400   	; 0x7f0 <sysclk_enable_module>
 278:	08 95       	ret

0000027a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
 27a:	81 15       	cp	r24, r1
 27c:	22 e0       	ldi	r18, 0x02	; 2
 27e:	92 07       	cpc	r25, r18
 280:	59 f4       	brne	.+22     	; 0x298 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
 282:	80 91 01 20 	lds	r24, 0x2001
 286:	81 50       	subi	r24, 0x01	; 1
 288:	80 93 01 20 	sts	0x2001, r24
 28c:	81 11       	cpse	r24, r1
 28e:	11 c0       	rjmp	.+34     	; 0x2b2 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	b9 c2       	rjmp	.+1394   	; 0x808 <sysclk_disable_module>
 296:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
 298:	80 34       	cpi	r24, 0x40	; 64
 29a:	92 40       	sbci	r25, 0x02	; 2
 29c:	51 f4       	brne	.+20     	; 0x2b2 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
 29e:	80 91 00 20 	lds	r24, 0x2000
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	80 93 00 20 	sts	0x2000, r24
 2a8:	81 11       	cpse	r24, r1
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	ab c2       	rjmp	.+1366   	; 0x808 <sysclk_disable_module>
 2b2:	08 95       	ret

000002b4 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 2bc:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
 2be:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
 2c0:	bd df       	rcall	.-134    	; 0x23c <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
 2c2:	88 81       	ld	r24, Y
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 2c8:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 2ca:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 2cc:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 2ce:	eb e9       	ldi	r30, 0x9B	; 155
 2d0:	f1 e2       	ldi	r31, 0x21	; 33
 2d2:	90 81       	ld	r25, Z
 2d4:	9f 5f       	subi	r25, 0xFF	; 255
 2d6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 2d8:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	08 95       	ret

000002e2 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	0b b6       	in	r0, 0x3b	; 59
 2ee:	0f 92       	push	r0
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	4f 93       	push	r20
 2f6:	5f 93       	push	r21
 2f8:	6f 93       	push	r22
 2fa:	7f 93       	push	r23
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
 308:	e0 e0       	ldi	r30, 0x00	; 0
 30a:	f2 e0       	ldi	r31, 0x02	; 2
 30c:	44 a1       	ldd	r20, Z+36	; 0x24
 30e:	55 a1       	ldd	r21, Z+37	; 0x25
 310:	e0 91 98 21 	lds	r30, 0x2198
 314:	f0 91 99 21 	lds	r31, 0x2199
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	19 95       	eicall
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0b be       	out	0x3b, r0	; 59
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	0b b6       	in	r0, 0x3b	; 59
 352:	0f 92       	push	r0
 354:	2f 93       	push	r18
 356:	3f 93       	push	r19
 358:	4f 93       	push	r20
 35a:	5f 93       	push	r21
 35c:	6f 93       	push	r22
 35e:	7f 93       	push	r23
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	af 93       	push	r26
 366:	bf 93       	push	r27
 368:	ef 93       	push	r30
 36a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
 36c:	e8 e2       	ldi	r30, 0x28	; 40
 36e:	f2 e0       	ldi	r31, 0x02	; 2
 370:	44 81       	ldd	r20, Z+4	; 0x04
 372:	55 81       	ldd	r21, Z+5	; 0x05
 374:	e0 91 98 21 	lds	r30, 0x2198
 378:	f0 91 99 21 	lds	r31, 0x2199
 37c:	62 e0       	ldi	r22, 0x02	; 2
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	19 95       	eicall
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0b be       	out	0x3b, r0	; 59
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	0b b6       	in	r0, 0x3b	; 59
 3b6:	0f 92       	push	r0
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
 3d0:	e0 e3       	ldi	r30, 0x30	; 48
 3d2:	f2 e0       	ldi	r31, 0x02	; 2
 3d4:	44 81       	ldd	r20, Z+4	; 0x04
 3d6:	55 81       	ldd	r21, Z+5	; 0x05
 3d8:	e0 91 98 21 	lds	r30, 0x2198
 3dc:	f0 91 99 21 	lds	r31, 0x2199
 3e0:	64 e0       	ldi	r22, 0x04	; 4
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	19 95       	eicall
}
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	bf 91       	pop	r27
 3ee:	af 91       	pop	r26
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	7f 91       	pop	r23
 3f6:	6f 91       	pop	r22
 3f8:	5f 91       	pop	r21
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0b be       	out	0x3b, r0	; 59
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	0b b6       	in	r0, 0x3b	; 59
 41a:	0f 92       	push	r0
 41c:	2f 93       	push	r18
 41e:	3f 93       	push	r19
 420:	4f 93       	push	r20
 422:	5f 93       	push	r21
 424:	6f 93       	push	r22
 426:	7f 93       	push	r23
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
 42c:	af 93       	push	r26
 42e:	bf 93       	push	r27
 430:	ef 93       	push	r30
 432:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
 434:	e8 e3       	ldi	r30, 0x38	; 56
 436:	f2 e0       	ldi	r31, 0x02	; 2
 438:	44 81       	ldd	r20, Z+4	; 0x04
 43a:	55 81       	ldd	r21, Z+5	; 0x05
 43c:	e0 91 98 21 	lds	r30, 0x2198
 440:	f0 91 99 21 	lds	r31, 0x2199
 444:	68 e0       	ldi	r22, 0x08	; 8
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	92 e0       	ldi	r25, 0x02	; 2
 44a:	19 95       	eicall
}
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0b be       	out	0x3b, r0	; 59
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	0b b6       	in	r0, 0x3b	; 59
 47e:	0f 92       	push	r0
 480:	2f 93       	push	r18
 482:	3f 93       	push	r19
 484:	4f 93       	push	r20
 486:	5f 93       	push	r21
 488:	6f 93       	push	r22
 48a:	7f 93       	push	r23
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
 498:	e0 e4       	ldi	r30, 0x40	; 64
 49a:	f2 e0       	ldi	r31, 0x02	; 2
 49c:	44 a1       	ldd	r20, Z+36	; 0x24
 49e:	55 a1       	ldd	r21, Z+37	; 0x25
 4a0:	e0 91 96 21 	lds	r30, 0x2196
 4a4:	f0 91 97 21 	lds	r31, 0x2197
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	80 e4       	ldi	r24, 0x40	; 64
 4ac:	92 e0       	ldi	r25, 0x02	; 2
 4ae:	19 95       	eicall
}
 4b0:	ff 91       	pop	r31
 4b2:	ef 91       	pop	r30
 4b4:	bf 91       	pop	r27
 4b6:	af 91       	pop	r26
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	7f 91       	pop	r23
 4be:	6f 91       	pop	r22
 4c0:	5f 91       	pop	r21
 4c2:	4f 91       	pop	r20
 4c4:	3f 91       	pop	r19
 4c6:	2f 91       	pop	r18
 4c8:	0f 90       	pop	r0
 4ca:	0b be       	out	0x3b, r0	; 59
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	0b b6       	in	r0, 0x3b	; 59
 4e2:	0f 92       	push	r0
 4e4:	2f 93       	push	r18
 4e6:	3f 93       	push	r19
 4e8:	4f 93       	push	r20
 4ea:	5f 93       	push	r21
 4ec:	6f 93       	push	r22
 4ee:	7f 93       	push	r23
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
 4f4:	af 93       	push	r26
 4f6:	bf 93       	push	r27
 4f8:	ef 93       	push	r30
 4fa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
 4fc:	e8 e6       	ldi	r30, 0x68	; 104
 4fe:	f2 e0       	ldi	r31, 0x02	; 2
 500:	44 81       	ldd	r20, Z+4	; 0x04
 502:	55 81       	ldd	r21, Z+5	; 0x05
 504:	e0 91 96 21 	lds	r30, 0x2196
 508:	f0 91 97 21 	lds	r31, 0x2197
 50c:	62 e0       	ldi	r22, 0x02	; 2
 50e:	80 e4       	ldi	r24, 0x40	; 64
 510:	92 e0       	ldi	r25, 0x02	; 2
 512:	19 95       	eicall
}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0b be       	out	0x3b, r0	; 59
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	0b b6       	in	r0, 0x3b	; 59
 546:	0f 92       	push	r0
 548:	2f 93       	push	r18
 54a:	3f 93       	push	r19
 54c:	4f 93       	push	r20
 54e:	5f 93       	push	r21
 550:	6f 93       	push	r22
 552:	7f 93       	push	r23
 554:	8f 93       	push	r24
 556:	9f 93       	push	r25
 558:	af 93       	push	r26
 55a:	bf 93       	push	r27
 55c:	ef 93       	push	r30
 55e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
 560:	e0 e7       	ldi	r30, 0x70	; 112
 562:	f2 e0       	ldi	r31, 0x02	; 2
 564:	44 81       	ldd	r20, Z+4	; 0x04
 566:	55 81       	ldd	r21, Z+5	; 0x05
 568:	e0 91 96 21 	lds	r30, 0x2196
 56c:	f0 91 97 21 	lds	r31, 0x2197
 570:	64 e0       	ldi	r22, 0x04	; 4
 572:	80 e4       	ldi	r24, 0x40	; 64
 574:	92 e0       	ldi	r25, 0x02	; 2
 576:	19 95       	eicall
}
 578:	ff 91       	pop	r31
 57a:	ef 91       	pop	r30
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	7f 91       	pop	r23
 586:	6f 91       	pop	r22
 588:	5f 91       	pop	r21
 58a:	4f 91       	pop	r20
 58c:	3f 91       	pop	r19
 58e:	2f 91       	pop	r18
 590:	0f 90       	pop	r0
 592:	0b be       	out	0x3b, r0	; 59
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0
 59a:	1f 90       	pop	r1
 59c:	18 95       	reti

0000059e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	0b b6       	in	r0, 0x3b	; 59
 5aa:	0f 92       	push	r0
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
 5c4:	e8 e7       	ldi	r30, 0x78	; 120
 5c6:	f2 e0       	ldi	r31, 0x02	; 2
 5c8:	44 81       	ldd	r20, Z+4	; 0x04
 5ca:	55 81       	ldd	r21, Z+5	; 0x05
 5cc:	e0 91 96 21 	lds	r30, 0x2196
 5d0:	f0 91 97 21 	lds	r31, 0x2197
 5d4:	68 e0       	ldi	r22, 0x08	; 8
 5d6:	80 e4       	ldi	r24, 0x40	; 64
 5d8:	92 e0       	ldi	r25, 0x02	; 2
 5da:	19 95       	eicall
}
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0b be       	out	0x3b, r0	; 59
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
 602:	df 92       	push	r13
 604:	ef 92       	push	r14
 606:	ff 92       	push	r15
 608:	0f 93       	push	r16
 60a:	1f 93       	push	r17
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	ec 01       	movw	r28, r24
 612:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
 614:	c1 15       	cp	r28, r1
 616:	22 e0       	ldi	r18, 0x02	; 2
 618:	d2 07       	cpc	r29, r18
 61a:	71 f4       	brne	.+28     	; 0x638 <adc_write_configuration+0x36>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
 61c:	61 e2       	ldi	r22, 0x21	; 33
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	fd d0       	rcall	.+506    	; 0x81e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
 624:	e8 2e       	mov	r14, r24
 626:	f1 2c       	mov	r15, r1
 628:	60 e2       	ldi	r22, 0x20	; 32
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	f7 d0       	rcall	.+494    	; 0x81e <nvm_read_byte>
		data <<= 8;
 630:	fe 2c       	mov	r15, r14
 632:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
 634:	e8 2a       	or	r14, r24
 636:	10 c0       	rjmp	.+32     	; 0x658 <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
 638:	80 34       	cpi	r24, 0x40	; 64
 63a:	92 40       	sbci	r25, 0x02	; 2
 63c:	59 f5       	brne	.+86     	; 0x694 <adc_write_configuration+0x92>
 63e:	65 e2       	ldi	r22, 0x25	; 37
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	ec d0       	rcall	.+472    	; 0x81e <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
 646:	e8 2e       	mov	r14, r24
 648:	f1 2c       	mov	r15, r1
 64a:	64 e2       	ldi	r22, 0x24	; 36
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	e6 d0       	rcall	.+460    	; 0x81e <nvm_read_byte>
		data <<= 8;
 652:	fe 2c       	mov	r15, r14
 654:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCBCAL0);
 656:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 658:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
 65a:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
 65c:	ce 01       	movw	r24, r28
 65e:	ee dd       	rcall	.-1060   	; 0x23c <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
 660:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	88 83       	st	Y, r24
	adc->CAL = cal;
 666:	ec 86       	std	Y+12, r14	; 0x0c
 668:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
 66a:	f8 01       	movw	r30, r16
 66c:	85 81       	ldd	r24, Z+5	; 0x05
 66e:	96 81       	ldd	r25, Z+6	; 0x06
 670:	88 8f       	std	Y+24, r24	; 0x18
 672:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
 674:	82 81       	ldd	r24, Z+2	; 0x02
 676:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
 678:	84 81       	ldd	r24, Z+4	; 0x04
 67a:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
 67c:	83 81       	ldd	r24, Z+3	; 0x03
 67e:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
 680:	81 81       	ldd	r24, Z+1	; 0x01
 682:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
 684:	82 2f       	mov	r24, r18
 686:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
 688:	90 81       	ld	r25, Z
 68a:	89 2b       	or	r24, r25
 68c:	88 83       	st	Y, r24

	adc_disable_clock(adc);
 68e:	ce 01       	movw	r24, r28
 690:	f4 dd       	rcall	.-1048   	; 0x27a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 692:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	1f 91       	pop	r17
 69a:	0f 91       	pop	r16
 69c:	ff 90       	pop	r15
 69e:	ef 90       	pop	r14
 6a0:	df 90       	pop	r13
 6a2:	08 95       	ret

000006a4 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
 6a4:	ff 92       	push	r15
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	ec 01       	movw	r28, r24
 6b0:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 6b2:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
 6b4:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
 6b6:	c2 dd       	rcall	.-1148   	; 0x23c <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
 6b8:	88 81       	ld	r24, Y
 6ba:	80 7c       	andi	r24, 0xC0	; 192
 6bc:	f8 01       	movw	r30, r16
 6be:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
 6c0:	88 8d       	ldd	r24, Y+24	; 0x18
 6c2:	99 8d       	ldd	r25, Y+25	; 0x19
 6c4:	85 83       	std	Z+5, r24	; 0x05
 6c6:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
 6cc:	8c 81       	ldd	r24, Y+4	; 0x04
 6ce:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
 6d0:	8b 81       	ldd	r24, Y+3	; 0x03
 6d2:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
 6d4:	89 81       	ldd	r24, Y+1	; 0x01
 6d6:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
 6d8:	ce 01       	movw	r24, r28
 6da:	cf dd       	rcall	.-1122   	; 0x27a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 6dc:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	08 95       	ret

000006ea <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
 6ea:	cf 92       	push	r12
 6ec:	df 92       	push	r13
 6ee:	ef 92       	push	r14
 6f0:	ff 92       	push	r15
 6f2:	0f 93       	push	r16
 6f4:	1f 93       	push	r17
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
 6fa:	7c 01       	movw	r14, r24
 6fc:	d6 2e       	mov	r13, r22
 6fe:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
 700:	86 2f       	mov	r24, r22
 702:	83 70       	andi	r24, 0x03	; 3
 704:	29 f4       	brne	.+10     	; 0x710 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
 706:	96 2f       	mov	r25, r22
 708:	96 95       	lsr	r25
 70a:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	02 c0       	rjmp	.+4      	; 0x714 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
 710:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
 712:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
 714:	90 ff       	sbrs	r25, 0
		index++;
 716:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
 718:	e7 01       	movw	r28, r14
 71a:	a0 96       	adiw	r28, 0x20	; 32
 71c:	98 e0       	ldi	r25, 0x08	; 8
 71e:	89 9f       	mul	r24, r25
 720:	c0 0d       	add	r28, r0
 722:	d1 1d       	adc	r29, r1
 724:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 726:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
 728:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
 72a:	c7 01       	movw	r24, r14
 72c:	87 dd       	rcall	.-1266   	; 0x23c <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
 72e:	f8 01       	movw	r30, r16
 730:	80 81       	ld	r24, Z
 732:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
 734:	82 81       	ldd	r24, Z+2	; 0x02
 736:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
 738:	81 81       	ldd	r24, Z+1	; 0x01
 73a:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
 73c:	d0 fe       	sbrs	r13, 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
 740:	83 81       	ldd	r24, Z+3	; 0x03
 742:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
 744:	c7 01       	movw	r24, r14
 746:	99 dd       	rcall	.-1230   	; 0x27a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 748:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	1f 91       	pop	r17
 750:	0f 91       	pop	r16
 752:	ff 90       	pop	r15
 754:	ef 90       	pop	r14
 756:	df 90       	pop	r13
 758:	cf 90       	pop	r12
 75a:	08 95       	ret

0000075c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
 75c:	cf 92       	push	r12
 75e:	df 92       	push	r13
 760:	ef 92       	push	r14
 762:	ff 92       	push	r15
 764:	0f 93       	push	r16
 766:	1f 93       	push	r17
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	7c 01       	movw	r14, r24
 76e:	d6 2e       	mov	r13, r22
 770:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
 772:	86 2f       	mov	r24, r22
 774:	83 70       	andi	r24, 0x03	; 3
 776:	29 f4       	brne	.+10     	; 0x782 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
 778:	96 2f       	mov	r25, r22
 77a:	96 95       	lsr	r25
 77c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	02 c0       	rjmp	.+4      	; 0x786 <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
 782:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
 784:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
 786:	90 ff       	sbrs	r25, 0
		index++;
 788:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
 78a:	87 01       	movw	r16, r14
 78c:	00 5e       	subi	r16, 0xE0	; 224
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	98 e0       	ldi	r25, 0x08	; 8
 792:	89 9f       	mul	r24, r25
 794:	00 0d       	add	r16, r0
 796:	11 1d       	adc	r17, r1
 798:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 79a:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
 79c:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
 79e:	c7 01       	movw	r24, r14
 7a0:	4d dd       	rcall	.-1382   	; 0x23c <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
 7a2:	f8 01       	movw	r30, r16
 7a4:	80 81       	ld	r24, Z
 7a6:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
 7a8:	82 81       	ldd	r24, Z+2	; 0x02
 7aa:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
 7ac:	81 81       	ldd	r24, Z+1	; 0x01
 7ae:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
 7b0:	d0 fe       	sbrs	r13, 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
 7b4:	86 81       	ldd	r24, Z+6	; 0x06
 7b6:	8b 83       	std	Y+3, r24	; 0x03
	}
	adc_disable_clock(adc);
 7b8:	c7 01       	movw	r24, r14
 7ba:	5f dd       	rcall	.-1346   	; 0x27a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 7bc:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	1f 91       	pop	r17
 7c4:	0f 91       	pop	r16
 7c6:	ff 90       	pop	r15
 7c8:	ef 90       	pop	r14
 7ca:	df 90       	pop	r13
 7cc:	cf 90       	pop	r12
 7ce:	08 95       	ret

000007d0 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	80 93 70 00 	sts	0x0070, r24
 7d6:	80 93 71 00 	sts	0x0071, r24
 7da:	80 93 72 00 	sts	0x0072, r24
 7de:	80 93 73 00 	sts	0x0073, r24
 7e2:	80 93 74 00 	sts	0x0074, r24
 7e6:	80 93 75 00 	sts	0x0075, r24
 7ea:	80 93 76 00 	sts	0x0076, r24
 7ee:	08 95       	ret

000007f0 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 7f0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 7f2:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 7f4:	e8 2f       	mov	r30, r24
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	e0 59       	subi	r30, 0x90	; 144
 7fa:	ff 4f       	sbci	r31, 0xFF	; 255
 7fc:	60 95       	com	r22
 7fe:	80 81       	ld	r24, Z
 800:	68 23       	and	r22, r24
 802:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 804:	9f bf       	out	0x3f, r25	; 63
 806:	08 95       	ret

00000808 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 808:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 80a:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
 80c:	e8 2f       	mov	r30, r24
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	e0 59       	subi	r30, 0x90	; 144
 812:	ff 4f       	sbci	r31, 0xFF	; 255
 814:	80 81       	ld	r24, Z
 816:	68 2b       	or	r22, r24
 818:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 81a:	9f bf       	out	0x3f, r25	; 63
 81c:	08 95       	ret

0000081e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
 81e:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
 822:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
 824:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
 826:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
 82a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
 82c:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
 830:	08 95       	ret

00000832 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
 836:	fc 01       	movw	r30, r24
 838:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 83a:	20 e0       	ldi	r18, 0x00	; 0
 83c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 83e:	c6 2f       	mov	r28, r22
 840:	d0 e0       	ldi	r29, 0x00	; 0
 842:	de 01       	movw	r26, r28
 844:	02 2e       	mov	r0, r18
 846:	02 c0       	rjmp	.+4      	; 0x84c <ioport_configure_port_pin+0x1a>
 848:	b5 95       	asr	r27
 84a:	a7 95       	ror	r26
 84c:	0a 94       	dec	r0
 84e:	e2 f7       	brpl	.-8      	; 0x848 <ioport_configure_port_pin+0x16>
 850:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 852:	50 83       	st	Z, r21
 854:	2f 5f       	subi	r18, 0xFF	; 255
 856:	3f 4f       	sbci	r19, 0xFF	; 255
 858:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 85a:	28 30       	cpi	r18, 0x08	; 8
 85c:	31 05       	cpc	r19, r1
 85e:	89 f7       	brne	.-30     	; 0x842 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 860:	40 ff       	sbrs	r20, 0
 862:	0a c0       	rjmp	.+20     	; 0x878 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 864:	41 ff       	sbrs	r20, 1
 866:	03 c0       	rjmp	.+6      	; 0x86e <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 868:	fc 01       	movw	r30, r24
 86a:	65 83       	std	Z+5, r22	; 0x05
 86c:	02 c0       	rjmp	.+4      	; 0x872 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 86e:	fc 01       	movw	r30, r24
 870:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 872:	fc 01       	movw	r30, r24
 874:	61 83       	std	Z+1, r22	; 0x01
 876:	02 c0       	rjmp	.+4      	; 0x87c <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 878:	fc 01       	movw	r30, r24
 87a:	62 83       	std	Z+2, r22	; 0x02
	}
}
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 882:	43 e0       	ldi	r20, 0x03	; 3
 884:	50 e0       	ldi	r21, 0x00	; 0
 886:	61 e0       	ldi	r22, 0x01	; 1
 888:	80 ee       	ldi	r24, 0xE0	; 224
 88a:	97 e0       	ldi	r25, 0x07	; 7
 88c:	d2 df       	rcall	.-92     	; 0x832 <ioport_configure_port_pin>
 88e:	43 e0       	ldi	r20, 0x03	; 3
 890:	50 e0       	ldi	r21, 0x00	; 0
 892:	62 e0       	ldi	r22, 0x02	; 2
 894:	80 ee       	ldi	r24, 0xE0	; 224
 896:	97 e0       	ldi	r25, 0x07	; 7
 898:	cc df       	rcall	.-104    	; 0x832 <ioport_configure_port_pin>
 89a:	43 e0       	ldi	r20, 0x03	; 3
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	60 e1       	ldi	r22, 0x10	; 16
 8a0:	80 e6       	ldi	r24, 0x60	; 96
 8a2:	96 e0       	ldi	r25, 0x06	; 6
 8a4:	c6 df       	rcall	.-116    	; 0x832 <ioport_configure_port_pin>
 8a6:	41 e0       	ldi	r20, 0x01	; 1
 8a8:	50 e4       	ldi	r21, 0x40	; 64
 8aa:	60 e2       	ldi	r22, 0x20	; 32
 8ac:	80 e6       	ldi	r24, 0x60	; 96
 8ae:	96 e0       	ldi	r25, 0x06	; 6
 8b0:	c0 df       	rcall	.-128    	; 0x832 <ioport_configure_port_pin>
 8b2:	40 e0       	ldi	r20, 0x00	; 0
 8b4:	5b e1       	ldi	r21, 0x1B	; 27
 8b6:	60 e2       	ldi	r22, 0x20	; 32
 8b8:	80 e8       	ldi	r24, 0x80	; 128
 8ba:	96 e0       	ldi	r25, 0x06	; 6
 8bc:	ba df       	rcall	.-140    	; 0x832 <ioport_configure_port_pin>
 8be:	40 e0       	ldi	r20, 0x00	; 0
 8c0:	5b e1       	ldi	r21, 0x1B	; 27
 8c2:	62 e0       	ldi	r22, 0x02	; 2
 8c4:	80 ea       	ldi	r24, 0xA0	; 160
 8c6:	96 e0       	ldi	r25, 0x06	; 6
 8c8:	b4 df       	rcall	.-152    	; 0x832 <ioport_configure_port_pin>
 8ca:	40 e0       	ldi	r20, 0x00	; 0
 8cc:	5b e1       	ldi	r21, 0x1B	; 27
 8ce:	64 e0       	ldi	r22, 0x04	; 4
 8d0:	80 ea       	ldi	r24, 0xA0	; 160
 8d2:	96 e0       	ldi	r25, 0x06	; 6
 8d4:	ae df       	rcall	.-164    	; 0x832 <ioport_configure_port_pin>
 8d6:	43 e0       	ldi	r20, 0x03	; 3
 8d8:	50 e0       	ldi	r21, 0x00	; 0
 8da:	62 e0       	ldi	r22, 0x02	; 2
 8dc:	80 e6       	ldi	r24, 0x60	; 96
 8de:	96 e0       	ldi	r25, 0x06	; 6
 8e0:	a8 df       	rcall	.-176    	; 0x832 <ioport_configure_port_pin>
 8e2:	43 e0       	ldi	r20, 0x03	; 3
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	68 e0       	ldi	r22, 0x08	; 8
 8e8:	80 e6       	ldi	r24, 0x60	; 96
 8ea:	96 e0       	ldi	r25, 0x06	; 6
 8ec:	a2 df       	rcall	.-188    	; 0x832 <ioport_configure_port_pin>
 8ee:	43 e0       	ldi	r20, 0x03	; 3
 8f0:	50 e0       	ldi	r21, 0x00	; 0
 8f2:	68 e0       	ldi	r22, 0x08	; 8
 8f4:	80 ea       	ldi	r24, 0xA0	; 160
 8f6:	96 e0       	ldi	r25, 0x06	; 6
 8f8:	9c df       	rcall	.-200    	; 0x832 <ioport_configure_port_pin>
 8fa:	43 e0       	ldi	r20, 0x03	; 3
 8fc:	50 e0       	ldi	r21, 0x00	; 0
 8fe:	61 e0       	ldi	r22, 0x01	; 1
 900:	80 e6       	ldi	r24, 0x60	; 96
 902:	96 e0       	ldi	r25, 0x06	; 6
 904:	96 df       	rcall	.-212    	; 0x832 <ioport_configure_port_pin>
 906:	43 e0       	ldi	r20, 0x03	; 3
 908:	50 e0       	ldi	r21, 0x00	; 0
 90a:	68 e0       	ldi	r22, 0x08	; 8
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	96 e0       	ldi	r25, 0x06	; 6
 910:	90 df       	rcall	.-224    	; 0x832 <ioport_configure_port_pin>
 912:	41 e0       	ldi	r20, 0x01	; 1
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	60 e1       	ldi	r22, 0x10	; 16
 918:	80 e8       	ldi	r24, 0x80	; 128
 91a:	96 e0       	ldi	r25, 0x06	; 6
 91c:	8a df       	rcall	.-236    	; 0x832 <ioport_configure_port_pin>
 91e:	43 e0       	ldi	r20, 0x03	; 3
 920:	50 e0       	ldi	r21, 0x00	; 0
 922:	62 e0       	ldi	r22, 0x02	; 2
 924:	80 e6       	ldi	r24, 0x60	; 96
 926:	96 e0       	ldi	r25, 0x06	; 6
 928:	84 df       	rcall	.-248    	; 0x832 <ioport_configure_port_pin>
 92a:	43 e0       	ldi	r20, 0x03	; 3
 92c:	50 e0       	ldi	r21, 0x00	; 0
 92e:	68 e0       	ldi	r22, 0x08	; 8
 930:	80 e6       	ldi	r24, 0x60	; 96
 932:	96 e0       	ldi	r25, 0x06	; 6
 934:	7e df       	rcall	.-260    	; 0x832 <ioport_configure_port_pin>
 936:	40 e0       	ldi	r20, 0x00	; 0
 938:	50 e0       	ldi	r21, 0x00	; 0
 93a:	64 e0       	ldi	r22, 0x04	; 4
 93c:	80 e6       	ldi	r24, 0x60	; 96
 93e:	96 e0       	ldi	r25, 0x06	; 6
 940:	78 df       	rcall	.-272    	; 0x832 <ioport_configure_port_pin>
 942:	43 e0       	ldi	r20, 0x03	; 3
 944:	50 e0       	ldi	r21, 0x00	; 0
 946:	60 e1       	ldi	r22, 0x10	; 16
 948:	80 ea       	ldi	r24, 0xA0	; 160
 94a:	96 e0       	ldi	r25, 0x06	; 6
 94c:	72 df       	rcall	.-284    	; 0x832 <ioport_configure_port_pin>
 94e:	40 e0       	ldi	r20, 0x00	; 0
 950:	50 e0       	ldi	r21, 0x00	; 0
 952:	61 e0       	ldi	r22, 0x01	; 1
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	96 e0       	ldi	r25, 0x06	; 6
 958:	6c df       	rcall	.-296    	; 0x832 <ioport_configure_port_pin>
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	50 e0       	ldi	r21, 0x00	; 0
 95e:	64 e0       	ldi	r22, 0x04	; 4
 960:	80 e0       	ldi	r24, 0x00	; 0
 962:	96 e0       	ldi	r25, 0x06	; 6
 964:	66 df       	rcall	.-308    	; 0x832 <ioport_configure_port_pin>
 966:	40 e0       	ldi	r20, 0x00	; 0
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	62 e0       	ldi	r22, 0x02	; 2
 96c:	80 e2       	ldi	r24, 0x20	; 32
 96e:	96 e0       	ldi	r25, 0x06	; 6
 970:	60 df       	rcall	.-320    	; 0x832 <ioport_configure_port_pin>
 972:	43 e0       	ldi	r20, 0x03	; 3
 974:	50 e0       	ldi	r21, 0x00	; 0
 976:	68 e0       	ldi	r22, 0x08	; 8
 978:	80 e4       	ldi	r24, 0x40	; 64
 97a:	96 e0       	ldi	r25, 0x06	; 6
 97c:	5a df       	rcall	.-332    	; 0x832 <ioport_configure_port_pin>
 97e:	40 e0       	ldi	r20, 0x00	; 0
 980:	50 e0       	ldi	r21, 0x00	; 0
 982:	64 e0       	ldi	r22, 0x04	; 4
 984:	80 e4       	ldi	r24, 0x40	; 64
 986:	96 e0       	ldi	r25, 0x06	; 6
 988:	54 df       	rcall	.-344    	; 0x832 <ioport_configure_port_pin>
 98a:	43 e0       	ldi	r20, 0x03	; 3
 98c:	50 e0       	ldi	r21, 0x00	; 0
 98e:	68 e0       	ldi	r22, 0x08	; 8
 990:	80 e6       	ldi	r24, 0x60	; 96
 992:	96 e0       	ldi	r25, 0x06	; 6
 994:	4e df       	rcall	.-356    	; 0x832 <ioport_configure_port_pin>
 996:	40 e0       	ldi	r20, 0x00	; 0
 998:	50 e0       	ldi	r21, 0x00	; 0
 99a:	64 e0       	ldi	r22, 0x04	; 4
 99c:	80 e6       	ldi	r24, 0x60	; 96
 99e:	96 e0       	ldi	r25, 0x06	; 6
 9a0:	48 df       	rcall	.-368    	; 0x832 <ioport_configure_port_pin>
 9a2:	43 e0       	ldi	r20, 0x03	; 3
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	68 e0       	ldi	r22, 0x08	; 8
 9a8:	80 e8       	ldi	r24, 0x80	; 128
 9aa:	96 e0       	ldi	r25, 0x06	; 6
 9ac:	42 df       	rcall	.-380    	; 0x832 <ioport_configure_port_pin>
 9ae:	40 e0       	ldi	r20, 0x00	; 0
 9b0:	50 e0       	ldi	r21, 0x00	; 0
 9b2:	64 e0       	ldi	r22, 0x04	; 4
 9b4:	80 e8       	ldi	r24, 0x80	; 128
 9b6:	96 e0       	ldi	r25, 0x06	; 6
 9b8:	3c cf       	rjmp	.-392    	; 0x832 <ioport_configure_port_pin>
 9ba:	08 95       	ret

000009bc <main>:
#define SAMPLE_SIZE 200

static void adc_init(void);

int main (void)
{
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	cd b7       	in	r28, 0x3d	; 61
 9c2:	de b7       	in	r29, 0x3e	; 62
 9c4:	2b 97       	sbiw	r28, 0x0b	; 11
 9c6:	cd bf       	out	0x3d, r28	; 61
 9c8:	de bf       	out	0x3e, r29	; 62
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
 9ca:	02 df       	rcall	.-508    	; 0x7d0 <sysclk_init>

	board_init();
 9cc:	5a df       	rcall	.-332    	; 0x882 <board_init>

static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(&MY_ADC, &adc_conf);
 9ce:	be 01       	movw	r22, r28
 9d0:	6f 5f       	subi	r22, 0xFF	; 255
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	92 e0       	ldi	r25, 0x02	; 2
 9d8:	65 de       	rcall	.-822    	; 0x6a4 <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
 9da:	ae 01       	movw	r20, r28
 9dc:	48 5f       	subi	r20, 0xF8	; 248
 9de:	5f 4f       	sbci	r21, 0xFF	; 255
 9e0:	61 e0       	ldi	r22, 0x01	; 1
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	92 e0       	ldi	r25, 0x02	; 2
 9e6:	ba de       	rcall	.-652    	; 0x75c <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
 9e8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ea:	89 7e       	andi	r24, 0xE9	; 233
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
 9ec:	9b 81       	ldd	r25, Y+3	; 0x03
 9ee:	9f 78       	andi	r25, 0x8F	; 143
 9f0:	9b 83       	std	Y+3, r25	; 0x03
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
				(nr_of_ch << ADC_EVACT_gp);
		break;

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
 9f2:	88 61       	ori	r24, 0x18	; 24
 9f4:	8a 83       	std	Y+2, r24	; 0x02
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
 9f6:	1d 82       	std	Y+5, r1	; 0x05
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
 9f8:	83 e1       	ldi	r24, 0x13	; 19
 9fa:	88 87       	std	Y+8, r24	; 0x08
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
 9fc:	19 86       	std	Y+9, r1	; 0x09
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_ON, ADC_RES_12,
	ADC_REF_BANDGAP);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_FREERUN, 1, 0);
	adc_set_clock_rate(&adc_conf, 2000000UL);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_PIN4, 16);
	adc_write_configuration(&MY_ADC, &adc_conf);
 9fe:	be 01       	movw	r22, r28
 a00:	6f 5f       	subi	r22, 0xFF	; 255
 a02:	7f 4f       	sbci	r23, 0xFF	; 255
 a04:	80 e0       	ldi	r24, 0x00	; 0
 a06:	92 e0       	ldi	r25, 0x02	; 2
 a08:	fc dd       	rcall	.-1032   	; 0x602 <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
 a0a:	ae 01       	movw	r20, r28
 a0c:	48 5f       	subi	r20, 0xF8	; 248
 a0e:	5f 4f       	sbci	r21, 0xFF	; 255
 a10:	61 e0       	ldi	r22, 0x01	; 1
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	92 e0       	ldi	r25, 0x02	; 2
 a16:	69 de       	rcall	.-814    	; 0x6ea <adcch_write_configuration>
	static int i = 0;
// 	static int mean = 0;
// 	static int count = 1;
// 	static int double_count = 0;
		
	adc_enable(&MY_ADC);
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	92 e0       	ldi	r25, 0x02	; 2
 a1c:	4b dc       	rcall	.-1898   	; 0x2b4 <adc_enable>
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
 a1e:	e0 e0       	ldi	r30, 0x00	; 0
 a20:	f2 e0       	ldi	r31, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 a22:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 a24:	f8 94       	cli
 a26:	90 81       	ld	r25, Z
 a28:	94 60       	ori	r25, 0x04	; 4
 a2a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 a2c:	8f bf       	out	0x3f, r24	; 63

	while(true)
	{
		adc_start_conversion(&MY_ADC, MY_ADC_CH);
// 		adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
		ADC_result = adc_get_result(&MY_ADC, MY_ADC_CH);
 a2e:	24 a1       	ldd	r18, Z+36	; 0x24
 a30:	35 a1       	ldd	r19, Z+37	; 0x25
 a32:	20 93 94 21 	sts	0x2194, r18
 a36:	30 93 95 21 	sts	0x2195, r19
		ADC_results[i] = ADC_result;
 a3a:	80 91 92 21 	lds	r24, 0x2192
 a3e:	90 91 93 21 	lds	r25, 0x2193
 a42:	dc 01       	movw	r26, r24
 a44:	aa 0f       	add	r26, r26
 a46:	bb 1f       	adc	r27, r27
 a48:	ae 5f       	subi	r26, 0xFE	; 254
 a4a:	bf 4d       	sbci	r27, 0xDF	; 223
 a4c:	2d 93       	st	X+, r18
 a4e:	3c 93       	st	X, r19
// 		for (int j = 0; j < 100; j++)
// 		{
// 			running_total += ADC_results[j];
// 		}
// 		mean = running_total / 100;
		i++;
 a50:	01 96       	adiw	r24, 0x01	; 1
 a52:	80 93 92 21 	sts	0x2192, r24
 a56:	90 93 93 21 	sts	0x2193, r25
// 		count++;
// 		if (count == 0)
// 			double_count++;
		if (i == SAMPLE_SIZE)
 a5a:	88 3c       	cpi	r24, 0xC8	; 200
 a5c:	91 05       	cpc	r25, r1
 a5e:	09 f7       	brne	.-62     	; 0xa22 <main+0x66>
			i = 0;
 a60:	10 92 92 21 	sts	0x2192, r1
 a64:	10 92 93 21 	sts	0x2193, r1
 a68:	dc cf       	rjmp	.-72     	; 0xa22 <main+0x66>

00000a6a <_exit>:
 a6a:	f8 94       	cli

00000a6c <__stop_program>:
 a6c:	ff cf       	rjmp	.-2      	; 0xa6c <__stop_program>
