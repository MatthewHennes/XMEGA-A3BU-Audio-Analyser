
XMEGA-A3BU_FFT_plain_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000242a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  0000242a  000024be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000065c  00802020  00802020  000024de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003b0  00000000  00000000  00002510  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007229  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013c5  00000000  00000000  00009ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004870  00000000  00000000  0000aeae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001424  00000000  00000000  0000f720  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002b1ad  00000000  00000000  00010b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000411e  00000000  00000000  0003bcf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000340  00000000  00000000  0003fe10  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a93b  00000000  00000000  00040150  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bd c1       	rjmp	.+890    	; 0x37c <__ctors_end>
       2:	00 00       	nop
       4:	dc c1       	rjmp	.+952    	; 0x3be <__bad_interrupt>
       6:	00 00       	nop
       8:	da c1       	rjmp	.+948    	; 0x3be <__bad_interrupt>
       a:	00 00       	nop
       c:	d8 c1       	rjmp	.+944    	; 0x3be <__bad_interrupt>
       e:	00 00       	nop
      10:	d6 c1       	rjmp	.+940    	; 0x3be <__bad_interrupt>
      12:	00 00       	nop
      14:	d4 c1       	rjmp	.+936    	; 0x3be <__bad_interrupt>
      16:	00 00       	nop
      18:	d2 c1       	rjmp	.+932    	; 0x3be <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d0 c1       	rjmp	.+928    	; 0x3be <__bad_interrupt>
      1e:	00 00       	nop
      20:	ce c1       	rjmp	.+924    	; 0x3be <__bad_interrupt>
      22:	00 00       	nop
      24:	cc c1       	rjmp	.+920    	; 0x3be <__bad_interrupt>
      26:	00 00       	nop
      28:	ca c1       	rjmp	.+916    	; 0x3be <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c8 c1       	rjmp	.+912    	; 0x3be <__bad_interrupt>
      2e:	00 00       	nop
      30:	c6 c1       	rjmp	.+908    	; 0x3be <__bad_interrupt>
      32:	00 00       	nop
      34:	c4 c1       	rjmp	.+904    	; 0x3be <__bad_interrupt>
      36:	00 00       	nop
      38:	1a c2       	rjmp	.+1076   	; 0x46e <__vector_14>
      3a:	00 00       	nop
      3c:	45 c2       	rjmp	.+1162   	; 0x4c8 <__vector_15>
      3e:	00 00       	nop
      40:	70 c2       	rjmp	.+1248   	; 0x522 <__vector_16>
      42:	00 00       	nop
      44:	9b c2       	rjmp	.+1334   	; 0x57c <__vector_17>
      46:	00 00       	nop
      48:	c6 c2       	rjmp	.+1420   	; 0x5d6 <__vector_18>
      4a:	00 00       	nop
      4c:	f1 c2       	rjmp	.+1506   	; 0x630 <__vector_19>
      4e:	00 00       	nop
      50:	1c c3       	rjmp	.+1592   	; 0x68a <__vector_20>
      52:	00 00       	nop
      54:	47 c3       	rjmp	.+1678   	; 0x6e4 <__vector_21>
      56:	00 00       	nop
      58:	72 c3       	rjmp	.+1764   	; 0x73e <__vector_22>
      5a:	00 00       	nop
      5c:	9d c3       	rjmp	.+1850   	; 0x798 <__vector_23>
      5e:	00 00       	nop
      60:	ae c1       	rjmp	.+860    	; 0x3be <__bad_interrupt>
      62:	00 00       	nop
      64:	ac c1       	rjmp	.+856    	; 0x3be <__bad_interrupt>
      66:	00 00       	nop
      68:	aa c1       	rjmp	.+852    	; 0x3be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a8 c1       	rjmp	.+848    	; 0x3be <__bad_interrupt>
      6e:	00 00       	nop
      70:	a6 c1       	rjmp	.+844    	; 0x3be <__bad_interrupt>
      72:	00 00       	nop
      74:	a4 c1       	rjmp	.+840    	; 0x3be <__bad_interrupt>
      76:	00 00       	nop
      78:	a2 c1       	rjmp	.+836    	; 0x3be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a0 c1       	rjmp	.+832    	; 0x3be <__bad_interrupt>
      7e:	00 00       	nop
      80:	9e c1       	rjmp	.+828    	; 0x3be <__bad_interrupt>
      82:	00 00       	nop
      84:	9c c1       	rjmp	.+824    	; 0x3be <__bad_interrupt>
      86:	00 00       	nop
      88:	9a c1       	rjmp	.+820    	; 0x3be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	98 c1       	rjmp	.+816    	; 0x3be <__bad_interrupt>
      8e:	00 00       	nop
      90:	96 c1       	rjmp	.+812    	; 0x3be <__bad_interrupt>
      92:	00 00       	nop
      94:	94 c1       	rjmp	.+808    	; 0x3be <__bad_interrupt>
      96:	00 00       	nop
      98:	92 c1       	rjmp	.+804    	; 0x3be <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_39>
      a0:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_40>
      a4:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__vector_41>
      a8:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__vector_42>
      ac:	88 c1       	rjmp	.+784    	; 0x3be <__bad_interrupt>
      ae:	00 00       	nop
      b0:	86 c1       	rjmp	.+780    	; 0x3be <__bad_interrupt>
      b2:	00 00       	nop
      b4:	84 c1       	rjmp	.+776    	; 0x3be <__bad_interrupt>
      b6:	00 00       	nop
      b8:	82 c1       	rjmp	.+772    	; 0x3be <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5c c5       	rjmp	.+2744   	; 0xb76 <__vector_47>
      be:	00 00       	nop
      c0:	87 c5       	rjmp	.+2830   	; 0xbd0 <__vector_48>
      c2:	00 00       	nop
      c4:	b2 c5       	rjmp	.+2916   	; 0xc2a <__vector_49>
      c6:	00 00       	nop
      c8:	dd c5       	rjmp	.+3002   	; 0xc84 <__vector_50>
      ca:	00 00       	nop
      cc:	08 c6       	rjmp	.+3088   	; 0xcde <__vector_51>
      ce:	00 00       	nop
      d0:	33 c6       	rjmp	.+3174   	; 0xd38 <__vector_52>
      d2:	00 00       	nop
      d4:	5e c6       	rjmp	.+3260   	; 0xd92 <__vector_53>
      d6:	00 00       	nop
      d8:	89 c6       	rjmp	.+3346   	; 0xdec <__vector_54>
      da:	00 00       	nop
      dc:	b4 c6       	rjmp	.+3432   	; 0xe46 <__vector_55>
      de:	00 00       	nop
      e0:	df c6       	rjmp	.+3518   	; 0xea0 <__vector_56>
      e2:	00 00       	nop
      e4:	6c c1       	rjmp	.+728    	; 0x3be <__bad_interrupt>
      e6:	00 00       	nop
      e8:	6a c1       	rjmp	.+724    	; 0x3be <__bad_interrupt>
      ea:	00 00       	nop
      ec:	68 c1       	rjmp	.+720    	; 0x3be <__bad_interrupt>
      ee:	00 00       	nop
      f0:	66 c1       	rjmp	.+716    	; 0x3be <__bad_interrupt>
      f2:	00 00       	nop
      f4:	64 c1       	rjmp	.+712    	; 0x3be <__bad_interrupt>
      f6:	00 00       	nop
      f8:	62 c1       	rjmp	.+708    	; 0x3be <__bad_interrupt>
      fa:	00 00       	nop
      fc:	60 c1       	rjmp	.+704    	; 0x3be <__bad_interrupt>
      fe:	00 00       	nop
     100:	5e c1       	rjmp	.+700    	; 0x3be <__bad_interrupt>
     102:	00 00       	nop
     104:	5c c1       	rjmp	.+696    	; 0x3be <__bad_interrupt>
     106:	00 00       	nop
     108:	5a c1       	rjmp	.+692    	; 0x3be <__bad_interrupt>
     10a:	00 00       	nop
     10c:	58 c1       	rjmp	.+688    	; 0x3be <__bad_interrupt>
     10e:	00 00       	nop
     110:	56 c1       	rjmp	.+684    	; 0x3be <__bad_interrupt>
     112:	00 00       	nop
     114:	54 c1       	rjmp	.+680    	; 0x3be <__bad_interrupt>
     116:	00 00       	nop
     118:	52 c1       	rjmp	.+676    	; 0x3be <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__vector_71>
     120:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__vector_72>
     124:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__vector_73>
     128:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_74>
     12c:	48 c1       	rjmp	.+656    	; 0x3be <__bad_interrupt>
     12e:	00 00       	nop
     130:	46 c1       	rjmp	.+652    	; 0x3be <__bad_interrupt>
     132:	00 00       	nop
     134:	5e c3       	rjmp	.+1724   	; 0x7f2 <__vector_77>
     136:	00 00       	nop
     138:	89 c3       	rjmp	.+1810   	; 0x84c <__vector_78>
     13a:	00 00       	nop
     13c:	b4 c3       	rjmp	.+1896   	; 0x8a6 <__vector_79>
     13e:	00 00       	nop
     140:	df c3       	rjmp	.+1982   	; 0x900 <__vector_80>
     142:	00 00       	nop
     144:	0a c4       	rjmp	.+2068   	; 0x95a <__vector_81>
     146:	00 00       	nop
     148:	35 c4       	rjmp	.+2154   	; 0x9b4 <__vector_82>
     14a:	00 00       	nop
     14c:	60 c4       	rjmp	.+2240   	; 0xa0e <__vector_83>
     14e:	00 00       	nop
     150:	8b c4       	rjmp	.+2326   	; 0xa68 <__vector_84>
     152:	00 00       	nop
     154:	b6 c4       	rjmp	.+2412   	; 0xac2 <__vector_85>
     156:	00 00       	nop
     158:	e1 c4       	rjmp	.+2498   	; 0xb1c <__vector_86>
     15a:	00 00       	nop
     15c:	30 c1       	rjmp	.+608    	; 0x3be <__bad_interrupt>
     15e:	00 00       	nop
     160:	2e c1       	rjmp	.+604    	; 0x3be <__bad_interrupt>
     162:	00 00       	nop
     164:	2c c1       	rjmp	.+600    	; 0x3be <__bad_interrupt>
     166:	00 00       	nop
     168:	2a c1       	rjmp	.+596    	; 0x3be <__bad_interrupt>
     16a:	00 00       	nop
     16c:	28 c1       	rjmp	.+592    	; 0x3be <__bad_interrupt>
     16e:	00 00       	nop
     170:	26 c1       	rjmp	.+588    	; 0x3be <__bad_interrupt>
     172:	00 00       	nop
     174:	24 c1       	rjmp	.+584    	; 0x3be <__bad_interrupt>
     176:	00 00       	nop
     178:	22 c1       	rjmp	.+580    	; 0x3be <__bad_interrupt>
     17a:	00 00       	nop
     17c:	20 c1       	rjmp	.+576    	; 0x3be <__bad_interrupt>
     17e:	00 00       	nop
     180:	1e c1       	rjmp	.+572    	; 0x3be <__bad_interrupt>
     182:	00 00       	nop
     184:	1c c1       	rjmp	.+568    	; 0x3be <__bad_interrupt>
     186:	00 00       	nop
     188:	1a c1       	rjmp	.+564    	; 0x3be <__bad_interrupt>
     18a:	00 00       	nop
     18c:	18 c1       	rjmp	.+560    	; 0x3be <__bad_interrupt>
     18e:	00 00       	nop
     190:	16 c1       	rjmp	.+556    	; 0x3be <__bad_interrupt>
     192:	00 00       	nop
     194:	14 c1       	rjmp	.+552    	; 0x3be <__bad_interrupt>
     196:	00 00       	nop
     198:	12 c1       	rjmp	.+548    	; 0x3be <__bad_interrupt>
     19a:	00 00       	nop
     19c:	10 c1       	rjmp	.+544    	; 0x3be <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	0e c1       	rjmp	.+540    	; 0x3be <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	0c c1       	rjmp	.+536    	; 0x3be <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	0a c1       	rjmp	.+532    	; 0x3be <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	08 c1       	rjmp	.+528    	; 0x3be <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a4 c6       	rjmp	.+3400   	; 0xefa <__vector_108>
     1b2:	00 00       	nop
     1b4:	cf c6       	rjmp	.+3486   	; 0xf54 <__vector_109>
     1b6:	00 00       	nop
     1b8:	fa c6       	rjmp	.+3572   	; 0xfae <__vector_110>
     1ba:	00 00       	nop
     1bc:	25 c7       	rjmp	.+3658   	; 0x1008 <__vector_111>
     1be:	00 00       	nop
     1c0:	50 c7       	rjmp	.+3744   	; 0x1062 <__vector_112>
     1c2:	00 00       	nop
     1c4:	7b c7       	rjmp	.+3830   	; 0x10bc <__vector_113>
     1c6:	00 00       	nop
     1c8:	fa c0       	rjmp	.+500    	; 0x3be <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	f8 c0       	rjmp	.+496    	; 0x3be <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	f6 c0       	rjmp	.+492    	; 0x3be <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	f4 c0       	rjmp	.+488    	; 0x3be <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	f2 c0       	rjmp	.+484    	; 0x3be <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	f0 c0       	rjmp	.+480    	; 0x3be <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	ee c0       	rjmp	.+476    	; 0x3be <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ec c0       	rjmp	.+472    	; 0x3be <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ea c0       	rjmp	.+468    	; 0x3be <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	e8 c0       	rjmp	.+464    	; 0x3be <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	e6 c0       	rjmp	.+460    	; 0x3be <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	e4 c0       	rjmp	.+456    	; 0x3be <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	e2 c0       	rjmp	.+452    	; 0x3be <__bad_interrupt>
	...

000001fc <__trampolines_end>:
	...
     22c:	01 00       	.word	0x0001	; ????
     22e:	01 00       	.word	0x0001	; ????
     230:	01 00       	.word	0x0001	; ????
     232:	01 00       	.word	0x0001	; ????
     234:	01 00       	.word	0x0001	; ????
     236:	02 00       	.word	0x0002	; ????
     238:	02 00       	.word	0x0002	; ????
     23a:	02 00       	.word	0x0002	; ????
     23c:	03 00       	.word	0x0003	; ????
     23e:	03 00       	.word	0x0003	; ????
     240:	04 00       	.word	0x0004	; ????
     242:	05 00       	.word	0x0005	; ????
     244:	05 00       	.word	0x0005	; ????
     246:	06 00       	.word	0x0006	; ????
     248:	07 00       	.word	0x0007	; ????
     24a:	08 00       	.word	0x0008	; ????
     24c:	0a 00       	.word	0x000a	; ????
     24e:	0b 00       	.word	0x000b	; ????
     250:	0d 00       	.word	0x000d	; ????
     252:	0f 00       	.word	0x000f	; ????
     254:	12 00       	.word	0x0012	; ????
     256:	14 00       	.word	0x0014	; ????
     258:	17 00       	.word	0x0017	; ????
     25a:	1b 00       	.word	0x001b	; ????
     25c:	1f 00       	.word	0x001f	; ????
     25e:	24 00       	.word	0x0024	; ????
     260:	29 00       	.word	0x0029	; ????
     262:	30 00       	.word	0x0030	; ????
     264:	37 00       	.word	0x0037	; ????
     266:	3f 00       	.word	0x003f	; ????
     268:	49 00       	.word	0x0049	; ????
     26a:	54 00       	.word	0x0054	; ????
     26c:	61 00       	.word	0x0061	; ????
     26e:	6f 00       	.word	0x006f	; ????
     270:	80 00       	.word	0x0080	; ????
     272:	93 00       	.word	0x0093	; ????
     274:	aa 00       	.word	0x00aa	; ????
     276:	c3 00       	.word	0x00c3	; ????
     278:	e1 00       	.word	0x00e1	; ????
     27a:	03 01       	movw	r0, r6

0000027c <hannTable>:
     27c:	00 00 02 00 09 00 16 00 27 00 3e 00 59 00 79 00     ........'.>.Y.y.
     28c:	9e 00 c8 00 f7 00 2b 01 63 01 a0 01 e2 01 29 02     ......+.c.....).
     29c:	74 02 c4 02 18 03 71 03 ce 03 30 04 96 04 00 05     t.....q...0.....
     2ac:	6f 05 e1 05 58 06 d2 06 51 07 d3 07 5a 08 e3 08     o...X...Q...Z...
     2bc:	71 09 02 0a 96 0a 2e 0b c9 0b 67 0c 08 0d ac 0d     q.........g.....
     2cc:	53 0e fc 0e a8 0f 57 10 08 11 bc 11 72 12 2a 13     S.....W.....r.*.
     2dc:	e4 13 9f 14 5d 15 1c 16 dd 16 9f 17 62 18 27 19     ....].......b.'.
     2ec:	ed 19 b3 1a 7b 1b 43 1c 0c 1d d5 1d 9e 1e 68 1f     ....{.C.......h.
     2fc:	32 20 fc 20 c5 21 8f 22 58 23 20 24 e8 24 af 25     2 . .!."X# $.$.%
     30c:	75 26 3a 27 ff 27 c1 28 83 29 43 2a 01 2b be 2b     u&:'.'.(.)C*.+.+
     31c:	79 2c 32 2d e8 2d 9d 2e 4f 2f 00 30 ad 30 58 31     y,2-.-..O/.0.0X1
     32c:	00 32 a6 32 48 33 e8 33 84 34 1e 35 b4 35 46 36     .2.2H3.3.4.5.5F6
     33c:	d5 36 61 37 e9 37 6d 38 ee 38 6a 39 e3 39 58 3a     .6a7.7m8.8j9.9X:
     34c:	c8 3a 34 3b 9d 3b 00 3c 60 3c bb 3c 12 3d 64 3d     .:4;.;.<`<.<.=d=
     35c:	b1 3d fa 3d 3e 3e 7e 3e b9 3e ef 3e 20 3f 4c 3f     .=.=>>~>.>.> ?L?
     36c:	74 3f 97 3f b4 3f cd 3f e1 3f f0 3f fa 3f ff 3f     t?.?.?.?.?.?.?.?

0000037c <__ctors_end>:
     37c:	11 24       	eor	r1, r1
     37e:	1f be       	out	0x3f, r1	; 63
     380:	cf ef       	ldi	r28, 0xFF	; 255
     382:	cd bf       	out	0x3d, r28	; 61
     384:	df e5       	ldi	r29, 0x5F	; 95
     386:	de bf       	out	0x3e, r29	; 62
     388:	00 e0       	ldi	r16, 0x00	; 0
     38a:	0c bf       	out	0x3c, r16	; 60

0000038c <__do_copy_data>:
     38c:	10 e2       	ldi	r17, 0x20	; 32
     38e:	a0 e0       	ldi	r26, 0x00	; 0
     390:	b0 e2       	ldi	r27, 0x20	; 32
     392:	ea e2       	ldi	r30, 0x2A	; 42
     394:	f4 e2       	ldi	r31, 0x24	; 36
     396:	00 e0       	ldi	r16, 0x00	; 0
     398:	0b bf       	out	0x3b, r16	; 59
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <__do_copy_data+0x14>
     39c:	07 90       	elpm	r0, Z+
     39e:	0d 92       	st	X+, r0
     3a0:	a0 32       	cpi	r26, 0x20	; 32
     3a2:	b1 07       	cpc	r27, r17
     3a4:	d9 f7       	brne	.-10     	; 0x39c <__do_copy_data+0x10>

000003a6 <__do_clear_bss>:
     3a6:	26 e2       	ldi	r18, 0x26	; 38
     3a8:	a0 e2       	ldi	r26, 0x20	; 32
     3aa:	b0 e2       	ldi	r27, 0x20	; 32
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <.do_clear_bss_start>

000003ae <.do_clear_bss_loop>:
     3ae:	1d 92       	st	X+, r1

000003b0 <.do_clear_bss_start>:
     3b0:	ac 37       	cpi	r26, 0x7C	; 124
     3b2:	b2 07       	cpc	r27, r18
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <.do_clear_bss_loop>
     3b6:	0e 94 49 10 	call	0x2092	; 0x2092 <main>
     3ba:	0c 94 13 12 	jmp	0x2426	; 0x2426 <_exit>

000003be <__bad_interrupt>:
     3be:	20 ce       	rjmp	.-960    	; 0x0 <__vectors>

000003c0 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     3c0:	81 15       	cp	r24, r1
     3c2:	22 e0       	ldi	r18, 0x02	; 2
     3c4:	92 07       	cpc	r25, r18
     3c6:	69 f4       	brne	.+26     	; 0x3e2 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     3c8:	80 91 21 20 	lds	r24, 0x2021
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	98 0f       	add	r25, r24
     3d0:	90 93 21 20 	sts	0x2021, r25
     3d4:	81 11       	cpse	r24, r1
     3d6:	14 c0       	rjmp	.+40     	; 0x400 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     3d8:	62 e0       	ldi	r22, 0x02	; 2
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0c 94 af 0c 	jmp	0x195e	; 0x195e <sysclk_enable_module>
     3e0:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     3e2:	80 34       	cpi	r24, 0x40	; 64
     3e4:	92 40       	sbci	r25, 0x02	; 2
     3e6:	61 f4       	brne	.+24     	; 0x400 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     3e8:	80 91 20 20 	lds	r24, 0x2020
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	98 0f       	add	r25, r24
     3f0:	90 93 20 20 	sts	0x2020, r25
     3f4:	81 11       	cpse	r24, r1
     3f6:	04 c0       	rjmp	.+8      	; 0x400 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     3f8:	62 e0       	ldi	r22, 0x02	; 2
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	0c 94 af 0c 	jmp	0x195e	; 0x195e <sysclk_enable_module>
     400:	08 95       	ret

00000402 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     402:	81 15       	cp	r24, r1
     404:	22 e0       	ldi	r18, 0x02	; 2
     406:	92 07       	cpc	r25, r18
     408:	61 f4       	brne	.+24     	; 0x422 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     40a:	80 91 21 20 	lds	r24, 0x2021
     40e:	81 50       	subi	r24, 0x01	; 1
     410:	80 93 21 20 	sts	0x2021, r24
     414:	81 11       	cpse	r24, r1
     416:	13 c0       	rjmp	.+38     	; 0x43e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     418:	62 e0       	ldi	r22, 0x02	; 2
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <sysclk_disable_module>
     420:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     422:	80 34       	cpi	r24, 0x40	; 64
     424:	92 40       	sbci	r25, 0x02	; 2
     426:	59 f4       	brne	.+22     	; 0x43e <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     428:	80 91 20 20 	lds	r24, 0x2020
     42c:	81 50       	subi	r24, 0x01	; 1
     42e:	80 93 20 20 	sts	0x2020, r24
     432:	81 11       	cpse	r24, r1
     434:	04 c0       	rjmp	.+8      	; 0x43e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     436:	62 e0       	ldi	r22, 0x02	; 2
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <sysclk_disable_module>
     43e:	08 95       	ret

00000440 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     448:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     44a:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     44c:	b9 df       	rcall	.-142    	; 0x3c0 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     44e:	88 81       	ld	r24, Y
     450:	81 60       	ori	r24, 0x01	; 1
     452:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     454:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     456:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     458:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     45a:	e7 e7       	ldi	r30, 0x77	; 119
     45c:	f6 e2       	ldi	r31, 0x26	; 38
     45e:	90 81       	ld	r25, Z
     460:	9f 5f       	subi	r25, 0xFF	; 255
     462:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     464:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	08 95       	ret

0000046e <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     46e:	1f 92       	push	r1
     470:	0f 92       	push	r0
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	0f 92       	push	r0
     476:	11 24       	eor	r1, r1
     478:	0b b6       	in	r0, 0x3b	; 59
     47a:	0f 92       	push	r0
     47c:	2f 93       	push	r18
     47e:	3f 93       	push	r19
     480:	4f 93       	push	r20
     482:	5f 93       	push	r21
     484:	6f 93       	push	r22
     486:	7f 93       	push	r23
     488:	8f 93       	push	r24
     48a:	9f 93       	push	r25
     48c:	af 93       	push	r26
     48e:	bf 93       	push	r27
     490:	ef 93       	push	r30
     492:	ff 93       	push	r31
     494:	e0 91 68 20 	lds	r30, 0x2068
     498:	f0 91 69 20 	lds	r31, 0x2069
     49c:	30 97       	sbiw	r30, 0x00	; 0
     49e:	09 f0       	breq	.+2      	; 0x4a2 <__vector_14+0x34>
     4a0:	19 95       	eicall
     4a2:	ff 91       	pop	r31
     4a4:	ef 91       	pop	r30
     4a6:	bf 91       	pop	r27
     4a8:	af 91       	pop	r26
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	7f 91       	pop	r23
     4b0:	6f 91       	pop	r22
     4b2:	5f 91       	pop	r21
     4b4:	4f 91       	pop	r20
     4b6:	3f 91       	pop	r19
     4b8:	2f 91       	pop	r18
     4ba:	0f 90       	pop	r0
     4bc:	0b be       	out	0x3b, r0	; 59
     4be:	0f 90       	pop	r0
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	0f 90       	pop	r0
     4c4:	1f 90       	pop	r1
     4c6:	18 95       	reti

000004c8 <__vector_15>:
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	0b b6       	in	r0, 0x3b	; 59
     4d4:	0f 92       	push	r0
     4d6:	2f 93       	push	r18
     4d8:	3f 93       	push	r19
     4da:	4f 93       	push	r20
     4dc:	5f 93       	push	r21
     4de:	6f 93       	push	r22
     4e0:	7f 93       	push	r23
     4e2:	8f 93       	push	r24
     4e4:	9f 93       	push	r25
     4e6:	af 93       	push	r26
     4e8:	bf 93       	push	r27
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
     4ee:	e0 91 66 20 	lds	r30, 0x2066
     4f2:	f0 91 67 20 	lds	r31, 0x2067
     4f6:	30 97       	sbiw	r30, 0x00	; 0
     4f8:	09 f0       	breq	.+2      	; 0x4fc <__vector_15+0x34>
     4fa:	19 95       	eicall
     4fc:	ff 91       	pop	r31
     4fe:	ef 91       	pop	r30
     500:	bf 91       	pop	r27
     502:	af 91       	pop	r26
     504:	9f 91       	pop	r25
     506:	8f 91       	pop	r24
     508:	7f 91       	pop	r23
     50a:	6f 91       	pop	r22
     50c:	5f 91       	pop	r21
     50e:	4f 91       	pop	r20
     510:	3f 91       	pop	r19
     512:	2f 91       	pop	r18
     514:	0f 90       	pop	r0
     516:	0b be       	out	0x3b, r0	; 59
     518:	0f 90       	pop	r0
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	0f 90       	pop	r0
     51e:	1f 90       	pop	r1
     520:	18 95       	reti

00000522 <__vector_16>:
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	0b b6       	in	r0, 0x3b	; 59
     52e:	0f 92       	push	r0
     530:	2f 93       	push	r18
     532:	3f 93       	push	r19
     534:	4f 93       	push	r20
     536:	5f 93       	push	r21
     538:	6f 93       	push	r22
     53a:	7f 93       	push	r23
     53c:	8f 93       	push	r24
     53e:	9f 93       	push	r25
     540:	af 93       	push	r26
     542:	bf 93       	push	r27
     544:	ef 93       	push	r30
     546:	ff 93       	push	r31
     548:	e0 91 64 20 	lds	r30, 0x2064
     54c:	f0 91 65 20 	lds	r31, 0x2065
     550:	30 97       	sbiw	r30, 0x00	; 0
     552:	09 f0       	breq	.+2      	; 0x556 <__vector_16+0x34>
     554:	19 95       	eicall
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0b be       	out	0x3b, r0	; 59
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <__vector_17>:
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	0b b6       	in	r0, 0x3b	; 59
     588:	0f 92       	push	r0
     58a:	2f 93       	push	r18
     58c:	3f 93       	push	r19
     58e:	4f 93       	push	r20
     590:	5f 93       	push	r21
     592:	6f 93       	push	r22
     594:	7f 93       	push	r23
     596:	8f 93       	push	r24
     598:	9f 93       	push	r25
     59a:	af 93       	push	r26
     59c:	bf 93       	push	r27
     59e:	ef 93       	push	r30
     5a0:	ff 93       	push	r31
     5a2:	e0 91 62 20 	lds	r30, 0x2062
     5a6:	f0 91 63 20 	lds	r31, 0x2063
     5aa:	30 97       	sbiw	r30, 0x00	; 0
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <__vector_17+0x34>
     5ae:	19 95       	eicall
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	0f 90       	pop	r0
     5d2:	1f 90       	pop	r1
     5d4:	18 95       	reti

000005d6 <__vector_18>:
     5d6:	1f 92       	push	r1
     5d8:	0f 92       	push	r0
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	0f 92       	push	r0
     5de:	11 24       	eor	r1, r1
     5e0:	0b b6       	in	r0, 0x3b	; 59
     5e2:	0f 92       	push	r0
     5e4:	2f 93       	push	r18
     5e6:	3f 93       	push	r19
     5e8:	4f 93       	push	r20
     5ea:	5f 93       	push	r21
     5ec:	6f 93       	push	r22
     5ee:	7f 93       	push	r23
     5f0:	8f 93       	push	r24
     5f2:	9f 93       	push	r25
     5f4:	af 93       	push	r26
     5f6:	bf 93       	push	r27
     5f8:	ef 93       	push	r30
     5fa:	ff 93       	push	r31
     5fc:	e0 91 60 20 	lds	r30, 0x2060
     600:	f0 91 61 20 	lds	r31, 0x2061
     604:	30 97       	sbiw	r30, 0x00	; 0
     606:	09 f0       	breq	.+2      	; 0x60a <__vector_18+0x34>
     608:	19 95       	eicall
     60a:	ff 91       	pop	r31
     60c:	ef 91       	pop	r30
     60e:	bf 91       	pop	r27
     610:	af 91       	pop	r26
     612:	9f 91       	pop	r25
     614:	8f 91       	pop	r24
     616:	7f 91       	pop	r23
     618:	6f 91       	pop	r22
     61a:	5f 91       	pop	r21
     61c:	4f 91       	pop	r20
     61e:	3f 91       	pop	r19
     620:	2f 91       	pop	r18
     622:	0f 90       	pop	r0
     624:	0b be       	out	0x3b, r0	; 59
     626:	0f 90       	pop	r0
     628:	0f be       	out	0x3f, r0	; 63
     62a:	0f 90       	pop	r0
     62c:	1f 90       	pop	r1
     62e:	18 95       	reti

00000630 <__vector_19>:
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	0f 92       	push	r0
     638:	11 24       	eor	r1, r1
     63a:	0b b6       	in	r0, 0x3b	; 59
     63c:	0f 92       	push	r0
     63e:	2f 93       	push	r18
     640:	3f 93       	push	r19
     642:	4f 93       	push	r20
     644:	5f 93       	push	r21
     646:	6f 93       	push	r22
     648:	7f 93       	push	r23
     64a:	8f 93       	push	r24
     64c:	9f 93       	push	r25
     64e:	af 93       	push	r26
     650:	bf 93       	push	r27
     652:	ef 93       	push	r30
     654:	ff 93       	push	r31
     656:	e0 91 5e 20 	lds	r30, 0x205E
     65a:	f0 91 5f 20 	lds	r31, 0x205F
     65e:	30 97       	sbiw	r30, 0x00	; 0
     660:	09 f0       	breq	.+2      	; 0x664 <__vector_19+0x34>
     662:	19 95       	eicall
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	0b be       	out	0x3b, r0	; 59
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <__vector_20>:
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	0b b6       	in	r0, 0x3b	; 59
     696:	0f 92       	push	r0
     698:	2f 93       	push	r18
     69a:	3f 93       	push	r19
     69c:	4f 93       	push	r20
     69e:	5f 93       	push	r21
     6a0:	6f 93       	push	r22
     6a2:	7f 93       	push	r23
     6a4:	8f 93       	push	r24
     6a6:	9f 93       	push	r25
     6a8:	af 93       	push	r26
     6aa:	bf 93       	push	r27
     6ac:	ef 93       	push	r30
     6ae:	ff 93       	push	r31
     6b0:	e0 91 5c 20 	lds	r30, 0x205C
     6b4:	f0 91 5d 20 	lds	r31, 0x205D
     6b8:	30 97       	sbiw	r30, 0x00	; 0
     6ba:	09 f0       	breq	.+2      	; 0x6be <__vector_20+0x34>
     6bc:	19 95       	eicall
     6be:	ff 91       	pop	r31
     6c0:	ef 91       	pop	r30
     6c2:	bf 91       	pop	r27
     6c4:	af 91       	pop	r26
     6c6:	9f 91       	pop	r25
     6c8:	8f 91       	pop	r24
     6ca:	7f 91       	pop	r23
     6cc:	6f 91       	pop	r22
     6ce:	5f 91       	pop	r21
     6d0:	4f 91       	pop	r20
     6d2:	3f 91       	pop	r19
     6d4:	2f 91       	pop	r18
     6d6:	0f 90       	pop	r0
     6d8:	0b be       	out	0x3b, r0	; 59
     6da:	0f 90       	pop	r0
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	0f 90       	pop	r0
     6e0:	1f 90       	pop	r1
     6e2:	18 95       	reti

000006e4 <__vector_21>:
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	0b b6       	in	r0, 0x3b	; 59
     6f0:	0f 92       	push	r0
     6f2:	2f 93       	push	r18
     6f4:	3f 93       	push	r19
     6f6:	4f 93       	push	r20
     6f8:	5f 93       	push	r21
     6fa:	6f 93       	push	r22
     6fc:	7f 93       	push	r23
     6fe:	8f 93       	push	r24
     700:	9f 93       	push	r25
     702:	af 93       	push	r26
     704:	bf 93       	push	r27
     706:	ef 93       	push	r30
     708:	ff 93       	push	r31
     70a:	e0 91 5a 20 	lds	r30, 0x205A
     70e:	f0 91 5b 20 	lds	r31, 0x205B
     712:	30 97       	sbiw	r30, 0x00	; 0
     714:	09 f0       	breq	.+2      	; 0x718 <__vector_21+0x34>
     716:	19 95       	eicall
     718:	ff 91       	pop	r31
     71a:	ef 91       	pop	r30
     71c:	bf 91       	pop	r27
     71e:	af 91       	pop	r26
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	7f 91       	pop	r23
     726:	6f 91       	pop	r22
     728:	5f 91       	pop	r21
     72a:	4f 91       	pop	r20
     72c:	3f 91       	pop	r19
     72e:	2f 91       	pop	r18
     730:	0f 90       	pop	r0
     732:	0b be       	out	0x3b, r0	; 59
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_22>:
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	0b b6       	in	r0, 0x3b	; 59
     74a:	0f 92       	push	r0
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	6f 93       	push	r22
     756:	7f 93       	push	r23
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
     764:	e0 91 58 20 	lds	r30, 0x2058
     768:	f0 91 59 20 	lds	r31, 0x2059
     76c:	30 97       	sbiw	r30, 0x00	; 0
     76e:	09 f0       	breq	.+2      	; 0x772 <__vector_22+0x34>
     770:	19 95       	eicall
     772:	ff 91       	pop	r31
     774:	ef 91       	pop	r30
     776:	bf 91       	pop	r27
     778:	af 91       	pop	r26
     77a:	9f 91       	pop	r25
     77c:	8f 91       	pop	r24
     77e:	7f 91       	pop	r23
     780:	6f 91       	pop	r22
     782:	5f 91       	pop	r21
     784:	4f 91       	pop	r20
     786:	3f 91       	pop	r19
     788:	2f 91       	pop	r18
     78a:	0f 90       	pop	r0
     78c:	0b be       	out	0x3b, r0	; 59
     78e:	0f 90       	pop	r0
     790:	0f be       	out	0x3f, r0	; 63
     792:	0f 90       	pop	r0
     794:	1f 90       	pop	r1
     796:	18 95       	reti

00000798 <__vector_23>:
     798:	1f 92       	push	r1
     79a:	0f 92       	push	r0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
     7a2:	0b b6       	in	r0, 0x3b	; 59
     7a4:	0f 92       	push	r0
     7a6:	2f 93       	push	r18
     7a8:	3f 93       	push	r19
     7aa:	4f 93       	push	r20
     7ac:	5f 93       	push	r21
     7ae:	6f 93       	push	r22
     7b0:	7f 93       	push	r23
     7b2:	8f 93       	push	r24
     7b4:	9f 93       	push	r25
     7b6:	af 93       	push	r26
     7b8:	bf 93       	push	r27
     7ba:	ef 93       	push	r30
     7bc:	ff 93       	push	r31
     7be:	e0 91 56 20 	lds	r30, 0x2056
     7c2:	f0 91 57 20 	lds	r31, 0x2057
     7c6:	30 97       	sbiw	r30, 0x00	; 0
     7c8:	09 f0       	breq	.+2      	; 0x7cc <__vector_23+0x34>
     7ca:	19 95       	eicall
     7cc:	ff 91       	pop	r31
     7ce:	ef 91       	pop	r30
     7d0:	bf 91       	pop	r27
     7d2:	af 91       	pop	r26
     7d4:	9f 91       	pop	r25
     7d6:	8f 91       	pop	r24
     7d8:	7f 91       	pop	r23
     7da:	6f 91       	pop	r22
     7dc:	5f 91       	pop	r21
     7de:	4f 91       	pop	r20
     7e0:	3f 91       	pop	r19
     7e2:	2f 91       	pop	r18
     7e4:	0f 90       	pop	r0
     7e6:	0b be       	out	0x3b, r0	; 59
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <__vector_77>:
     7f2:	1f 92       	push	r1
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	0f 92       	push	r0
     7fa:	11 24       	eor	r1, r1
     7fc:	0b b6       	in	r0, 0x3b	; 59
     7fe:	0f 92       	push	r0
     800:	2f 93       	push	r18
     802:	3f 93       	push	r19
     804:	4f 93       	push	r20
     806:	5f 93       	push	r21
     808:	6f 93       	push	r22
     80a:	7f 93       	push	r23
     80c:	8f 93       	push	r24
     80e:	9f 93       	push	r25
     810:	af 93       	push	r26
     812:	bf 93       	push	r27
     814:	ef 93       	push	r30
     816:	ff 93       	push	r31
     818:	e0 91 54 20 	lds	r30, 0x2054
     81c:	f0 91 55 20 	lds	r31, 0x2055
     820:	30 97       	sbiw	r30, 0x00	; 0
     822:	09 f0       	breq	.+2      	; 0x826 <__vector_77+0x34>
     824:	19 95       	eicall
     826:	ff 91       	pop	r31
     828:	ef 91       	pop	r30
     82a:	bf 91       	pop	r27
     82c:	af 91       	pop	r26
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	7f 91       	pop	r23
     834:	6f 91       	pop	r22
     836:	5f 91       	pop	r21
     838:	4f 91       	pop	r20
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	0f 90       	pop	r0
     840:	0b be       	out	0x3b, r0	; 59
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <__vector_78>:
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	0b b6       	in	r0, 0x3b	; 59
     858:	0f 92       	push	r0
     85a:	2f 93       	push	r18
     85c:	3f 93       	push	r19
     85e:	4f 93       	push	r20
     860:	5f 93       	push	r21
     862:	6f 93       	push	r22
     864:	7f 93       	push	r23
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	af 93       	push	r26
     86c:	bf 93       	push	r27
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
     872:	e0 91 52 20 	lds	r30, 0x2052
     876:	f0 91 53 20 	lds	r31, 0x2053
     87a:	30 97       	sbiw	r30, 0x00	; 0
     87c:	09 f0       	breq	.+2      	; 0x880 <__vector_78+0x34>
     87e:	19 95       	eicall
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	0f 90       	pop	r0
     89a:	0b be       	out	0x3b, r0	; 59
     89c:	0f 90       	pop	r0
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	0f 90       	pop	r0
     8a2:	1f 90       	pop	r1
     8a4:	18 95       	reti

000008a6 <__vector_79>:
     8a6:	1f 92       	push	r1
     8a8:	0f 92       	push	r0
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	0f 92       	push	r0
     8ae:	11 24       	eor	r1, r1
     8b0:	0b b6       	in	r0, 0x3b	; 59
     8b2:	0f 92       	push	r0
     8b4:	2f 93       	push	r18
     8b6:	3f 93       	push	r19
     8b8:	4f 93       	push	r20
     8ba:	5f 93       	push	r21
     8bc:	6f 93       	push	r22
     8be:	7f 93       	push	r23
     8c0:	8f 93       	push	r24
     8c2:	9f 93       	push	r25
     8c4:	af 93       	push	r26
     8c6:	bf 93       	push	r27
     8c8:	ef 93       	push	r30
     8ca:	ff 93       	push	r31
     8cc:	e0 91 50 20 	lds	r30, 0x2050
     8d0:	f0 91 51 20 	lds	r31, 0x2051
     8d4:	30 97       	sbiw	r30, 0x00	; 0
     8d6:	09 f0       	breq	.+2      	; 0x8da <__vector_79+0x34>
     8d8:	19 95       	eicall
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <__vector_80>:
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	0b b6       	in	r0, 0x3b	; 59
     90c:	0f 92       	push	r0
     90e:	2f 93       	push	r18
     910:	3f 93       	push	r19
     912:	4f 93       	push	r20
     914:	5f 93       	push	r21
     916:	6f 93       	push	r22
     918:	7f 93       	push	r23
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	af 93       	push	r26
     920:	bf 93       	push	r27
     922:	ef 93       	push	r30
     924:	ff 93       	push	r31
     926:	e0 91 4e 20 	lds	r30, 0x204E
     92a:	f0 91 4f 20 	lds	r31, 0x204F
     92e:	30 97       	sbiw	r30, 0x00	; 0
     930:	09 f0       	breq	.+2      	; 0x934 <__vector_80+0x34>
     932:	19 95       	eicall
     934:	ff 91       	pop	r31
     936:	ef 91       	pop	r30
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	7f 91       	pop	r23
     942:	6f 91       	pop	r22
     944:	5f 91       	pop	r21
     946:	4f 91       	pop	r20
     948:	3f 91       	pop	r19
     94a:	2f 91       	pop	r18
     94c:	0f 90       	pop	r0
     94e:	0b be       	out	0x3b, r0	; 59
     950:	0f 90       	pop	r0
     952:	0f be       	out	0x3f, r0	; 63
     954:	0f 90       	pop	r0
     956:	1f 90       	pop	r1
     958:	18 95       	reti

0000095a <__vector_81>:
     95a:	1f 92       	push	r1
     95c:	0f 92       	push	r0
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	0f 92       	push	r0
     962:	11 24       	eor	r1, r1
     964:	0b b6       	in	r0, 0x3b	; 59
     966:	0f 92       	push	r0
     968:	2f 93       	push	r18
     96a:	3f 93       	push	r19
     96c:	4f 93       	push	r20
     96e:	5f 93       	push	r21
     970:	6f 93       	push	r22
     972:	7f 93       	push	r23
     974:	8f 93       	push	r24
     976:	9f 93       	push	r25
     978:	af 93       	push	r26
     97a:	bf 93       	push	r27
     97c:	ef 93       	push	r30
     97e:	ff 93       	push	r31
     980:	e0 91 4c 20 	lds	r30, 0x204C
     984:	f0 91 4d 20 	lds	r31, 0x204D
     988:	30 97       	sbiw	r30, 0x00	; 0
     98a:	09 f0       	breq	.+2      	; 0x98e <__vector_81+0x34>
     98c:	19 95       	eicall
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0b be       	out	0x3b, r0	; 59
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0
     9b0:	1f 90       	pop	r1
     9b2:	18 95       	reti

000009b4 <__vector_82>:
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	11 24       	eor	r1, r1
     9be:	0b b6       	in	r0, 0x3b	; 59
     9c0:	0f 92       	push	r0
     9c2:	2f 93       	push	r18
     9c4:	3f 93       	push	r19
     9c6:	4f 93       	push	r20
     9c8:	5f 93       	push	r21
     9ca:	6f 93       	push	r22
     9cc:	7f 93       	push	r23
     9ce:	8f 93       	push	r24
     9d0:	9f 93       	push	r25
     9d2:	af 93       	push	r26
     9d4:	bf 93       	push	r27
     9d6:	ef 93       	push	r30
     9d8:	ff 93       	push	r31
     9da:	e0 91 4a 20 	lds	r30, 0x204A
     9de:	f0 91 4b 20 	lds	r31, 0x204B
     9e2:	30 97       	sbiw	r30, 0x00	; 0
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <__vector_82+0x34>
     9e6:	19 95       	eicall
     9e8:	ff 91       	pop	r31
     9ea:	ef 91       	pop	r30
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	7f 91       	pop	r23
     9f6:	6f 91       	pop	r22
     9f8:	5f 91       	pop	r21
     9fa:	4f 91       	pop	r20
     9fc:	3f 91       	pop	r19
     9fe:	2f 91       	pop	r18
     a00:	0f 90       	pop	r0
     a02:	0b be       	out	0x3b, r0	; 59
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <__vector_83>:
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	0b b6       	in	r0, 0x3b	; 59
     a1a:	0f 92       	push	r0
     a1c:	2f 93       	push	r18
     a1e:	3f 93       	push	r19
     a20:	4f 93       	push	r20
     a22:	5f 93       	push	r21
     a24:	6f 93       	push	r22
     a26:	7f 93       	push	r23
     a28:	8f 93       	push	r24
     a2a:	9f 93       	push	r25
     a2c:	af 93       	push	r26
     a2e:	bf 93       	push	r27
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
     a34:	e0 91 48 20 	lds	r30, 0x2048
     a38:	f0 91 49 20 	lds	r31, 0x2049
     a3c:	30 97       	sbiw	r30, 0x00	; 0
     a3e:	09 f0       	breq	.+2      	; 0xa42 <__vector_83+0x34>
     a40:	19 95       	eicall
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	bf 91       	pop	r27
     a48:	af 91       	pop	r26
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	7f 91       	pop	r23
     a50:	6f 91       	pop	r22
     a52:	5f 91       	pop	r21
     a54:	4f 91       	pop	r20
     a56:	3f 91       	pop	r19
     a58:	2f 91       	pop	r18
     a5a:	0f 90       	pop	r0
     a5c:	0b be       	out	0x3b, r0	; 59
     a5e:	0f 90       	pop	r0
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	0f 90       	pop	r0
     a64:	1f 90       	pop	r1
     a66:	18 95       	reti

00000a68 <__vector_84>:
     a68:	1f 92       	push	r1
     a6a:	0f 92       	push	r0
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	0f 92       	push	r0
     a70:	11 24       	eor	r1, r1
     a72:	0b b6       	in	r0, 0x3b	; 59
     a74:	0f 92       	push	r0
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31
     a8e:	e0 91 46 20 	lds	r30, 0x2046
     a92:	f0 91 47 20 	lds	r31, 0x2047
     a96:	30 97       	sbiw	r30, 0x00	; 0
     a98:	09 f0       	breq	.+2      	; 0xa9c <__vector_84+0x34>
     a9a:	19 95       	eicall
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0b be       	out	0x3b, r0	; 59
     ab8:	0f 90       	pop	r0
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	0f 90       	pop	r0
     abe:	1f 90       	pop	r1
     ac0:	18 95       	reti

00000ac2 <__vector_85>:
     ac2:	1f 92       	push	r1
     ac4:	0f 92       	push	r0
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	0f 92       	push	r0
     aca:	11 24       	eor	r1, r1
     acc:	0b b6       	in	r0, 0x3b	; 59
     ace:	0f 92       	push	r0
     ad0:	2f 93       	push	r18
     ad2:	3f 93       	push	r19
     ad4:	4f 93       	push	r20
     ad6:	5f 93       	push	r21
     ad8:	6f 93       	push	r22
     ada:	7f 93       	push	r23
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
     ae0:	af 93       	push	r26
     ae2:	bf 93       	push	r27
     ae4:	ef 93       	push	r30
     ae6:	ff 93       	push	r31
     ae8:	e0 91 44 20 	lds	r30, 0x2044
     aec:	f0 91 45 20 	lds	r31, 0x2045
     af0:	30 97       	sbiw	r30, 0x00	; 0
     af2:	09 f0       	breq	.+2      	; 0xaf6 <__vector_85+0x34>
     af4:	19 95       	eicall
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	0f 90       	pop	r0
     b10:	0b be       	out	0x3b, r0	; 59
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti

00000b1c <__vector_86>:
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	0b b6       	in	r0, 0x3b	; 59
     b28:	0f 92       	push	r0
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	4f 93       	push	r20
     b30:	5f 93       	push	r21
     b32:	6f 93       	push	r22
     b34:	7f 93       	push	r23
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
     b42:	e0 91 42 20 	lds	r30, 0x2042
     b46:	f0 91 43 20 	lds	r31, 0x2043
     b4a:	30 97       	sbiw	r30, 0x00	; 0
     b4c:	09 f0       	breq	.+2      	; 0xb50 <__vector_86+0x34>
     b4e:	19 95       	eicall
     b50:	ff 91       	pop	r31
     b52:	ef 91       	pop	r30
     b54:	bf 91       	pop	r27
     b56:	af 91       	pop	r26
     b58:	9f 91       	pop	r25
     b5a:	8f 91       	pop	r24
     b5c:	7f 91       	pop	r23
     b5e:	6f 91       	pop	r22
     b60:	5f 91       	pop	r21
     b62:	4f 91       	pop	r20
     b64:	3f 91       	pop	r19
     b66:	2f 91       	pop	r18
     b68:	0f 90       	pop	r0
     b6a:	0b be       	out	0x3b, r0	; 59
     b6c:	0f 90       	pop	r0
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	0f 90       	pop	r0
     b72:	1f 90       	pop	r1
     b74:	18 95       	reti

00000b76 <__vector_47>:
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	0f 92       	push	r0
     b7e:	11 24       	eor	r1, r1
     b80:	0b b6       	in	r0, 0x3b	; 59
     b82:	0f 92       	push	r0
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
     b9c:	e0 91 40 20 	lds	r30, 0x2040
     ba0:	f0 91 41 20 	lds	r31, 0x2041
     ba4:	30 97       	sbiw	r30, 0x00	; 0
     ba6:	09 f0       	breq	.+2      	; 0xbaa <__vector_47+0x34>
     ba8:	19 95       	eicall
     baa:	ff 91       	pop	r31
     bac:	ef 91       	pop	r30
     bae:	bf 91       	pop	r27
     bb0:	af 91       	pop	r26
     bb2:	9f 91       	pop	r25
     bb4:	8f 91       	pop	r24
     bb6:	7f 91       	pop	r23
     bb8:	6f 91       	pop	r22
     bba:	5f 91       	pop	r21
     bbc:	4f 91       	pop	r20
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	0f 90       	pop	r0
     bc4:	0b be       	out	0x3b, r0	; 59
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_48>:
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	0b b6       	in	r0, 0x3b	; 59
     bdc:	0f 92       	push	r0
     bde:	2f 93       	push	r18
     be0:	3f 93       	push	r19
     be2:	4f 93       	push	r20
     be4:	5f 93       	push	r21
     be6:	6f 93       	push	r22
     be8:	7f 93       	push	r23
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	af 93       	push	r26
     bf0:	bf 93       	push	r27
     bf2:	ef 93       	push	r30
     bf4:	ff 93       	push	r31
     bf6:	e0 91 3e 20 	lds	r30, 0x203E
     bfa:	f0 91 3f 20 	lds	r31, 0x203F
     bfe:	30 97       	sbiw	r30, 0x00	; 0
     c00:	09 f0       	breq	.+2      	; 0xc04 <__vector_48+0x34>
     c02:	19 95       	eicall
     c04:	ff 91       	pop	r31
     c06:	ef 91       	pop	r30
     c08:	bf 91       	pop	r27
     c0a:	af 91       	pop	r26
     c0c:	9f 91       	pop	r25
     c0e:	8f 91       	pop	r24
     c10:	7f 91       	pop	r23
     c12:	6f 91       	pop	r22
     c14:	5f 91       	pop	r21
     c16:	4f 91       	pop	r20
     c18:	3f 91       	pop	r19
     c1a:	2f 91       	pop	r18
     c1c:	0f 90       	pop	r0
     c1e:	0b be       	out	0x3b, r0	; 59
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti

00000c2a <__vector_49>:
     c2a:	1f 92       	push	r1
     c2c:	0f 92       	push	r0
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	0f 92       	push	r0
     c32:	11 24       	eor	r1, r1
     c34:	0b b6       	in	r0, 0x3b	; 59
     c36:	0f 92       	push	r0
     c38:	2f 93       	push	r18
     c3a:	3f 93       	push	r19
     c3c:	4f 93       	push	r20
     c3e:	5f 93       	push	r21
     c40:	6f 93       	push	r22
     c42:	7f 93       	push	r23
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
     c50:	e0 91 3c 20 	lds	r30, 0x203C
     c54:	f0 91 3d 20 	lds	r31, 0x203D
     c58:	30 97       	sbiw	r30, 0x00	; 0
     c5a:	09 f0       	breq	.+2      	; 0xc5e <__vector_49+0x34>
     c5c:	19 95       	eicall
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	bf 91       	pop	r27
     c64:	af 91       	pop	r26
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	7f 91       	pop	r23
     c6c:	6f 91       	pop	r22
     c6e:	5f 91       	pop	r21
     c70:	4f 91       	pop	r20
     c72:	3f 91       	pop	r19
     c74:	2f 91       	pop	r18
     c76:	0f 90       	pop	r0
     c78:	0b be       	out	0x3b, r0	; 59
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <__vector_50>:
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	0b b6       	in	r0, 0x3b	; 59
     c90:	0f 92       	push	r0
     c92:	2f 93       	push	r18
     c94:	3f 93       	push	r19
     c96:	4f 93       	push	r20
     c98:	5f 93       	push	r21
     c9a:	6f 93       	push	r22
     c9c:	7f 93       	push	r23
     c9e:	8f 93       	push	r24
     ca0:	9f 93       	push	r25
     ca2:	af 93       	push	r26
     ca4:	bf 93       	push	r27
     ca6:	ef 93       	push	r30
     ca8:	ff 93       	push	r31
     caa:	e0 91 3a 20 	lds	r30, 0x203A
     cae:	f0 91 3b 20 	lds	r31, 0x203B
     cb2:	30 97       	sbiw	r30, 0x00	; 0
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <__vector_50+0x34>
     cb6:	19 95       	eicall
     cb8:	ff 91       	pop	r31
     cba:	ef 91       	pop	r30
     cbc:	bf 91       	pop	r27
     cbe:	af 91       	pop	r26
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	7f 91       	pop	r23
     cc6:	6f 91       	pop	r22
     cc8:	5f 91       	pop	r21
     cca:	4f 91       	pop	r20
     ccc:	3f 91       	pop	r19
     cce:	2f 91       	pop	r18
     cd0:	0f 90       	pop	r0
     cd2:	0b be       	out	0x3b, r0	; 59
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <__vector_51>:
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	0b b6       	in	r0, 0x3b	; 59
     cea:	0f 92       	push	r0
     cec:	2f 93       	push	r18
     cee:	3f 93       	push	r19
     cf0:	4f 93       	push	r20
     cf2:	5f 93       	push	r21
     cf4:	6f 93       	push	r22
     cf6:	7f 93       	push	r23
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	af 93       	push	r26
     cfe:	bf 93       	push	r27
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
     d04:	e0 91 38 20 	lds	r30, 0x2038
     d08:	f0 91 39 20 	lds	r31, 0x2039
     d0c:	30 97       	sbiw	r30, 0x00	; 0
     d0e:	09 f0       	breq	.+2      	; 0xd12 <__vector_51+0x34>
     d10:	19 95       	eicall
     d12:	ff 91       	pop	r31
     d14:	ef 91       	pop	r30
     d16:	bf 91       	pop	r27
     d18:	af 91       	pop	r26
     d1a:	9f 91       	pop	r25
     d1c:	8f 91       	pop	r24
     d1e:	7f 91       	pop	r23
     d20:	6f 91       	pop	r22
     d22:	5f 91       	pop	r21
     d24:	4f 91       	pop	r20
     d26:	3f 91       	pop	r19
     d28:	2f 91       	pop	r18
     d2a:	0f 90       	pop	r0
     d2c:	0b be       	out	0x3b, r0	; 59
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	0f 90       	pop	r0
     d34:	1f 90       	pop	r1
     d36:	18 95       	reti

00000d38 <__vector_52>:
     d38:	1f 92       	push	r1
     d3a:	0f 92       	push	r0
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	0f 92       	push	r0
     d40:	11 24       	eor	r1, r1
     d42:	0b b6       	in	r0, 0x3b	; 59
     d44:	0f 92       	push	r0
     d46:	2f 93       	push	r18
     d48:	3f 93       	push	r19
     d4a:	4f 93       	push	r20
     d4c:	5f 93       	push	r21
     d4e:	6f 93       	push	r22
     d50:	7f 93       	push	r23
     d52:	8f 93       	push	r24
     d54:	9f 93       	push	r25
     d56:	af 93       	push	r26
     d58:	bf 93       	push	r27
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31
     d5e:	e0 91 36 20 	lds	r30, 0x2036
     d62:	f0 91 37 20 	lds	r31, 0x2037
     d66:	30 97       	sbiw	r30, 0x00	; 0
     d68:	09 f0       	breq	.+2      	; 0xd6c <__vector_52+0x34>
     d6a:	19 95       	eicall
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0b be       	out	0x3b, r0	; 59
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <__vector_53>:
     d92:	1f 92       	push	r1
     d94:	0f 92       	push	r0
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	0f 92       	push	r0
     d9a:	11 24       	eor	r1, r1
     d9c:	0b b6       	in	r0, 0x3b	; 59
     d9e:	0f 92       	push	r0
     da0:	2f 93       	push	r18
     da2:	3f 93       	push	r19
     da4:	4f 93       	push	r20
     da6:	5f 93       	push	r21
     da8:	6f 93       	push	r22
     daa:	7f 93       	push	r23
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	af 93       	push	r26
     db2:	bf 93       	push	r27
     db4:	ef 93       	push	r30
     db6:	ff 93       	push	r31
     db8:	e0 91 34 20 	lds	r30, 0x2034
     dbc:	f0 91 35 20 	lds	r31, 0x2035
     dc0:	30 97       	sbiw	r30, 0x00	; 0
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <__vector_53+0x34>
     dc4:	19 95       	eicall
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0b be       	out	0x3b, r0	; 59
     de2:	0f 90       	pop	r0
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	0f 90       	pop	r0
     de8:	1f 90       	pop	r1
     dea:	18 95       	reti

00000dec <__vector_54>:
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	0b b6       	in	r0, 0x3b	; 59
     df8:	0f 92       	push	r0
     dfa:	2f 93       	push	r18
     dfc:	3f 93       	push	r19
     dfe:	4f 93       	push	r20
     e00:	5f 93       	push	r21
     e02:	6f 93       	push	r22
     e04:	7f 93       	push	r23
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
     e0c:	bf 93       	push	r27
     e0e:	ef 93       	push	r30
     e10:	ff 93       	push	r31
     e12:	e0 91 32 20 	lds	r30, 0x2032
     e16:	f0 91 33 20 	lds	r31, 0x2033
     e1a:	30 97       	sbiw	r30, 0x00	; 0
     e1c:	09 f0       	breq	.+2      	; 0xe20 <__vector_54+0x34>
     e1e:	19 95       	eicall
     e20:	ff 91       	pop	r31
     e22:	ef 91       	pop	r30
     e24:	bf 91       	pop	r27
     e26:	af 91       	pop	r26
     e28:	9f 91       	pop	r25
     e2a:	8f 91       	pop	r24
     e2c:	7f 91       	pop	r23
     e2e:	6f 91       	pop	r22
     e30:	5f 91       	pop	r21
     e32:	4f 91       	pop	r20
     e34:	3f 91       	pop	r19
     e36:	2f 91       	pop	r18
     e38:	0f 90       	pop	r0
     e3a:	0b be       	out	0x3b, r0	; 59
     e3c:	0f 90       	pop	r0
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	0f 90       	pop	r0
     e42:	1f 90       	pop	r1
     e44:	18 95       	reti

00000e46 <__vector_55>:
     e46:	1f 92       	push	r1
     e48:	0f 92       	push	r0
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	0f 92       	push	r0
     e4e:	11 24       	eor	r1, r1
     e50:	0b b6       	in	r0, 0x3b	; 59
     e52:	0f 92       	push	r0
     e54:	2f 93       	push	r18
     e56:	3f 93       	push	r19
     e58:	4f 93       	push	r20
     e5a:	5f 93       	push	r21
     e5c:	6f 93       	push	r22
     e5e:	7f 93       	push	r23
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	af 93       	push	r26
     e66:	bf 93       	push	r27
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
     e6c:	e0 91 30 20 	lds	r30, 0x2030
     e70:	f0 91 31 20 	lds	r31, 0x2031
     e74:	30 97       	sbiw	r30, 0x00	; 0
     e76:	09 f0       	breq	.+2      	; 0xe7a <__vector_55+0x34>
     e78:	19 95       	eicall
     e7a:	ff 91       	pop	r31
     e7c:	ef 91       	pop	r30
     e7e:	bf 91       	pop	r27
     e80:	af 91       	pop	r26
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	7f 91       	pop	r23
     e88:	6f 91       	pop	r22
     e8a:	5f 91       	pop	r21
     e8c:	4f 91       	pop	r20
     e8e:	3f 91       	pop	r19
     e90:	2f 91       	pop	r18
     e92:	0f 90       	pop	r0
     e94:	0b be       	out	0x3b, r0	; 59
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <__vector_56>:
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	0b b6       	in	r0, 0x3b	; 59
     eac:	0f 92       	push	r0
     eae:	2f 93       	push	r18
     eb0:	3f 93       	push	r19
     eb2:	4f 93       	push	r20
     eb4:	5f 93       	push	r21
     eb6:	6f 93       	push	r22
     eb8:	7f 93       	push	r23
     eba:	8f 93       	push	r24
     ebc:	9f 93       	push	r25
     ebe:	af 93       	push	r26
     ec0:	bf 93       	push	r27
     ec2:	ef 93       	push	r30
     ec4:	ff 93       	push	r31
     ec6:	e0 91 2e 20 	lds	r30, 0x202E
     eca:	f0 91 2f 20 	lds	r31, 0x202F
     ece:	30 97       	sbiw	r30, 0x00	; 0
     ed0:	09 f0       	breq	.+2      	; 0xed4 <__vector_56+0x34>
     ed2:	19 95       	eicall
     ed4:	ff 91       	pop	r31
     ed6:	ef 91       	pop	r30
     ed8:	bf 91       	pop	r27
     eda:	af 91       	pop	r26
     edc:	9f 91       	pop	r25
     ede:	8f 91       	pop	r24
     ee0:	7f 91       	pop	r23
     ee2:	6f 91       	pop	r22
     ee4:	5f 91       	pop	r21
     ee6:	4f 91       	pop	r20
     ee8:	3f 91       	pop	r19
     eea:	2f 91       	pop	r18
     eec:	0f 90       	pop	r0
     eee:	0b be       	out	0x3b, r0	; 59
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_108>:
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	0b b6       	in	r0, 0x3b	; 59
     f06:	0f 92       	push	r0
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	e0 91 2c 20 	lds	r30, 0x202C
     f24:	f0 91 2d 20 	lds	r31, 0x202D
     f28:	30 97       	sbiw	r30, 0x00	; 0
     f2a:	09 f0       	breq	.+2      	; 0xf2e <__vector_108+0x34>
     f2c:	19 95       	eicall
     f2e:	ff 91       	pop	r31
     f30:	ef 91       	pop	r30
     f32:	bf 91       	pop	r27
     f34:	af 91       	pop	r26
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	7f 91       	pop	r23
     f3c:	6f 91       	pop	r22
     f3e:	5f 91       	pop	r21
     f40:	4f 91       	pop	r20
     f42:	3f 91       	pop	r19
     f44:	2f 91       	pop	r18
     f46:	0f 90       	pop	r0
     f48:	0b be       	out	0x3b, r0	; 59
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <__vector_109>:
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	11 24       	eor	r1, r1
     f5e:	0b b6       	in	r0, 0x3b	; 59
     f60:	0f 92       	push	r0
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	4f 93       	push	r20
     f68:	5f 93       	push	r21
     f6a:	6f 93       	push	r22
     f6c:	7f 93       	push	r23
     f6e:	8f 93       	push	r24
     f70:	9f 93       	push	r25
     f72:	af 93       	push	r26
     f74:	bf 93       	push	r27
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
     f7a:	e0 91 2a 20 	lds	r30, 0x202A
     f7e:	f0 91 2b 20 	lds	r31, 0x202B
     f82:	30 97       	sbiw	r30, 0x00	; 0
     f84:	09 f0       	breq	.+2      	; 0xf88 <__vector_109+0x34>
     f86:	19 95       	eicall
     f88:	ff 91       	pop	r31
     f8a:	ef 91       	pop	r30
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	7f 91       	pop	r23
     f96:	6f 91       	pop	r22
     f98:	5f 91       	pop	r21
     f9a:	4f 91       	pop	r20
     f9c:	3f 91       	pop	r19
     f9e:	2f 91       	pop	r18
     fa0:	0f 90       	pop	r0
     fa2:	0b be       	out	0x3b, r0	; 59
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <__vector_110>:
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	11 24       	eor	r1, r1
     fb8:	0b b6       	in	r0, 0x3b	; 59
     fba:	0f 92       	push	r0
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
     fd4:	e0 91 28 20 	lds	r30, 0x2028
     fd8:	f0 91 29 20 	lds	r31, 0x2029
     fdc:	30 97       	sbiw	r30, 0x00	; 0
     fde:	09 f0       	breq	.+2      	; 0xfe2 <__vector_110+0x34>
     fe0:	19 95       	eicall
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0b be       	out	0x3b, r0	; 59
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <__vector_111>:
    1008:	1f 92       	push	r1
    100a:	0f 92       	push	r0
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	0f 92       	push	r0
    1010:	11 24       	eor	r1, r1
    1012:	0b b6       	in	r0, 0x3b	; 59
    1014:	0f 92       	push	r0
    1016:	2f 93       	push	r18
    1018:	3f 93       	push	r19
    101a:	4f 93       	push	r20
    101c:	5f 93       	push	r21
    101e:	6f 93       	push	r22
    1020:	7f 93       	push	r23
    1022:	8f 93       	push	r24
    1024:	9f 93       	push	r25
    1026:	af 93       	push	r26
    1028:	bf 93       	push	r27
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
    102e:	e0 91 26 20 	lds	r30, 0x2026
    1032:	f0 91 27 20 	lds	r31, 0x2027
    1036:	30 97       	sbiw	r30, 0x00	; 0
    1038:	09 f0       	breq	.+2      	; 0x103c <__vector_111+0x34>
    103a:	19 95       	eicall
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	bf 91       	pop	r27
    1042:	af 91       	pop	r26
    1044:	9f 91       	pop	r25
    1046:	8f 91       	pop	r24
    1048:	7f 91       	pop	r23
    104a:	6f 91       	pop	r22
    104c:	5f 91       	pop	r21
    104e:	4f 91       	pop	r20
    1050:	3f 91       	pop	r19
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	0b be       	out	0x3b, r0	; 59
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <__vector_112>:
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	0b b6       	in	r0, 0x3b	; 59
    106e:	0f 92       	push	r0
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
    1088:	e0 91 24 20 	lds	r30, 0x2024
    108c:	f0 91 25 20 	lds	r31, 0x2025
    1090:	30 97       	sbiw	r30, 0x00	; 0
    1092:	09 f0       	breq	.+2      	; 0x1096 <__vector_112+0x34>
    1094:	19 95       	eicall
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	bf 91       	pop	r27
    109c:	af 91       	pop	r26
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	7f 91       	pop	r23
    10a4:	6f 91       	pop	r22
    10a6:	5f 91       	pop	r21
    10a8:	4f 91       	pop	r20
    10aa:	3f 91       	pop	r19
    10ac:	2f 91       	pop	r18
    10ae:	0f 90       	pop	r0
    10b0:	0b be       	out	0x3b, r0	; 59
    10b2:	0f 90       	pop	r0
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	0f 90       	pop	r0
    10b8:	1f 90       	pop	r1
    10ba:	18 95       	reti

000010bc <__vector_113>:
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	0b b6       	in	r0, 0x3b	; 59
    10c8:	0f 92       	push	r0
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
    10e2:	e0 91 22 20 	lds	r30, 0x2022
    10e6:	f0 91 23 20 	lds	r31, 0x2023
    10ea:	30 97       	sbiw	r30, 0x00	; 0
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <__vector_113+0x34>
    10ee:	19 95       	eicall
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	0b be       	out	0x3b, r0	; 59
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <tc_enable>:
    1116:	cf 93       	push	r28
    1118:	cf b7       	in	r28, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	28 2f       	mov	r18, r24
    111e:	39 2f       	mov	r19, r25
    1120:	21 15       	cp	r18, r1
    1122:	88 e0       	ldi	r24, 0x08	; 8
    1124:	38 07       	cpc	r19, r24
    1126:	39 f4       	brne	.+14     	; 0x1136 <tc_enable+0x20>
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	18 d4       	rcall	.+2096   	; 0x195e <sysclk_enable_module>
    112e:	64 e0       	ldi	r22, 0x04	; 4
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	15 d4       	rcall	.+2090   	; 0x195e <sysclk_enable_module>
    1134:	43 c0       	rjmp	.+134    	; 0x11bc <tc_enable+0xa6>
    1136:	20 34       	cpi	r18, 0x40	; 64
    1138:	88 e0       	ldi	r24, 0x08	; 8
    113a:	38 07       	cpc	r19, r24
    113c:	39 f4       	brne	.+14     	; 0x114c <tc_enable+0x36>
    113e:	62 e0       	ldi	r22, 0x02	; 2
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	0d d4       	rcall	.+2074   	; 0x195e <sysclk_enable_module>
    1144:	64 e0       	ldi	r22, 0x04	; 4
    1146:	83 e0       	ldi	r24, 0x03	; 3
    1148:	0a d4       	rcall	.+2068   	; 0x195e <sysclk_enable_module>
    114a:	38 c0       	rjmp	.+112    	; 0x11bc <tc_enable+0xa6>
    114c:	21 15       	cp	r18, r1
    114e:	89 e0       	ldi	r24, 0x09	; 9
    1150:	38 07       	cpc	r19, r24
    1152:	39 f4       	brne	.+14     	; 0x1162 <tc_enable+0x4c>
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	84 e0       	ldi	r24, 0x04	; 4
    1158:	02 d4       	rcall	.+2052   	; 0x195e <sysclk_enable_module>
    115a:	64 e0       	ldi	r22, 0x04	; 4
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	ff d3       	rcall	.+2046   	; 0x195e <sysclk_enable_module>
    1160:	2d c0       	rjmp	.+90     	; 0x11bc <tc_enable+0xa6>
    1162:	20 34       	cpi	r18, 0x40	; 64
    1164:	89 e0       	ldi	r24, 0x09	; 9
    1166:	38 07       	cpc	r19, r24
    1168:	39 f4       	brne	.+14     	; 0x1178 <tc_enable+0x62>
    116a:	62 e0       	ldi	r22, 0x02	; 2
    116c:	84 e0       	ldi	r24, 0x04	; 4
    116e:	f7 d3       	rcall	.+2030   	; 0x195e <sysclk_enable_module>
    1170:	64 e0       	ldi	r22, 0x04	; 4
    1172:	84 e0       	ldi	r24, 0x04	; 4
    1174:	f4 d3       	rcall	.+2024   	; 0x195e <sysclk_enable_module>
    1176:	22 c0       	rjmp	.+68     	; 0x11bc <tc_enable+0xa6>
    1178:	21 15       	cp	r18, r1
    117a:	8a e0       	ldi	r24, 0x0A	; 10
    117c:	38 07       	cpc	r19, r24
    117e:	39 f4       	brne	.+14     	; 0x118e <tc_enable+0x78>
    1180:	61 e0       	ldi	r22, 0x01	; 1
    1182:	85 e0       	ldi	r24, 0x05	; 5
    1184:	ec d3       	rcall	.+2008   	; 0x195e <sysclk_enable_module>
    1186:	64 e0       	ldi	r22, 0x04	; 4
    1188:	85 e0       	ldi	r24, 0x05	; 5
    118a:	e9 d3       	rcall	.+2002   	; 0x195e <sysclk_enable_module>
    118c:	17 c0       	rjmp	.+46     	; 0x11bc <tc_enable+0xa6>
    118e:	20 34       	cpi	r18, 0x40	; 64
    1190:	8a e0       	ldi	r24, 0x0A	; 10
    1192:	38 07       	cpc	r19, r24
    1194:	39 f4       	brne	.+14     	; 0x11a4 <tc_enable+0x8e>
    1196:	62 e0       	ldi	r22, 0x02	; 2
    1198:	85 e0       	ldi	r24, 0x05	; 5
    119a:	e1 d3       	rcall	.+1986   	; 0x195e <sysclk_enable_module>
    119c:	64 e0       	ldi	r22, 0x04	; 4
    119e:	85 e0       	ldi	r24, 0x05	; 5
    11a0:	de d3       	rcall	.+1980   	; 0x195e <sysclk_enable_module>
    11a2:	0c c0       	rjmp	.+24     	; 0x11bc <tc_enable+0xa6>
    11a4:	21 15       	cp	r18, r1
    11a6:	3b 40       	sbci	r19, 0x0B	; 11
    11a8:	39 f4       	brne	.+14     	; 0x11b8 <tc_enable+0xa2>
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	86 e0       	ldi	r24, 0x06	; 6
    11ae:	d7 d3       	rcall	.+1966   	; 0x195e <sysclk_enable_module>
    11b0:	64 e0       	ldi	r22, 0x04	; 4
    11b2:	86 e0       	ldi	r24, 0x06	; 6
    11b4:	d4 d3       	rcall	.+1960   	; 0x195e <sysclk_enable_module>
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <tc_enable+0xa6>
    11b8:	cf bf       	out	0x3f, r28	; 63
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <tc_enable+0xb8>
    11bc:	8f b7       	in	r24, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	e7 e7       	ldi	r30, 0x77	; 119
    11c2:	f6 e2       	ldi	r31, 0x26	; 38
    11c4:	90 81       	ld	r25, Z
    11c6:	9f 5f       	subi	r25, 0xFF	; 255
    11c8:	90 83       	st	Z, r25
    11ca:	8f bf       	out	0x3f, r24	; 63
    11cc:	cf bf       	out	0x3f, r28	; 63
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    11d2:	81 15       	cp	r24, r1
    11d4:	28 e0       	ldi	r18, 0x08	; 8
    11d6:	92 07       	cpc	r25, r18
    11d8:	29 f4       	brne	.+10     	; 0x11e4 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    11da:	60 93 68 20 	sts	0x2068, r22
    11de:	70 93 69 20 	sts	0x2069, r23
    11e2:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    11e4:	80 34       	cpi	r24, 0x40	; 64
    11e6:	28 e0       	ldi	r18, 0x08	; 8
    11e8:	92 07       	cpc	r25, r18
    11ea:	29 f4       	brne	.+10     	; 0x11f6 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    11ec:	60 93 5c 20 	sts	0x205C, r22
    11f0:	70 93 5d 20 	sts	0x205D, r23
    11f4:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    11f6:	81 15       	cp	r24, r1
    11f8:	29 e0       	ldi	r18, 0x09	; 9
    11fa:	92 07       	cpc	r25, r18
    11fc:	29 f4       	brne	.+10     	; 0x1208 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    11fe:	60 93 54 20 	sts	0x2054, r22
    1202:	70 93 55 20 	sts	0x2055, r23
    1206:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1208:	80 34       	cpi	r24, 0x40	; 64
    120a:	29 e0       	ldi	r18, 0x09	; 9
    120c:	92 07       	cpc	r25, r18
    120e:	29 f4       	brne	.+10     	; 0x121a <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    1210:	60 93 48 20 	sts	0x2048, r22
    1214:	70 93 49 20 	sts	0x2049, r23
    1218:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    121a:	81 15       	cp	r24, r1
    121c:	2a e0       	ldi	r18, 0x0A	; 10
    121e:	92 07       	cpc	r25, r18
    1220:	29 f4       	brne	.+10     	; 0x122c <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    1222:	60 93 40 20 	sts	0x2040, r22
    1226:	70 93 41 20 	sts	0x2041, r23
    122a:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    122c:	80 34       	cpi	r24, 0x40	; 64
    122e:	2a e0       	ldi	r18, 0x0A	; 10
    1230:	92 07       	cpc	r25, r18
    1232:	29 f4       	brne	.+10     	; 0x123e <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    1234:	60 93 34 20 	sts	0x2034, r22
    1238:	70 93 35 20 	sts	0x2035, r23
    123c:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    123e:	81 15       	cp	r24, r1
    1240:	9b 40       	sbci	r25, 0x0B	; 11
    1242:	21 f4       	brne	.+8      	; 0x124c <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    1244:	60 93 2c 20 	sts	0x202C, r22
    1248:	70 93 2d 20 	sts	0x202D, r23
    124c:	08 95       	ret

0000124e <complexToDecibelWithGain>:

// This function is identical to the previous function
// but uses a table with built in gain for a higher 
// output signal
void complexToDecibelWithGain(int16_t *fx)
{
    124e:	2f 92       	push	r2
    1250:	3f 92       	push	r3
    1252:	4f 92       	push	r4
    1254:	5f 92       	push	r5
    1256:	6f 92       	push	r6
    1258:	7f 92       	push	r7
    125a:	8f 92       	push	r8
    125c:	9f 92       	push	r9
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	8c 01       	movw	r16, r24
    1274:	0e 5f       	subi	r16, 0xFE	; 254
    1276:	1d 4f       	sbci	r17, 0xFD	; 253
    1278:	ec 01       	movw	r28, r24
	// Process for each complex number in fx[FHT_LEN/2]
	int16_t k, i;
	int32_t calc;

	for (k = 0; k < FHT_LEN / 2; k++)
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	50 e0       	ldi	r21, 0x00	; 0
		// us the approximate dB level
		for (i = 0; i < N_DB; i++)
		{
			#ifdef AVR_GCC
			// Read table from program memory
			if (calc <= pgm_read_word(&dbMapPlusGain[i])) break;
    127e:	0f 2e       	mov	r0, r31
    1280:	fc ef       	ldi	r31, 0xFC	; 252
    1282:	cf 2e       	mov	r12, r31
    1284:	f1 e0       	ldi	r31, 0x01	; 1
    1286:	df 2e       	mov	r13, r31
    1288:	f0 2d       	mov	r31, r0
    128a:	0f 2e       	mov	r0, r31
    128c:	fe ef       	ldi	r31, 0xFE	; 254
    128e:	2f 2e       	mov	r2, r31
    1290:	f1 e0       	ldi	r31, 0x01	; 1
    1292:	3f 2e       	mov	r3, r31
    1294:	f0 2d       	mov	r31, r0
    1296:	7e 01       	movw	r14, r28
	int32_t calc;

	for (k = 0; k < FHT_LEN / 2; k++)
	{
		// calc = (fx(k)^2) + (fx(-k)^2)
		calc = ((int32_t)fx[k] * (int32_t)fx[k] +
    1298:	a8 81       	ld	r26, Y
    129a:	b9 81       	ldd	r27, Y+1	; 0x01
		(int32_t)fx[FHT_LEN - k] * (int32_t)fx[FHT_LEN - k]);
    129c:	f8 01       	movw	r30, r16
    129e:	b2 90       	ld	r11, -Z
    12a0:	a2 90       	ld	r10, -Z
    12a2:	8f 01       	movw	r16, r30
	int32_t calc;

	for (k = 0; k < FHT_LEN / 2; k++)
	{
		// calc = (fx(k)^2) + (fx(-k)^2)
		calc = ((int32_t)fx[k] * (int32_t)fx[k] +
    12a4:	9d 01       	movw	r18, r26
    12a6:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__mulhisi3>
    12aa:	2b 01       	movw	r4, r22
    12ac:	3c 01       	movw	r6, r24
		(int32_t)fx[FHT_LEN - k] * (int32_t)fx[FHT_LEN - k]);
    12ae:	95 01       	movw	r18, r10
    12b0:	d5 01       	movw	r26, r10
    12b2:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__mulhisi3>
	int32_t calc;

	for (k = 0; k < FHT_LEN / 2; k++)
	{
		// calc = (fx(k)^2) + (fx(-k)^2)
		calc = ((int32_t)fx[k] * (int32_t)fx[k] +
    12b6:	46 0e       	add	r4, r22
    12b8:	57 1e       	adc	r5, r23
    12ba:	68 1e       	adc	r6, r24
    12bc:	79 1e       	adc	r7, r25
		// = 536805378
		//
		// 536805378 / 16834 = 16384 = 1 << 14
		//
		// Therefore we scale like this:
		calc = calc >> 14;
    12be:	53 01       	movw	r10, r6
    12c0:	42 01       	movw	r8, r4
    12c2:	07 2e       	mov	r0, r23
    12c4:	7e e0       	ldi	r23, 0x0E	; 14
    12c6:	b5 94       	asr	r11
    12c8:	a7 94       	ror	r10
    12ca:	97 94       	ror	r9
    12cc:	87 94       	ror	r8
    12ce:	7a 95       	dec	r23
    12d0:	d1 f7       	brne	.-12     	; 0x12c6 <complexToDecibelWithGain+0x78>
    12d2:	70 2d       	mov	r23, r0
		// us the approximate dB level
		for (i = 0; i < N_DB; i++)
		{
			#ifdef AVR_GCC
			// Read table from program memory
			if (calc <= pgm_read_word(&dbMapPlusGain[i])) break;
    12d4:	f6 01       	movw	r30, r12
    12d6:	85 91       	lpm	r24, Z+
    12d8:	94 91       	lpm	r25, Z
    12da:	a0 e0       	ldi	r26, 0x00	; 0
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	88 15       	cp	r24, r8
    12e0:	99 05       	cpc	r25, r9
    12e2:	aa 05       	cpc	r26, r10
    12e4:	bb 05       	cpc	r27, r11
    12e6:	c4 f4       	brge	.+48     	; 0x1318 <complexToDecibelWithGain+0xca>
    12e8:	91 01       	movw	r18, r2
		calc = calc >> 14;

		// Now we seek the position in the decibel table which contains
		// a lower value than calc.  The position in the table gives
		// us the approximate dB level
		for (i = 0; i < N_DB; i++)
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
		{
			#ifdef AVR_GCC
			// Read table from program memory
			if (calc <= pgm_read_word(&dbMapPlusGain[i])) break;
    12ee:	f9 01       	movw	r30, r18
    12f0:	45 90       	lpm	r4, Z+
    12f2:	54 90       	lpm	r5, Z
    12f4:	61 2c       	mov	r6, r1
    12f6:	71 2c       	mov	r7, r1
    12f8:	48 14       	cp	r4, r8
    12fa:	59 04       	cpc	r5, r9
    12fc:	6a 04       	cpc	r6, r10
    12fe:	7b 04       	cpc	r7, r11
    1300:	3c f4       	brge	.+14     	; 0x1310 <complexToDecibelWithGain+0xc2>
		calc = calc >> 14;

		// Now we seek the position in the decibel table which contains
		// a lower value than calc.  The position in the table gives
		// us the approximate dB level
		for (i = 0; i < N_DB; i++)
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	2e 5f       	subi	r18, 0xFE	; 254
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	80 34       	cpi	r24, 0x40	; 64
    130a:	91 05       	cpc	r25, r1
    130c:	81 f7       	brne	.-32     	; 0x12ee <complexToDecibelWithGain+0xa0>
    130e:	07 c0       	rjmp	.+14     	; 0x131e <complexToDecibelWithGain+0xd0>
			#endif
		}

		// Check for overflow in the case that we didn't break
		// from the for loop
		if (i == N_DB) i = N_DB - 1;
    1310:	80 34       	cpi	r24, 0x40	; 64
    1312:	91 05       	cpc	r25, r1
    1314:	49 f4       	brne	.+18     	; 0x1328 <complexToDecibelWithGain+0xda>
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <complexToDecibelWithGain+0xd6>
		calc = calc >> 14;

		// Now we seek the position in the decibel table which contains
		// a lower value than calc.  The position in the table gives
		// us the approximate dB level
		for (i = 0; i < N_DB; i++)
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <complexToDecibelWithGain+0xda>
			#endif
		}

		// Check for overflow in the case that we didn't break
		// from the for loop
		if (i == N_DB) i = N_DB - 1;
    131e:	8f e3       	ldi	r24, 0x3F	; 63
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <complexToDecibelWithGain+0xda>
    1324:	8f e3       	ldi	r24, 0x3F	; 63
    1326:	90 e0       	ldi	r25, 0x00	; 0

		// Now we write the decibel value back into fx[k]
		fx[k] = i;
    1328:	f7 01       	movw	r30, r14
    132a:	80 83       	st	Z, r24
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	22 96       	adiw	r28, 0x02	; 2
{
	// Process for each complex number in fx[FHT_LEN/2]
	int16_t k, i;
	int32_t calc;

	for (k = 0; k < FHT_LEN / 2; k++)
    1330:	4f 5f       	subi	r20, 0xFF	; 255
    1332:	5f 4f       	sbci	r21, 0xFF	; 255
    1334:	40 38       	cpi	r20, 0x80	; 128
    1336:	51 05       	cpc	r21, r1
    1338:	09 f0       	breq	.+2      	; 0x133c <complexToDecibelWithGain+0xee>
    133a:	ad cf       	rjmp	.-166    	; 0x1296 <complexToDecibelWithGain+0x48>

	#ifdef PRINTF_DEBUG
	printf("Output from complexToDecibelWithGain():\r\n");
	outputfx(fx, FHT_LEN/2);
	#endif
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	9f 90       	pop	r9
    1352:	8f 90       	pop	r8
    1354:	7f 90       	pop	r7
    1356:	6f 90       	pop	r6
    1358:	5f 90       	pop	r5
    135a:	4f 90       	pop	r4
    135c:	3f 90       	pop	r3
    135e:	2f 90       	pop	r2
    1360:	08 95       	ret

00001362 <applyHannWindow>:
#endif
}

// Apply a Hann window to the input sample data
void applyHannWindow(int16_t *fx)
{
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	8c 01       	movw	r16, r24
    1374:	7c 01       	movw	r14, r24
    1376:	0f 2e       	mov	r0, r31
    1378:	fc e7       	ldi	r31, 0x7C	; 124
    137a:	cf 2e       	mov	r12, r31
    137c:	f3 e0       	ldi	r31, 0x03	; 3
    137e:	df 2e       	mov	r13, r31
    1380:	f0 2d       	mov	r31, r0
    1382:	cc e7       	ldi	r28, 0x7C	; 124
    1384:	d2 e0       	ldi	r29, 0x02	; 2
	// First half of the window
	for (k = 0; k < FHT_LEN/2; k++)
	{
#ifdef AVR_GCC
		// Read table from program memory
		calc = ((int32_t)fx[i] * (int32_t)pgm_read_word(&hannTable[k])) >> 14;
    1386:	fe 01       	movw	r30, r28
    1388:	25 91       	lpm	r18, Z+
    138a:	34 91       	lpm	r19, Z
    138c:	f7 01       	movw	r30, r14
    138e:	a0 81       	ld	r26, Z
    1390:	b1 81       	ldd	r27, Z+1	; 0x01
    1392:	0e 94 03 12 	call	0x2406	; 0x2406 <__usmulhisi3>
    1396:	ab 01       	movw	r20, r22
    1398:	bc 01       	movw	r22, r24
    139a:	03 2e       	mov	r0, r19
    139c:	3e e0       	ldi	r19, 0x0E	; 14
    139e:	75 95       	asr	r23
    13a0:	67 95       	ror	r22
    13a2:	57 95       	ror	r21
    13a4:	47 95       	ror	r20
    13a6:	3a 95       	dec	r19
    13a8:	d1 f7       	brne	.-12     	; 0x139e <applyHannWindow+0x3c>
    13aa:	30 2d       	mov	r19, r0
		fx[i] = (int16_t)calc;
    13ac:	41 93       	st	Z+, r20
    13ae:	51 93       	st	Z+, r21
    13b0:	7f 01       	movw	r14, r30
    13b2:	22 96       	adiw	r28, 0x02	; 2
{
	int16_t k, i = 0;
	int32_t calc;

	// First half of the window
	for (k = 0; k < FHT_LEN/2; k++)
    13b4:	cc 15       	cp	r28, r12
    13b6:	dd 05       	cpc	r29, r13
    13b8:	31 f7       	brne	.-52     	; 0x1386 <applyHannWindow+0x24>
    13ba:	ca e7       	ldi	r28, 0x7A	; 122
    13bc:	d3 e0       	ldi	r29, 0x03	; 3
    13be:	13 95       	inc	r17
    13c0:	0f 2e       	mov	r0, r31
    13c2:	fa e7       	ldi	r31, 0x7A	; 122
    13c4:	ef 2e       	mov	r14, r31
    13c6:	f2 e0       	ldi	r31, 0x02	; 2
    13c8:	ff 2e       	mov	r15, r31
    13ca:	f0 2d       	mov	r31, r0
	// Second half of the window
	for (k = (FHT_LEN/2)-1; k >= 0; k--)
	{
#ifdef AVR_GCC
		// Read table from program memory
		calc = ((int32_t)fx[i] * (int32_t)pgm_read_word(&hannTable[k])) >> 14;
    13cc:	fe 01       	movw	r30, r28
    13ce:	25 91       	lpm	r18, Z+
    13d0:	34 91       	lpm	r19, Z
    13d2:	f8 01       	movw	r30, r16
    13d4:	a0 81       	ld	r26, Z
    13d6:	b1 81       	ldd	r27, Z+1	; 0x01
    13d8:	0e 94 03 12 	call	0x2406	; 0x2406 <__usmulhisi3>
    13dc:	ab 01       	movw	r20, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	03 2e       	mov	r0, r19
    13e2:	3e e0       	ldi	r19, 0x0E	; 14
    13e4:	75 95       	asr	r23
    13e6:	67 95       	ror	r22
    13e8:	57 95       	ror	r21
    13ea:	47 95       	ror	r20
    13ec:	3a 95       	dec	r19
    13ee:	d1 f7       	brne	.-12     	; 0x13e4 <applyHannWindow+0x82>
    13f0:	30 2d       	mov	r19, r0
		fx[i] = (int16_t)calc;
    13f2:	41 93       	st	Z+, r20
    13f4:	51 93       	st	Z+, r21
    13f6:	8f 01       	movw	r16, r30
    13f8:	22 97       	sbiw	r28, 0x02	; 2
#endif
		i++;
	}

	// Second half of the window
	for (k = (FHT_LEN/2)-1; k >= 0; k--)
    13fa:	ce 15       	cp	r28, r14
    13fc:	df 05       	cpc	r29, r15
    13fe:	31 f7       	brne	.-52     	; 0x13cc <applyHannWindow+0x6a>

#ifdef PRINTF_DEBUG
	printf("Output from applyHannWindow():\r\n");
	outputfx(fx, FHT_LEN);
#endif
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	08 95       	ret

00001412 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    1412:	1f 92       	push	r1
    1414:	0f 92       	push	r0
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	0b b6       	in	r0, 0x3b	; 59
    141e:	0f 92       	push	r0
    1420:	2f 93       	push	r18
    1422:	3f 93       	push	r19
    1424:	4f 93       	push	r20
    1426:	5f 93       	push	r21
    1428:	6f 93       	push	r22
    142a:	7f 93       	push	r23
    142c:	8f 93       	push	r24
    142e:	9f 93       	push	r25
    1430:	af 93       	push	r26
    1432:	bf 93       	push	r27
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    1438:	e0 e0       	ldi	r30, 0x00	; 0
    143a:	f2 e0       	ldi	r31, 0x02	; 2
    143c:	44 a1       	ldd	r20, Z+36	; 0x24
    143e:	55 a1       	ldd	r21, Z+37	; 0x25
    1440:	e0 91 74 26 	lds	r30, 0x2674
    1444:	f0 91 75 26 	lds	r31, 0x2675
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	92 e0       	ldi	r25, 0x02	; 2
    144e:	19 95       	eicall
}
    1450:	ff 91       	pop	r31
    1452:	ef 91       	pop	r30
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	7f 91       	pop	r23
    145e:	6f 91       	pop	r22
    1460:	5f 91       	pop	r21
    1462:	4f 91       	pop	r20
    1464:	3f 91       	pop	r19
    1466:	2f 91       	pop	r18
    1468:	0f 90       	pop	r0
    146a:	0b be       	out	0x3b, r0	; 59
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	0f 90       	pop	r0
    1472:	1f 90       	pop	r1
    1474:	18 95       	reti

00001476 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1476:	1f 92       	push	r1
    1478:	0f 92       	push	r0
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	0f 92       	push	r0
    147e:	11 24       	eor	r1, r1
    1480:	0b b6       	in	r0, 0x3b	; 59
    1482:	0f 92       	push	r0
    1484:	2f 93       	push	r18
    1486:	3f 93       	push	r19
    1488:	4f 93       	push	r20
    148a:	5f 93       	push	r21
    148c:	6f 93       	push	r22
    148e:	7f 93       	push	r23
    1490:	8f 93       	push	r24
    1492:	9f 93       	push	r25
    1494:	af 93       	push	r26
    1496:	bf 93       	push	r27
    1498:	ef 93       	push	r30
    149a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    149c:	e8 e2       	ldi	r30, 0x28	; 40
    149e:	f2 e0       	ldi	r31, 0x02	; 2
    14a0:	44 81       	ldd	r20, Z+4	; 0x04
    14a2:	55 81       	ldd	r21, Z+5	; 0x05
    14a4:	e0 91 74 26 	lds	r30, 0x2674
    14a8:	f0 91 75 26 	lds	r31, 0x2675
    14ac:	62 e0       	ldi	r22, 0x02	; 2
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	92 e0       	ldi	r25, 0x02	; 2
    14b2:	19 95       	eicall
}
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0b be       	out	0x3b, r0	; 59
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	0f 90       	pop	r0
    14d6:	1f 90       	pop	r1
    14d8:	18 95       	reti

000014da <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    14da:	1f 92       	push	r1
    14dc:	0f 92       	push	r0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	0f 92       	push	r0
    14e2:	11 24       	eor	r1, r1
    14e4:	0b b6       	in	r0, 0x3b	; 59
    14e6:	0f 92       	push	r0
    14e8:	2f 93       	push	r18
    14ea:	3f 93       	push	r19
    14ec:	4f 93       	push	r20
    14ee:	5f 93       	push	r21
    14f0:	6f 93       	push	r22
    14f2:	7f 93       	push	r23
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
    14f8:	af 93       	push	r26
    14fa:	bf 93       	push	r27
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1500:	e0 e3       	ldi	r30, 0x30	; 48
    1502:	f2 e0       	ldi	r31, 0x02	; 2
    1504:	44 81       	ldd	r20, Z+4	; 0x04
    1506:	55 81       	ldd	r21, Z+5	; 0x05
    1508:	e0 91 74 26 	lds	r30, 0x2674
    150c:	f0 91 75 26 	lds	r31, 0x2675
    1510:	64 e0       	ldi	r22, 0x04	; 4
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	92 e0       	ldi	r25, 0x02	; 2
    1516:	19 95       	eicall
}
    1518:	ff 91       	pop	r31
    151a:	ef 91       	pop	r30
    151c:	bf 91       	pop	r27
    151e:	af 91       	pop	r26
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	7f 91       	pop	r23
    1526:	6f 91       	pop	r22
    1528:	5f 91       	pop	r21
    152a:	4f 91       	pop	r20
    152c:	3f 91       	pop	r19
    152e:	2f 91       	pop	r18
    1530:	0f 90       	pop	r0
    1532:	0b be       	out	0x3b, r0	; 59
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	0b b6       	in	r0, 0x3b	; 59
    154a:	0f 92       	push	r0
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	4f 93       	push	r20
    1552:	5f 93       	push	r21
    1554:	6f 93       	push	r22
    1556:	7f 93       	push	r23
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1564:	e8 e3       	ldi	r30, 0x38	; 56
    1566:	f2 e0       	ldi	r31, 0x02	; 2
    1568:	44 81       	ldd	r20, Z+4	; 0x04
    156a:	55 81       	ldd	r21, Z+5	; 0x05
    156c:	e0 91 74 26 	lds	r30, 0x2674
    1570:	f0 91 75 26 	lds	r31, 0x2675
    1574:	68 e0       	ldi	r22, 0x08	; 8
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	19 95       	eicall
}
    157c:	ff 91       	pop	r31
    157e:	ef 91       	pop	r30
    1580:	bf 91       	pop	r27
    1582:	af 91       	pop	r26
    1584:	9f 91       	pop	r25
    1586:	8f 91       	pop	r24
    1588:	7f 91       	pop	r23
    158a:	6f 91       	pop	r22
    158c:	5f 91       	pop	r21
    158e:	4f 91       	pop	r20
    1590:	3f 91       	pop	r19
    1592:	2f 91       	pop	r18
    1594:	0f 90       	pop	r0
    1596:	0b be       	out	0x3b, r0	; 59
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	0b b6       	in	r0, 0x3b	; 59
    15ae:	0f 92       	push	r0
    15b0:	2f 93       	push	r18
    15b2:	3f 93       	push	r19
    15b4:	4f 93       	push	r20
    15b6:	5f 93       	push	r21
    15b8:	6f 93       	push	r22
    15ba:	7f 93       	push	r23
    15bc:	8f 93       	push	r24
    15be:	9f 93       	push	r25
    15c0:	af 93       	push	r26
    15c2:	bf 93       	push	r27
    15c4:	ef 93       	push	r30
    15c6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    15c8:	e0 e4       	ldi	r30, 0x40	; 64
    15ca:	f2 e0       	ldi	r31, 0x02	; 2
    15cc:	44 a1       	ldd	r20, Z+36	; 0x24
    15ce:	55 a1       	ldd	r21, Z+37	; 0x25
    15d0:	e0 91 72 26 	lds	r30, 0x2672
    15d4:	f0 91 73 26 	lds	r31, 0x2673
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	80 e4       	ldi	r24, 0x40	; 64
    15dc:	92 e0       	ldi	r25, 0x02	; 2
    15de:	19 95       	eicall
}
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
    15e4:	bf 91       	pop	r27
    15e6:	af 91       	pop	r26
    15e8:	9f 91       	pop	r25
    15ea:	8f 91       	pop	r24
    15ec:	7f 91       	pop	r23
    15ee:	6f 91       	pop	r22
    15f0:	5f 91       	pop	r21
    15f2:	4f 91       	pop	r20
    15f4:	3f 91       	pop	r19
    15f6:	2f 91       	pop	r18
    15f8:	0f 90       	pop	r0
    15fa:	0b be       	out	0x3b, r0	; 59
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	11 24       	eor	r1, r1
    1610:	0b b6       	in	r0, 0x3b	; 59
    1612:	0f 92       	push	r0
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    162c:	e8 e6       	ldi	r30, 0x68	; 104
    162e:	f2 e0       	ldi	r31, 0x02	; 2
    1630:	44 81       	ldd	r20, Z+4	; 0x04
    1632:	55 81       	ldd	r21, Z+5	; 0x05
    1634:	e0 91 72 26 	lds	r30, 0x2672
    1638:	f0 91 73 26 	lds	r31, 0x2673
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	80 e4       	ldi	r24, 0x40	; 64
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	19 95       	eicall
}
    1644:	ff 91       	pop	r31
    1646:	ef 91       	pop	r30
    1648:	bf 91       	pop	r27
    164a:	af 91       	pop	r26
    164c:	9f 91       	pop	r25
    164e:	8f 91       	pop	r24
    1650:	7f 91       	pop	r23
    1652:	6f 91       	pop	r22
    1654:	5f 91       	pop	r21
    1656:	4f 91       	pop	r20
    1658:	3f 91       	pop	r19
    165a:	2f 91       	pop	r18
    165c:	0f 90       	pop	r0
    165e:	0b be       	out	0x3b, r0	; 59
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	0f 90       	pop	r0
    1666:	1f 90       	pop	r1
    1668:	18 95       	reti

0000166a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    166a:	1f 92       	push	r1
    166c:	0f 92       	push	r0
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	0f 92       	push	r0
    1672:	11 24       	eor	r1, r1
    1674:	0b b6       	in	r0, 0x3b	; 59
    1676:	0f 92       	push	r0
    1678:	2f 93       	push	r18
    167a:	3f 93       	push	r19
    167c:	4f 93       	push	r20
    167e:	5f 93       	push	r21
    1680:	6f 93       	push	r22
    1682:	7f 93       	push	r23
    1684:	8f 93       	push	r24
    1686:	9f 93       	push	r25
    1688:	af 93       	push	r26
    168a:	bf 93       	push	r27
    168c:	ef 93       	push	r30
    168e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1690:	e0 e7       	ldi	r30, 0x70	; 112
    1692:	f2 e0       	ldi	r31, 0x02	; 2
    1694:	44 81       	ldd	r20, Z+4	; 0x04
    1696:	55 81       	ldd	r21, Z+5	; 0x05
    1698:	e0 91 72 26 	lds	r30, 0x2672
    169c:	f0 91 73 26 	lds	r31, 0x2673
    16a0:	64 e0       	ldi	r22, 0x04	; 4
    16a2:	80 e4       	ldi	r24, 0x40	; 64
    16a4:	92 e0       	ldi	r25, 0x02	; 2
    16a6:	19 95       	eicall
}
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	0f 90       	pop	r0
    16c2:	0b be       	out	0x3b, r0	; 59
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0
    16ca:	1f 90       	pop	r1
    16cc:	18 95       	reti

000016ce <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    16ce:	1f 92       	push	r1
    16d0:	0f 92       	push	r0
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	0b b6       	in	r0, 0x3b	; 59
    16da:	0f 92       	push	r0
    16dc:	2f 93       	push	r18
    16de:	3f 93       	push	r19
    16e0:	4f 93       	push	r20
    16e2:	5f 93       	push	r21
    16e4:	6f 93       	push	r22
    16e6:	7f 93       	push	r23
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	ef 93       	push	r30
    16f2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    16f4:	e8 e7       	ldi	r30, 0x78	; 120
    16f6:	f2 e0       	ldi	r31, 0x02	; 2
    16f8:	44 81       	ldd	r20, Z+4	; 0x04
    16fa:	55 81       	ldd	r21, Z+5	; 0x05
    16fc:	e0 91 72 26 	lds	r30, 0x2672
    1700:	f0 91 73 26 	lds	r31, 0x2673
    1704:	68 e0       	ldi	r22, 0x08	; 8
    1706:	80 e4       	ldi	r24, 0x40	; 64
    1708:	92 e0       	ldi	r25, 0x02	; 2
    170a:	19 95       	eicall
}
    170c:	ff 91       	pop	r31
    170e:	ef 91       	pop	r30
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	0f 90       	pop	r0
    1726:	0b be       	out	0x3b, r0	; 59
    1728:	0f 90       	pop	r0
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	0f 90       	pop	r0
    172e:	1f 90       	pop	r1
    1730:	18 95       	reti

00001732 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
    1742:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1744:	c1 15       	cp	r28, r1
    1746:	22 e0       	ldi	r18, 0x02	; 2
    1748:	d2 07       	cpc	r29, r18
    174a:	71 f4       	brne	.+28     	; 0x1768 <adc_write_configuration+0x36>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    174c:	61 e2       	ldi	r22, 0x21	; 33
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	1c d1       	rcall	.+568    	; 0x198c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1754:	e8 2e       	mov	r14, r24
    1756:	f1 2c       	mov	r15, r1
    1758:	60 e2       	ldi	r22, 0x20	; 32
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	16 d1       	rcall	.+556    	; 0x198c <nvm_read_byte>
		data <<= 8;
    1760:	fe 2c       	mov	r15, r14
    1762:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    1764:	e8 2a       	or	r14, r24
    1766:	10 c0       	rjmp	.+32     	; 0x1788 <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1768:	80 34       	cpi	r24, 0x40	; 64
    176a:	92 40       	sbci	r25, 0x02	; 2
    176c:	69 f5       	brne	.+90     	; 0x17c8 <adc_write_configuration+0x96>
    176e:	65 e2       	ldi	r22, 0x25	; 37
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	0b d1       	rcall	.+534    	; 0x198c <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1776:	e8 2e       	mov	r14, r24
    1778:	f1 2c       	mov	r15, r1
    177a:	64 e2       	ldi	r22, 0x24	; 36
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	05 d1       	rcall	.+522    	; 0x198c <nvm_read_byte>
		data <<= 8;
    1782:	fe 2c       	mov	r15, r14
    1784:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1786:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1788:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    178a:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    178c:	ce 01       	movw	r24, r28
    178e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1792:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	88 83       	st	Y, r24
	adc->CAL = cal;
    1798:	ec 86       	std	Y+12, r14	; 0x0c
    179a:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    179c:	f8 01       	movw	r30, r16
    179e:	85 81       	ldd	r24, Z+5	; 0x05
    17a0:	96 81       	ldd	r25, Z+6	; 0x06
    17a2:	88 8f       	std	Y+24, r24	; 0x18
    17a4:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    17aa:	84 81       	ldd	r24, Z+4	; 0x04
    17ac:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    17ae:	83 81       	ldd	r24, Z+3	; 0x03
    17b0:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    17b2:	81 81       	ldd	r24, Z+1	; 0x01
    17b4:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    17b6:	82 2f       	mov	r24, r18
    17b8:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    17ba:	90 81       	ld	r25, Z
    17bc:	89 2b       	or	r24, r25
    17be:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    17c0:	ce 01       	movw	r24, r28
    17c2:	0e 94 01 02 	call	0x402	; 0x402 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17c6:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	df 90       	pop	r13
    17d6:	08 95       	ret

000017d8 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    17e6:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    17e8:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    17ea:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    17ee:	88 81       	ld	r24, Y
    17f0:	80 7c       	andi	r24, 0xC0	; 192
    17f2:	f8 01       	movw	r30, r16
    17f4:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    17f6:	88 8d       	ldd	r24, Y+24	; 0x18
    17f8:	99 8d       	ldd	r25, Y+25	; 0x19
    17fa:	85 83       	std	Z+5, r24	; 0x05
    17fc:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    180e:	ce 01       	movw	r24, r28
    1810:	0e 94 01 02 	call	0x402	; 0x402 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1814:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	08 95       	ret

00001822 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1822:	cf 92       	push	r12
    1824:	df 92       	push	r13
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	7c 01       	movw	r14, r24
    1834:	d6 2e       	mov	r13, r22
    1836:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1838:	86 2f       	mov	r24, r22
    183a:	83 70       	andi	r24, 0x03	; 3
    183c:	29 f4       	brne	.+10     	; 0x1848 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    183e:	96 2f       	mov	r25, r22
    1840:	96 95       	lsr	r25
    1842:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1844:	82 e0       	ldi	r24, 0x02	; 2
    1846:	02 c0       	rjmp	.+4      	; 0x184c <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1848:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    184a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    184c:	90 ff       	sbrs	r25, 0
		index++;
    184e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1850:	e7 01       	movw	r28, r14
    1852:	a0 96       	adiw	r28, 0x20	; 32
    1854:	98 e0       	ldi	r25, 0x08	; 8
    1856:	89 9f       	mul	r24, r25
    1858:	c0 0d       	add	r28, r0
    185a:	d1 1d       	adc	r29, r1
    185c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    185e:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1860:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1862:	c7 01       	movw	r24, r14
    1864:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1868:	f8 01       	movw	r30, r16
    186a:	80 81       	ld	r24, Z
    186c:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1872:	81 81       	ldd	r24, Z+1	; 0x01
    1874:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1876:	d0 fe       	sbrs	r13, 0
    1878:	02 c0       	rjmp	.+4      	; 0x187e <adcch_write_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    187a:	83 81       	ldd	r24, Z+3	; 0x03
    187c:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    187e:	c7 01       	movw	r24, r14
    1880:	0e 94 01 02 	call	0x402	; 0x402 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1884:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	df 90       	pop	r13
    1894:	cf 90       	pop	r12
    1896:	08 95       	ret

00001898 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1898:	cf 92       	push	r12
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	7c 01       	movw	r14, r24
    18aa:	d6 2e       	mov	r13, r22
    18ac:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    18ae:	86 2f       	mov	r24, r22
    18b0:	83 70       	andi	r24, 0x03	; 3
    18b2:	29 f4       	brne	.+10     	; 0x18be <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    18b4:	96 2f       	mov	r25, r22
    18b6:	96 95       	lsr	r25
    18b8:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    18be:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    18c0:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    18c2:	90 ff       	sbrs	r25, 0
		index++;
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    18c6:	87 01       	movw	r16, r14
    18c8:	00 5e       	subi	r16, 0xE0	; 224
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	98 e0       	ldi	r25, 0x08	; 8
    18ce:	89 9f       	mul	r24, r25
    18d0:	00 0d       	add	r16, r0
    18d2:	11 1d       	adc	r17, r1
    18d4:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    18d6:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    18d8:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    18da:	c7 01       	movw	r24, r14
    18dc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    18e0:	f8 01       	movw	r30, r16
    18e2:	80 81       	ld	r24, Z
    18e4:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    18ea:	81 81       	ldd	r24, Z+1	; 0x01
    18ec:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    18ee:	d0 fe       	sbrs	r13, 0
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <adcch_read_configuration+0x5e>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    18f2:	86 81       	ldd	r24, Z+6	; 0x06
    18f4:	8b 83       	std	Y+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    18f6:	c7 01       	movw	r24, r14
    18f8:	0e 94 01 02 	call	0x402	; 0x402 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18fc:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	ff 90       	pop	r15
    1908:	ef 90       	pop	r14
    190a:	df 90       	pop	r13
    190c:	cf 90       	pop	r12
    190e:	08 95       	ret

00001910 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1910:	8f ef       	ldi	r24, 0xFF	; 255
    1912:	80 93 70 00 	sts	0x0070, r24
    1916:	80 93 71 00 	sts	0x0071, r24
    191a:	80 93 72 00 	sts	0x0072, r24
    191e:	80 93 73 00 	sts	0x0073, r24
    1922:	80 93 74 00 	sts	0x0074, r24
    1926:	80 93 75 00 	sts	0x0075, r24
    192a:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    192e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1930:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1932:	e0 e5       	ldi	r30, 0x50	; 80
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	90 81       	ld	r25, Z
    1938:	92 60       	ori	r25, 0x02	; 2
    193a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    193c:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    193e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1940:	81 ff       	sbrs	r24, 1
    1942:	fd cf       	rjmp	.-6      	; 0x193e <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1944:	61 e0       	ldi	r22, 0x01	; 1
    1946:	80 e4       	ldi	r24, 0x40	; 64
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	2a d0       	rcall	.+84     	; 0x19a0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    194c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    194e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1950:	e0 e5       	ldi	r30, 0x50	; 80
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	90 81       	ld	r25, Z
    1956:	9e 7f       	andi	r25, 0xFE	; 254
    1958:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    195a:	8f bf       	out	0x3f, r24	; 63
    195c:	08 95       	ret

0000195e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    195e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1960:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1962:	e8 2f       	mov	r30, r24
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	e0 59       	subi	r30, 0x90	; 144
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	60 95       	com	r22
    196c:	80 81       	ld	r24, Z
    196e:	68 23       	and	r22, r24
    1970:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1972:	9f bf       	out	0x3f, r25	; 63
    1974:	08 95       	ret

00001976 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1976:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1978:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    197a:	e8 2f       	mov	r30, r24
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	e0 59       	subi	r30, 0x90	; 144
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	80 81       	ld	r24, Z
    1984:	68 2b       	or	r22, r24
    1986:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1988:	9f bf       	out	0x3f, r25	; 63
    198a:	08 95       	ret

0000198c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    198c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1990:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1992:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1994:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1998:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    199a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    199e:	08 95       	ret

000019a0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    19a0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    19a2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    19a4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    19a6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    19a8:	60 83       	st	Z, r22
	ret                             // Return to caller
    19aa:	08 95       	ret

000019ac <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	fc 01       	movw	r30, r24
    19b2:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    19b8:	c6 2f       	mov	r28, r22
    19ba:	d0 e0       	ldi	r29, 0x00	; 0
    19bc:	de 01       	movw	r26, r28
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <ioport_configure_port_pin+0x1a>
    19c2:	b5 95       	asr	r27
    19c4:	a7 95       	ror	r26
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <ioport_configure_port_pin+0x16>
    19ca:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    19cc:	50 83       	st	Z, r21
    19ce:	2f 5f       	subi	r18, 0xFF	; 255
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    19d4:	28 30       	cpi	r18, 0x08	; 8
    19d6:	31 05       	cpc	r19, r1
    19d8:	89 f7       	brne	.-30     	; 0x19bc <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    19da:	40 ff       	sbrs	r20, 0
    19dc:	0a c0       	rjmp	.+20     	; 0x19f2 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    19de:	41 ff       	sbrs	r20, 1
    19e0:	03 c0       	rjmp	.+6      	; 0x19e8 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    19e2:	fc 01       	movw	r30, r24
    19e4:	65 83       	std	Z+5, r22	; 0x05
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    19e8:	fc 01       	movw	r30, r24
    19ea:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    19ec:	fc 01       	movw	r30, r24
    19ee:	61 83       	std	Z+1, r22	; 0x01
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    19f2:	fc 01       	movw	r30, r24
    19f4:	62 83       	std	Z+2, r22	; 0x02
	}
}
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    19fc:	43 e0       	ldi	r20, 0x03	; 3
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	80 ee       	ldi	r24, 0xE0	; 224
    1a04:	97 e0       	ldi	r25, 0x07	; 7
    1a06:	d2 df       	rcall	.-92     	; 0x19ac <ioport_configure_port_pin>
    1a08:	43 e0       	ldi	r20, 0x03	; 3
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	62 e0       	ldi	r22, 0x02	; 2
    1a0e:	80 ee       	ldi	r24, 0xE0	; 224
    1a10:	97 e0       	ldi	r25, 0x07	; 7
    1a12:	cc df       	rcall	.-104    	; 0x19ac <ioport_configure_port_pin>
    1a14:	43 e0       	ldi	r20, 0x03	; 3
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	60 e1       	ldi	r22, 0x10	; 16
    1a1a:	80 e6       	ldi	r24, 0x60	; 96
    1a1c:	96 e0       	ldi	r25, 0x06	; 6
    1a1e:	c6 df       	rcall	.-116    	; 0x19ac <ioport_configure_port_pin>
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	50 e4       	ldi	r21, 0x40	; 64
    1a24:	60 e2       	ldi	r22, 0x20	; 32
    1a26:	80 e6       	ldi	r24, 0x60	; 96
    1a28:	96 e0       	ldi	r25, 0x06	; 6
    1a2a:	c0 df       	rcall	.-128    	; 0x19ac <ioport_configure_port_pin>
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	5b e1       	ldi	r21, 0x1B	; 27
    1a30:	60 e2       	ldi	r22, 0x20	; 32
    1a32:	80 e8       	ldi	r24, 0x80	; 128
    1a34:	96 e0       	ldi	r25, 0x06	; 6
    1a36:	ba df       	rcall	.-140    	; 0x19ac <ioport_configure_port_pin>
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	5b e1       	ldi	r21, 0x1B	; 27
    1a3c:	62 e0       	ldi	r22, 0x02	; 2
    1a3e:	80 ea       	ldi	r24, 0xA0	; 160
    1a40:	96 e0       	ldi	r25, 0x06	; 6
    1a42:	b4 df       	rcall	.-152    	; 0x19ac <ioport_configure_port_pin>
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	5b e1       	ldi	r21, 0x1B	; 27
    1a48:	64 e0       	ldi	r22, 0x04	; 4
    1a4a:	80 ea       	ldi	r24, 0xA0	; 160
    1a4c:	96 e0       	ldi	r25, 0x06	; 6
    1a4e:	ae df       	rcall	.-164    	; 0x19ac <ioport_configure_port_pin>
    1a50:	43 e0       	ldi	r20, 0x03	; 3
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	62 e0       	ldi	r22, 0x02	; 2
    1a56:	80 e6       	ldi	r24, 0x60	; 96
    1a58:	96 e0       	ldi	r25, 0x06	; 6
    1a5a:	a8 df       	rcall	.-176    	; 0x19ac <ioport_configure_port_pin>
    1a5c:	43 e0       	ldi	r20, 0x03	; 3
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	68 e0       	ldi	r22, 0x08	; 8
    1a62:	80 e6       	ldi	r24, 0x60	; 96
    1a64:	96 e0       	ldi	r25, 0x06	; 6
    1a66:	a2 df       	rcall	.-188    	; 0x19ac <ioport_configure_port_pin>
    1a68:	43 e0       	ldi	r20, 0x03	; 3
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	68 e0       	ldi	r22, 0x08	; 8
    1a6e:	80 ea       	ldi	r24, 0xA0	; 160
    1a70:	96 e0       	ldi	r25, 0x06	; 6
    1a72:	9c df       	rcall	.-200    	; 0x19ac <ioport_configure_port_pin>
    1a74:	43 e0       	ldi	r20, 0x03	; 3
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	61 e0       	ldi	r22, 0x01	; 1
    1a7a:	80 e6       	ldi	r24, 0x60	; 96
    1a7c:	96 e0       	ldi	r25, 0x06	; 6
    1a7e:	96 df       	rcall	.-212    	; 0x19ac <ioport_configure_port_pin>
    1a80:	43 e0       	ldi	r20, 0x03	; 3
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	68 e0       	ldi	r22, 0x08	; 8
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	96 e0       	ldi	r25, 0x06	; 6
    1a8a:	90 df       	rcall	.-224    	; 0x19ac <ioport_configure_port_pin>
    1a8c:	41 e0       	ldi	r20, 0x01	; 1
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	60 e1       	ldi	r22, 0x10	; 16
    1a92:	80 e8       	ldi	r24, 0x80	; 128
    1a94:	96 e0       	ldi	r25, 0x06	; 6
    1a96:	8a df       	rcall	.-236    	; 0x19ac <ioport_configure_port_pin>
    1a98:	43 e0       	ldi	r20, 0x03	; 3
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	62 e0       	ldi	r22, 0x02	; 2
    1a9e:	80 e6       	ldi	r24, 0x60	; 96
    1aa0:	96 e0       	ldi	r25, 0x06	; 6
    1aa2:	84 df       	rcall	.-248    	; 0x19ac <ioport_configure_port_pin>
    1aa4:	43 e0       	ldi	r20, 0x03	; 3
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	68 e0       	ldi	r22, 0x08	; 8
    1aaa:	80 e6       	ldi	r24, 0x60	; 96
    1aac:	96 e0       	ldi	r25, 0x06	; 6
    1aae:	7e df       	rcall	.-260    	; 0x19ac <ioport_configure_port_pin>
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	64 e0       	ldi	r22, 0x04	; 4
    1ab6:	80 e6       	ldi	r24, 0x60	; 96
    1ab8:	96 e0       	ldi	r25, 0x06	; 6
    1aba:	78 df       	rcall	.-272    	; 0x19ac <ioport_configure_port_pin>
    1abc:	43 e0       	ldi	r20, 0x03	; 3
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	60 e1       	ldi	r22, 0x10	; 16
    1ac2:	80 ea       	ldi	r24, 0xA0	; 160
    1ac4:	96 e0       	ldi	r25, 0x06	; 6
    1ac6:	72 df       	rcall	.-284    	; 0x19ac <ioport_configure_port_pin>
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	96 e0       	ldi	r25, 0x06	; 6
    1ad2:	6c df       	rcall	.-296    	; 0x19ac <ioport_configure_port_pin>
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	64 e0       	ldi	r22, 0x04	; 4
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	96 e0       	ldi	r25, 0x06	; 6
    1ade:	66 df       	rcall	.-308    	; 0x19ac <ioport_configure_port_pin>
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	62 e0       	ldi	r22, 0x02	; 2
    1ae6:	80 e2       	ldi	r24, 0x20	; 32
    1ae8:	96 e0       	ldi	r25, 0x06	; 6
    1aea:	60 df       	rcall	.-320    	; 0x19ac <ioport_configure_port_pin>
    1aec:	43 e0       	ldi	r20, 0x03	; 3
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	68 e0       	ldi	r22, 0x08	; 8
    1af2:	80 e4       	ldi	r24, 0x40	; 64
    1af4:	96 e0       	ldi	r25, 0x06	; 6
    1af6:	5a df       	rcall	.-332    	; 0x19ac <ioport_configure_port_pin>
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	64 e0       	ldi	r22, 0x04	; 4
    1afe:	80 e4       	ldi	r24, 0x40	; 64
    1b00:	96 e0       	ldi	r25, 0x06	; 6
    1b02:	54 df       	rcall	.-344    	; 0x19ac <ioport_configure_port_pin>
    1b04:	43 e0       	ldi	r20, 0x03	; 3
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	68 e0       	ldi	r22, 0x08	; 8
    1b0a:	80 e6       	ldi	r24, 0x60	; 96
    1b0c:	96 e0       	ldi	r25, 0x06	; 6
    1b0e:	4e df       	rcall	.-356    	; 0x19ac <ioport_configure_port_pin>
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	64 e0       	ldi	r22, 0x04	; 4
    1b16:	80 e6       	ldi	r24, 0x60	; 96
    1b18:	96 e0       	ldi	r25, 0x06	; 6
    1b1a:	48 df       	rcall	.-368    	; 0x19ac <ioport_configure_port_pin>
    1b1c:	43 e0       	ldi	r20, 0x03	; 3
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	68 e0       	ldi	r22, 0x08	; 8
    1b22:	80 e8       	ldi	r24, 0x80	; 128
    1b24:	96 e0       	ldi	r25, 0x06	; 6
    1b26:	42 df       	rcall	.-380    	; 0x19ac <ioport_configure_port_pin>
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	64 e0       	ldi	r22, 0x04	; 4
    1b2e:	80 e8       	ldi	r24, 0x80	; 128
    1b30:	96 e0       	ldi	r25, 0x06	; 6
    1b32:	3c cf       	rjmp	.-392    	; 0x19ac <ioport_configure_port_pin>
    1b34:	08 95       	ret

00001b36 <fhtDitInt>:
// the FHT function performs continuous scaling of
// the calculations.  Due to the scaling the result
// is always half of the input range (-8192 to +8191).
//
void fhtDitInt(int16_t *fx)
{
    1b36:	2f 92       	push	r2
    1b38:	3f 92       	push	r3
    1b3a:	4f 92       	push	r4
    1b3c:	5f 92       	push	r5
    1b3e:	6f 92       	push	r6
    1b40:	7f 92       	push	r7
    1b42:	8f 92       	push	r8
    1b44:	9f 92       	push	r9
    1b46:	af 92       	push	r10
    1b48:	bf 92       	push	r11
    1b4a:	cf 92       	push	r12
    1b4c:	df 92       	push	r13
    1b4e:	ef 92       	push	r14
    1b50:	ff 92       	push	r15
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	e6 97       	sbiw	r28, 0x36	; 54
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	8f 8f       	std	Y+31, r24	; 0x1f
    1b66:	98 a3       	std	Y+32, r25	; 0x20
    1b68:	0f 8d       	ldd	r16, Y+31	; 0x1f
    1b6a:	18 a1       	ldd	r17, Y+32	; 0x20
    1b6c:	fc 01       	movw	r30, r24
	int16_t temp16bit1, butdis, butloc;
	int32_t temp32bit1, temp32bit2;
	uint8_t tablePointer;

	// Permute - bit reversal
	butdis = 0;
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
	for (k = 0; k < FHT_LEN; k++)
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	50 e0       	ldi	r21, 0x00	; 0
		{
			temp16bit1 = fx[butdis];
			fx[butdis] = fx[k];
			fx[k] = temp16bit1;
		}
		butloc = FHT_LEN >> 1;
    1b76:	68 94       	set
    1b78:	cc 24       	eor	r12, r12
    1b7a:	c7 f8       	bld	r12, 7
    1b7c:	d1 2c       	mov	r13, r1
    1b7e:	7c 01       	movw	r14, r24

	// Permute - bit reversal
	butdis = 0;
	for (k = 0; k < FHT_LEN; k++)
	{
		if (k <= butdis)
    1b80:	24 17       	cp	r18, r20
    1b82:	35 07       	cpc	r19, r21
    1b84:	74 f0       	brlt	.+28     	; 0x1ba2 <fhtDitInt+0x6c>
		{
			temp16bit1 = fx[butdis];
    1b86:	d9 01       	movw	r26, r18
    1b88:	aa 0f       	add	r26, r26
    1b8a:	bb 1f       	adc	r27, r27
    1b8c:	ae 0d       	add	r26, r14
    1b8e:	bf 1d       	adc	r27, r15
    1b90:	8d 91       	ld	r24, X+
    1b92:	9c 91       	ld	r25, X
    1b94:	11 97       	sbiw	r26, 0x01	; 1
			fx[butdis] = fx[k];
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	6d 93       	st	X+, r22
    1b9c:	7c 93       	st	X, r23
			fx[k] = temp16bit1;
    1b9e:	80 83       	st	Z, r24
    1ba0:	91 83       	std	Z+1, r25	; 0x01
		}
		butloc = FHT_LEN >> 1;

		while(butdis >= butloc && butloc > 0)
    1ba2:	20 38       	cpi	r18, 0x80	; 128
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	6c f0       	brlt	.+26     	; 0x1bc2 <fhtDitInt+0x8c>
		{
			temp16bit1 = fx[butdis];
			fx[butdis] = fx[k];
			fx[k] = temp16bit1;
		}
		butloc = FHT_LEN >> 1;
    1ba8:	8c 2d       	mov	r24, r12
    1baa:	9d 2d       	mov	r25, r13

		while(butdis >= butloc && butloc > 0)
		{
			butdis -= butloc;
    1bac:	28 1b       	sub	r18, r24
    1bae:	39 0b       	sbc	r19, r25
			butloc = butloc >> 1;
    1bb0:	95 95       	asr	r25
    1bb2:	87 95       	ror	r24
			fx[butdis] = fx[k];
			fx[k] = temp16bit1;
		}
		butloc = FHT_LEN >> 1;

		while(butdis >= butloc && butloc > 0)
    1bb4:	28 17       	cp	r18, r24
    1bb6:	39 07       	cpc	r19, r25
    1bb8:	34 f0       	brlt	.+12     	; 0x1bc6 <fhtDitInt+0x90>
    1bba:	18 16       	cp	r1, r24
    1bbc:	19 06       	cpc	r1, r25
    1bbe:	b4 f3       	brlt	.-20     	; 0x1bac <fhtDitInt+0x76>
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <fhtDitInt+0x90>
		{
			temp16bit1 = fx[butdis];
			fx[butdis] = fx[k];
			fx[k] = temp16bit1;
		}
		butloc = FHT_LEN >> 1;
    1bc2:	8c 2d       	mov	r24, r12
    1bc4:	9d 2d       	mov	r25, r13
		while(butdis >= butloc && butloc > 0)
		{
			butdis -= butloc;
			butloc = butloc >> 1;
		}
		butdis += butloc;
    1bc6:	28 0f       	add	r18, r24
    1bc8:	39 1f       	adc	r19, r25
	int32_t temp32bit1, temp32bit2;
	uint8_t tablePointer;

	// Permute - bit reversal
	butdis = 0;
	for (k = 0; k < FHT_LEN; k++)
    1bca:	4f 5f       	subi	r20, 0xFF	; 255
    1bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bce:	32 96       	adiw	r30, 0x02	; 2
    1bd0:	41 15       	cp	r20, r1
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	58 07       	cpc	r21, r24
    1bd6:	a1 f6       	brne	.-88     	; 0x1b80 <fhtDitInt+0x4a>
    1bd8:	e0 e1       	ldi	r30, 0x10	; 16
    1bda:	f0 e2       	ldi	r31, 0x20	; 32
    1bdc:	eb a7       	std	Y+43, r30	; 0x2b
    1bde:	fc a7       	std	Y+44, r31	; 0x2c
    1be0:	e0 e0       	ldi	r30, 0x00	; 0
    1be2:	f0 e2       	ldi	r31, 0x20	; 32
    1be4:	ef a7       	std	Y+47, r30	; 0x2f
    1be6:	f8 ab       	std	Y+48, r31	; 0x30
    1be8:	e1 e0       	ldi	r30, 0x01	; 1
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	ed a3       	std	Y+37, r30	; 0x25
    1bee:	fe a3       	std	Y+38, r31	; 0x26
		
		istep = n << 1;

		// Get the sine and cosine data from the look-up tables
		dcos = (int32_t)cosTable[tablePointer];
		dsin = (int32_t)sinTable[tablePointer];
    1bf0:	09 ab       	std	Y+49, r16	; 0x31
    1bf2:	1a ab       	std	Y+50, r17	; 0x32
		printf("fhtDitInt(): FHT Loop n = %d:\r\n", n);
		outputfx(fx, FHT_LEN);
		#endif
		#endif
		
		istep = n << 1;
    1bf4:	ed a1       	ldd	r30, Y+37	; 0x25
    1bf6:	fe a1       	ldd	r31, Y+38	; 0x26
    1bf8:	ee 0f       	add	r30, r30
    1bfa:	ff 1f       	adc	r31, r31
    1bfc:	ef a3       	std	Y+39, r30	; 0x27
    1bfe:	f8 a7       	std	Y+40, r31	; 0x28
    1c00:	ef 87       	std	Y+15, r30	; 0x0f
    1c02:	f8 8b       	std	Y+16, r31	; 0x10

		// Get the sine and cosine data from the look-up tables
		dcos = (int32_t)cosTable[tablePointer];
    1c04:	eb a5       	ldd	r30, Y+43	; 0x2b
    1c06:	fc a5       	ldd	r31, Y+44	; 0x2c
    1c08:	61 91       	ld	r22, Z+
    1c0a:	71 91       	ld	r23, Z+
    1c0c:	eb a7       	std	Y+43, r30	; 0x2b
    1c0e:	fc a7       	std	Y+44, r31	; 0x2c
		dsin = (int32_t)sinTable[tablePointer];
    1c10:	ef a5       	ldd	r30, Y+47	; 0x2f
    1c12:	f8 a9       	ldd	r31, Y+48	; 0x30
    1c14:	01 91       	ld	r16, Z+
    1c16:	11 91       	ld	r17, Z+
    1c18:	ef a7       	std	Y+47, r30	; 0x2f
    1c1a:	f8 ab       	std	Y+48, r31	; 0x30
    1c1c:	ef a1       	ldd	r30, Y+39	; 0x27
    1c1e:	f8 a5       	ldd	r31, Y+40	; 0x28
    1c20:	ee 0f       	add	r30, r30
    1c22:	ff 1f       	adc	r31, r31
    1c24:	ed 87       	std	Y+13, r30	; 0x0d
    1c26:	fe 87       	std	Y+14, r31	; 0x0e
    1c28:	2f a0       	ldd	r2, Y+39	; 0x27
    1c2a:	38 a4       	ldd	r3, Y+40	; 0x28
    1c2c:	e9 a9       	ldd	r30, Y+49	; 0x31
    1c2e:	fa a9       	ldd	r31, Y+50	; 0x32
		fcos = dcos;
		fsin = dsin;
		tablePointer++;

		// Zero Frequency loop
		for (k = 0; k < FHT_LEN; k += istep)
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a1 01       	movw	r20, r2
    1c36:	68 01       	movw	r12, r16
    1c38:	0d 85       	ldd	r16, Y+13	; 0x0d
    1c3a:	1e 85       	ldd	r17, Y+14	; 0x0e
    1c3c:	df 01       	movw	r26, r30
    1c3e:	a2 0d       	add	r26, r2
    1c40:	b3 1d       	adc	r27, r3
		{
			temp16bit1 = fx[k + n];
    1c42:	2d 91       	ld	r18, X+
    1c44:	3c 91       	ld	r19, X
    1c46:	11 97       	sbiw	r26, 0x01	; 1
			fx[k + n] = (fx[k] - temp16bit1) >> 1;
    1c48:	e0 80       	ld	r14, Z
    1c4a:	f1 80       	ldd	r15, Z+1	; 0x01
    1c4c:	e2 1a       	sub	r14, r18
    1c4e:	f3 0a       	sbc	r15, r19
    1c50:	f5 94       	asr	r15
    1c52:	e7 94       	ror	r14
    1c54:	ed 92       	st	X+, r14
    1c56:	fc 92       	st	X, r15
			fx[k] = (fx[k] + temp16bit1) >> 1;
    1c58:	a0 81       	ld	r26, Z
    1c5a:	b1 81       	ldd	r27, Z+1	; 0x01
    1c5c:	2a 0f       	add	r18, r26
    1c5e:	3b 1f       	adc	r19, r27
    1c60:	35 95       	asr	r19
    1c62:	27 95       	ror	r18
    1c64:	20 83       	st	Z, r18
    1c66:	31 83       	std	Z+1, r19	; 0x01
		fcos = dcos;
		fsin = dsin;
		tablePointer++;

		// Zero Frequency loop
		for (k = 0; k < FHT_LEN; k += istep)
    1c68:	84 0f       	add	r24, r20
    1c6a:	95 1f       	adc	r25, r21
    1c6c:	e0 0f       	add	r30, r16
    1c6e:	f1 1f       	adc	r31, r17
    1c70:	8f 3f       	cpi	r24, 0xFF	; 255
    1c72:	91 05       	cpc	r25, r1
    1c74:	19 f3       	breq	.-58     	; 0x1c3c <fhtDitInt+0x106>
    1c76:	14 f3       	brlt	.-60     	; 0x1c3c <fhtDitInt+0x106>
		outputfx(fx, FHT_LEN);
		#endif
		#endif
		// End zero frequency loop

		if (n > 2)
    1c78:	ed a1       	ldd	r30, Y+37	; 0x25
    1c7a:	fe a1       	ldd	r31, Y+38	; 0x26
    1c7c:	e3 30       	cpi	r30, 0x03	; 3
    1c7e:	f1 05       	cpc	r31, r1
    1c80:	08 f4       	brcc	.+2      	; 0x1c84 <fhtDitInt+0x14e>
    1c82:	92 c1       	rjmp	.+804    	; 0x1fa8 <fhtDitInt+0x472>
		{
			// Double butterfly
			butdis = n - 2;
    1c84:	cf 01       	movw	r24, r30
    1c86:	02 97       	sbiw	r24, 0x02	; 2
			for (butloc = 1; butloc < (n >> 1); butloc++)
    1c88:	f6 95       	lsr	r31
    1c8a:	e7 95       	ror	r30
    1c8c:	e9 a7       	std	Y+41, r30	; 0x29
    1c8e:	fa a7       	std	Y+42, r31	; 0x2a
    1c90:	32 97       	sbiw	r30, 0x02	; 2
    1c92:	08 f4       	brcc	.+2      	; 0x1c96 <fhtDitInt+0x160>
    1c94:	89 c1       	rjmp	.+786    	; 0x1fa8 <fhtDitInt+0x472>
		#endif
		
		istep = n << 1;

		// Get the sine and cosine data from the look-up tables
		dcos = (int32_t)cosTable[tablePointer];
    1c96:	9b 01       	movw	r18, r22
    1c98:	44 27       	eor	r20, r20
    1c9a:	37 fd       	sbrc	r19, 7
    1c9c:	40 95       	com	r20
    1c9e:	54 2f       	mov	r21, r20
    1ca0:	2d 8b       	std	Y+21, r18	; 0x15
    1ca2:	3e 8b       	std	Y+22, r19	; 0x16
    1ca4:	4f 8b       	std	Y+23, r20	; 0x17
    1ca6:	58 8f       	std	Y+24, r21	; 0x18
		dsin = (int32_t)sinTable[tablePointer];
    1ca8:	96 01       	movw	r18, r12
    1caa:	44 27       	eor	r20, r20
    1cac:	37 fd       	sbrc	r19, 7
    1cae:	40 95       	com	r20
    1cb0:	54 2f       	mov	r21, r20
    1cb2:	29 8f       	std	Y+25, r18	; 0x19
    1cb4:	3a 8f       	std	Y+26, r19	; 0x1a
    1cb6:	4b 8f       	std	Y+27, r20	; 0x1b
    1cb8:	5c 8f       	std	Y+28, r21	; 0x1c
    1cba:	ed 85       	ldd	r30, Y+13	; 0x0d
    1cbc:	fe 85       	ldd	r31, Y+14	; 0x0e
    1cbe:	e9 8b       	std	Y+17, r30	; 0x11
    1cc0:	fa 8b       	std	Y+18, r31	; 0x12
		fcos = dcos;
		fsin = dsin;
    1cc2:	2f 83       	std	Y+7, r18	; 0x07
    1cc4:	38 87       	std	Y+8, r19	; 0x08
    1cc6:	49 87       	std	Y+9, r20	; 0x09
    1cc8:	5a 87       	std	Y+10, r21	; 0x0a
		istep = n << 1;

		// Get the sine and cosine data from the look-up tables
		dcos = (int32_t)cosTable[tablePointer];
		dsin = (int32_t)sinTable[tablePointer];
		fcos = dcos;
    1cca:	4d 88       	ldd	r4, Y+21	; 0x15
    1ccc:	5e 88       	ldd	r5, Y+22	; 0x16
    1cce:	6f 88       	ldd	r6, Y+23	; 0x17
    1cd0:	78 8c       	ldd	r7, Y+24	; 0x18
    1cd2:	e9 a5       	ldd	r30, Y+41	; 0x29
    1cd4:	fa a5       	ldd	r31, Y+42	; 0x2a
    1cd6:	e9 a3       	std	Y+33, r30	; 0x21
    1cd8:	fa a3       	std	Y+34, r31	; 0x22
							fx[k + n + butdis] = (fx[k + butdis] >> 1) - (int16_t)temp32bit2;
							fx[k] = (fx[k] >> 1) + (int16_t)temp32bit1;
							fx[k + butdis] = (fx[k + butdis] >> 1) + (int16_t)temp32bit2;
						}

						temp32bit1 = (fcos * dcos - fsin * dsin) >> SC_SCALE;
    1cda:	8b a3       	std	Y+35, r24	; 0x23
    1cdc:	9c a3       	std	Y+36, r25	; 0x24

		if (n > 2)
		{
			// Double butterfly
			butdis = n - 2;
			for (butloc = 1; butloc < (n >> 1); butloc++)
    1cde:	31 96       	adiw	r30, 0x01	; 1
    1ce0:	ed a7       	std	Y+45, r30	; 0x2d
    1ce2:	fe a7       	std	Y+46, r31	; 0x2e
    1ce4:	2b 86       	std	Y+11, r2	; 0x0b
    1ce6:	3c 86       	std	Y+12, r3	; 0x0c
							fx[k + n + butdis] = (fx[k + butdis] >> 1) - (int16_t)temp32bit2;
							fx[k] = (fx[k] >> 1) + (int16_t)temp32bit1;
							fx[k + butdis] = (fx[k + butdis] >> 1) + (int16_t)temp32bit2;
						}

						temp32bit1 = (fcos * dcos - fsin * dsin) >> SC_SCALE;
    1ce8:	fb a1       	ldd	r31, Y+35	; 0x23
    1cea:	fb 8b       	std	Y+19, r31	; 0x13
    1cec:	ec a1       	ldd	r30, Y+36	; 0x24
    1cee:	ec 8b       	std	Y+20, r30	; 0x14
    1cf0:	e1 e0       	ldi	r30, 0x01	; 1
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	ed 8f       	std	Y+29, r30	; 0x1d
    1cf6:	fe 8f       	std	Y+30, r31	; 0x1e
    1cf8:	3f c1       	rjmp	.+638    	; 0x1f78 <fhtDitInt+0x442>
    1cfa:	eb 85       	ldd	r30, Y+11	; 0x0b
    1cfc:	fc 85       	ldd	r31, Y+12	; 0x0c
    1cfe:	e2 0d       	add	r30, r2
    1d00:	f3 1d       	adc	r31, r3
    1d02:	eb ab       	std	Y+51, r30	; 0x33
    1d04:	fc ab       	std	Y+52, r31	; 0x34
					{
						for (k = butloc; k <= FHT_LEN; k += istep)
						{
							// Using 32 bit integers for the main multiplication to prevent overflow errors
							// and we add 1 to SC_SCALE to divide the result by 2 or the addition below can overflow
							temp32bit1 = ((fcos * (int32_t)fx[k + n]) + (fsin * (int32_t)fx[k + n + butdis])) >> (SC_SCALE + 1);
    1d06:	80 80       	ld	r8, Z
    1d08:	91 80       	ldd	r9, Z+1	; 0x01
    1d0a:	aa 24       	eor	r10, r10
    1d0c:	97 fc       	sbrc	r9, 7
    1d0e:	a0 94       	com	r10
    1d10:	ba 2c       	mov	r11, r10
    1d12:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d14:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d16:	2d a9       	ldd	r18, Y+53	; 0x35
    1d18:	3e a9       	ldd	r19, Y+54	; 0x36
    1d1a:	e2 0f       	add	r30, r18
    1d1c:	f3 1f       	adc	r31, r19
    1d1e:	ed 83       	std	Y+5, r30	; 0x05
    1d20:	fe 83       	std	Y+6, r31	; 0x06
    1d22:	c0 80       	ld	r12, Z
    1d24:	d1 80       	ldd	r13, Z+1	; 0x01
    1d26:	ee 24       	eor	r14, r14
    1d28:	d7 fc       	sbrc	r13, 7
    1d2a:	e0 94       	com	r14
    1d2c:	fe 2c       	mov	r15, r14
    1d2e:	a5 01       	movw	r20, r10
    1d30:	94 01       	movw	r18, r8
    1d32:	c3 01       	movw	r24, r6
    1d34:	b2 01       	movw	r22, r4
    1d36:	43 d3       	rcall	.+1670   	; 0x23be <__mulsi3>
    1d38:	69 83       	std	Y+1, r22	; 0x01
    1d3a:	7a 83       	std	Y+2, r23	; 0x02
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	a7 01       	movw	r20, r14
    1d42:	96 01       	movw	r18, r12
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	38 d3       	rcall	.+1648   	; 0x23be <__mulsi3>
    1d4e:	29 81       	ldd	r18, Y+1	; 0x01
    1d50:	3a 81       	ldd	r19, Y+2	; 0x02
    1d52:	4b 81       	ldd	r20, Y+3	; 0x03
    1d54:	5c 81       	ldd	r21, Y+4	; 0x04
    1d56:	26 0f       	add	r18, r22
    1d58:	37 1f       	adc	r19, r23
    1d5a:	48 1f       	adc	r20, r24
    1d5c:	59 1f       	adc	r21, r25
    1d5e:	01 2e       	mov	r0, r17
    1d60:	1b e0       	ldi	r17, 0x0B	; 11
    1d62:	55 95       	asr	r21
    1d64:	47 95       	ror	r20
    1d66:	37 95       	ror	r19
    1d68:	27 95       	ror	r18
    1d6a:	1a 95       	dec	r17
    1d6c:	d1 f7       	brne	.-12     	; 0x1d62 <fhtDitInt+0x22c>
    1d6e:	10 2d       	mov	r17, r0
    1d70:	29 83       	std	Y+1, r18	; 0x01
    1d72:	3a 83       	std	Y+2, r19	; 0x02
    1d74:	4b 83       	std	Y+3, r20	; 0x03
    1d76:	5c 83       	std	Y+4, r21	; 0x04
							temp32bit2 = ((fsin * (int32_t)fx[k + n]) - (fcos * (int32_t)fx[k + n + butdis])) >> (SC_SCALE + 1);

							fx[k + n] = (fx[k] >> 1) - (int16_t)temp32bit1;
    1d78:	d1 01       	movw	r26, r2
    1d7a:	8d 91       	ld	r24, X+
    1d7c:	9c 91       	ld	r25, X
    1d7e:	95 95       	asr	r25
    1d80:	87 95       	ror	r24
    1d82:	82 1b       	sub	r24, r18
    1d84:	93 0b       	sbc	r25, r19
    1d86:	eb a9       	ldd	r30, Y+51	; 0x33
    1d88:	fc a9       	ldd	r31, Y+52	; 0x34
    1d8a:	80 83       	st	Z, r24
    1d8c:	91 83       	std	Z+1, r25	; 0x01
						for (k = butloc; k <= FHT_LEN; k += istep)
						{
							// Using 32 bit integers for the main multiplication to prevent overflow errors
							// and we add 1 to SC_SCALE to divide the result by 2 or the addition below can overflow
							temp32bit1 = ((fcos * (int32_t)fx[k + n]) + (fsin * (int32_t)fx[k + n + butdis])) >> (SC_SCALE + 1);
							temp32bit2 = ((fsin * (int32_t)fx[k + n]) - (fcos * (int32_t)fx[k + n + butdis])) >> (SC_SCALE + 1);
    1d8e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d90:	38 85       	ldd	r19, Y+8	; 0x08
    1d92:	49 85       	ldd	r20, Y+9	; 0x09
    1d94:	5a 85       	ldd	r21, Y+10	; 0x0a
    1d96:	c5 01       	movw	r24, r10
    1d98:	b4 01       	movw	r22, r8
    1d9a:	11 d3       	rcall	.+1570   	; 0x23be <__mulsi3>
    1d9c:	4b 01       	movw	r8, r22
    1d9e:	5c 01       	movw	r10, r24
    1da0:	a3 01       	movw	r20, r6
    1da2:	92 01       	movw	r18, r4
    1da4:	c7 01       	movw	r24, r14
    1da6:	b6 01       	movw	r22, r12
    1da8:	0a d3       	rcall	.+1556   	; 0x23be <__mulsi3>
    1daa:	86 1a       	sub	r8, r22
    1dac:	97 0a       	sbc	r9, r23
    1dae:	a8 0a       	sbc	r10, r24
    1db0:	b9 0a       	sbc	r11, r25
    1db2:	07 2e       	mov	r0, r23
    1db4:	7b e0       	ldi	r23, 0x0B	; 11
    1db6:	b5 94       	asr	r11
    1db8:	a7 94       	ror	r10
    1dba:	97 94       	ror	r9
    1dbc:	87 94       	ror	r8
    1dbe:	7a 95       	dec	r23
    1dc0:	d1 f7       	brne	.-12     	; 0x1db6 <fhtDitInt+0x280>
    1dc2:	70 2d       	mov	r23, r0

							fx[k + n] = (fx[k] >> 1) - (int16_t)temp32bit1;
							fx[k + n + butdis] = (fx[k + butdis] >> 1) - (int16_t)temp32bit2;
    1dc4:	ed a9       	ldd	r30, Y+53	; 0x35
    1dc6:	fe a9       	ldd	r31, Y+54	; 0x36
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	95 95       	asr	r25
    1dce:	87 95       	ror	r24
    1dd0:	88 19       	sub	r24, r8
    1dd2:	99 09       	sbc	r25, r9
    1dd4:	ed 81       	ldd	r30, Y+5	; 0x05
    1dd6:	fe 81       	ldd	r31, Y+6	; 0x06
    1dd8:	80 83       	st	Z, r24
    1dda:	91 83       	std	Z+1, r25	; 0x01
							fx[k] = (fx[k] >> 1) + (int16_t)temp32bit1;
    1ddc:	d1 01       	movw	r26, r2
    1dde:	8d 91       	ld	r24, X+
    1de0:	9c 91       	ld	r25, X
    1de2:	11 97       	sbiw	r26, 0x01	; 1
    1de4:	95 95       	asr	r25
    1de6:	87 95       	ror	r24
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	8e 0f       	add	r24, r30
    1dee:	9f 1f       	adc	r25, r31
    1df0:	8d 93       	st	X+, r24
    1df2:	9c 93       	st	X, r25
							fx[k + butdis] = (fx[k + butdis] >> 1) + (int16_t)temp32bit2;
    1df4:	ed a9       	ldd	r30, Y+53	; 0x35
    1df6:	fe a9       	ldd	r31, Y+54	; 0x36
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	95 95       	asr	r25
    1dfe:	87 95       	ror	r24
    1e00:	88 0e       	add	r8, r24
    1e02:	99 1e       	adc	r9, r25
    1e04:	80 82       	st	Z, r8
    1e06:	91 82       	std	Z+1, r9	; 0x01
				{
					// Double butterfly
					butdis = n - 2;
					for (butloc = 1; butloc < (n >> 1); butloc++)
					{
						for (k = butloc; k <= FHT_LEN; k += istep)
    1e08:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e0a:	f8 89       	ldd	r31, Y+16	; 0x10
    1e0c:	0e 0f       	add	r16, r30
    1e0e:	1f 1f       	adc	r17, r31
    1e10:	e9 89       	ldd	r30, Y+17	; 0x11
    1e12:	fa 89       	ldd	r31, Y+18	; 0x12
    1e14:	2e 0e       	add	r2, r30
    1e16:	3f 1e       	adc	r3, r31
    1e18:	ed a9       	ldd	r30, Y+53	; 0x35
    1e1a:	fe a9       	ldd	r31, Y+54	; 0x36
    1e1c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1e1e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	ed ab       	std	Y+53, r30	; 0x35
    1e26:	fe ab       	std	Y+54, r31	; 0x36
    1e28:	01 30       	cpi	r16, 0x01	; 1
    1e2a:	31 e0       	ldi	r19, 0x01	; 1
    1e2c:	13 07       	cpc	r17, r19
    1e2e:	0c f4       	brge	.+2      	; 0x1e32 <fhtDitInt+0x2fc>
    1e30:	64 cf       	rjmp	.-312    	; 0x1cfa <fhtDitInt+0x1c4>
							fx[k + n + butdis] = (fx[k + butdis] >> 1) - (int16_t)temp32bit2;
							fx[k] = (fx[k] >> 1) + (int16_t)temp32bit1;
							fx[k + butdis] = (fx[k + butdis] >> 1) + (int16_t)temp32bit2;
						}

						temp32bit1 = (fcos * dcos - fsin * dsin) >> SC_SCALE;
    1e32:	a3 01       	movw	r20, r6
    1e34:	92 01       	movw	r18, r4
    1e36:	6d 89       	ldd	r22, Y+21	; 0x15
    1e38:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3e:	bf d2       	rcall	.+1406   	; 0x23be <__mulsi3>
    1e40:	6b 01       	movw	r12, r22
    1e42:	7c 01       	movw	r14, r24
    1e44:	2f 81       	ldd	r18, Y+7	; 0x07
    1e46:	38 85       	ldd	r19, Y+8	; 0x08
    1e48:	49 85       	ldd	r20, Y+9	; 0x09
    1e4a:	5a 85       	ldd	r21, Y+10	; 0x0a
    1e4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e54:	b4 d2       	rcall	.+1384   	; 0x23be <__mulsi3>
    1e56:	c6 1a       	sub	r12, r22
    1e58:	d7 0a       	sbc	r13, r23
    1e5a:	e8 0a       	sbc	r14, r24
    1e5c:	f9 0a       	sbc	r15, r25
    1e5e:	46 01       	movw	r8, r12
    1e60:	57 01       	movw	r10, r14
    1e62:	07 2e       	mov	r0, r23
    1e64:	7a e0       	ldi	r23, 0x0A	; 10
    1e66:	b5 94       	asr	r11
    1e68:	a7 94       	ror	r10
    1e6a:	97 94       	ror	r9
    1e6c:	87 94       	ror	r8
    1e6e:	7a 95       	dec	r23
    1e70:	d1 f7       	brne	.-12     	; 0x1e66 <fhtDitInt+0x330>
    1e72:	70 2d       	mov	r23, r0
						fsin = (fsin * dcos + fcos * dsin) >> SC_SCALE;
    1e74:	6d 89       	ldd	r22, Y+21	; 0x15
    1e76:	7e 89       	ldd	r23, Y+22	; 0x16
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7c:	a0 d2       	rcall	.+1344   	; 0x23be <__mulsi3>
    1e7e:	6b 01       	movw	r12, r22
    1e80:	7c 01       	movw	r14, r24
    1e82:	a3 01       	movw	r20, r6
    1e84:	92 01       	movw	r18, r4
    1e86:	69 8d       	ldd	r22, Y+25	; 0x19
    1e88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8e:	97 d2       	rcall	.+1326   	; 0x23be <__mulsi3>
    1e90:	c6 0e       	add	r12, r22
    1e92:	d7 1e       	adc	r13, r23
    1e94:	e8 1e       	adc	r14, r24
    1e96:	f9 1e       	adc	r15, r25
    1e98:	d7 01       	movw	r26, r14
    1e9a:	c6 01       	movw	r24, r12
    1e9c:	07 2e       	mov	r0, r23
    1e9e:	7a e0       	ldi	r23, 0x0A	; 10
    1ea0:	b5 95       	asr	r27
    1ea2:	a7 95       	ror	r26
    1ea4:	97 95       	ror	r25
    1ea6:	87 95       	ror	r24
    1ea8:	7a 95       	dec	r23
    1eaa:	d1 f7       	brne	.-12     	; 0x1ea0 <fhtDitInt+0x36a>
    1eac:	70 2d       	mov	r23, r0
    1eae:	8f 83       	std	Y+7, r24	; 0x07
    1eb0:	98 87       	std	Y+8, r25	; 0x08
    1eb2:	a9 87       	std	Y+9, r26	; 0x09
    1eb4:	ba 87       	std	Y+10, r27	; 0x0a

						fcos = temp32bit1;
						butdis -= 2;
    1eb6:	eb 89       	ldd	r30, Y+19	; 0x13
    1eb8:	fc 89       	ldd	r31, Y+20	; 0x14
    1eba:	32 97       	sbiw	r30, 0x02	; 2
    1ebc:	eb 8b       	std	Y+19, r30	; 0x13
    1ebe:	fc 8b       	std	Y+20, r31	; 0x14
			{
				if (n > 2)
				{
					// Double butterfly
					butdis = n - 2;
					for (butloc = 1; butloc < (n >> 1); butloc++)
    1ec0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1ec2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1ec4:	31 96       	adiw	r30, 0x01	; 1
    1ec6:	29 a1       	ldd	r18, Y+33	; 0x21
    1ec8:	3a a1       	ldd	r19, Y+34	; 0x22
    1eca:	e2 17       	cp	r30, r18
    1ecc:	f3 07       	cpc	r31, r19
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <fhtDitInt+0x39c>
    1ed0:	4f c0       	rjmp	.+158    	; 0x1f70 <fhtDitInt+0x43a>
					#endif
					#endif
					// End double butterfly
				}

				temp32bit1 = (fcos * dcos - fsin * dsin) >> SC_SCALE;
    1ed2:	2d 89       	ldd	r18, Y+21	; 0x15
    1ed4:	3e 89       	ldd	r19, Y+22	; 0x16
    1ed6:	4f 89       	ldd	r20, Y+23	; 0x17
    1ed8:	58 8d       	ldd	r21, Y+24	; 0x18
    1eda:	c5 01       	movw	r24, r10
    1edc:	b4 01       	movw	r22, r8
    1ede:	6f d2       	rcall	.+1246   	; 0x23be <__mulsi3>
    1ee0:	2b 01       	movw	r4, r22
    1ee2:	3c 01       	movw	r6, r24
    1ee4:	29 8d       	ldd	r18, Y+25	; 0x19
    1ee6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1ee8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1eea:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1eec:	6f 81       	ldd	r22, Y+7	; 0x07
    1eee:	78 85       	ldd	r23, Y+8	; 0x08
    1ef0:	89 85       	ldd	r24, Y+9	; 0x09
    1ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef4:	64 d2       	rcall	.+1224   	; 0x23be <__mulsi3>
    1ef6:	46 1a       	sub	r4, r22
    1ef8:	57 0a       	sbc	r5, r23
    1efa:	68 0a       	sbc	r6, r24
    1efc:	79 0a       	sbc	r7, r25
    1efe:	03 2e       	mov	r0, r19
    1f00:	3a e0       	ldi	r19, 0x0A	; 10
    1f02:	75 94       	asr	r7
    1f04:	67 94       	ror	r6
    1f06:	57 94       	ror	r5
    1f08:	47 94       	ror	r4
    1f0a:	3a 95       	dec	r19
    1f0c:	d1 f7       	brne	.-12     	; 0x1f02 <fhtDitInt+0x3cc>
    1f0e:	30 2d       	mov	r19, r0
				fsin = (fsin * dcos + fcos * dsin) >> SC_SCALE;
    1f10:	2d 89       	ldd	r18, Y+21	; 0x15
    1f12:	3e 89       	ldd	r19, Y+22	; 0x16
    1f14:	4f 89       	ldd	r20, Y+23	; 0x17
    1f16:	58 8d       	ldd	r21, Y+24	; 0x18
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	4e d2       	rcall	.+1180   	; 0x23be <__mulsi3>
    1f22:	6b 01       	movw	r12, r22
    1f24:	7c 01       	movw	r14, r24
    1f26:	29 8d       	ldd	r18, Y+25	; 0x19
    1f28:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1f2a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1f2c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1f2e:	c5 01       	movw	r24, r10
    1f30:	b4 01       	movw	r22, r8
    1f32:	45 d2       	rcall	.+1162   	; 0x23be <__mulsi3>
    1f34:	c6 0e       	add	r12, r22
    1f36:	d7 1e       	adc	r13, r23
    1f38:	e8 1e       	adc	r14, r24
    1f3a:	f9 1e       	adc	r15, r25
    1f3c:	d7 01       	movw	r26, r14
    1f3e:	c6 01       	movw	r24, r12
    1f40:	07 2e       	mov	r0, r23
    1f42:	7a e0       	ldi	r23, 0x0A	; 10
    1f44:	b5 95       	asr	r27
    1f46:	a7 95       	ror	r26
    1f48:	97 95       	ror	r25
    1f4a:	87 95       	ror	r24
    1f4c:	7a 95       	dec	r23
    1f4e:	d1 f7       	brne	.-12     	; 0x1f44 <fhtDitInt+0x40e>
    1f50:	70 2d       	mov	r23, r0
    1f52:	8f 83       	std	Y+7, r24	; 0x07
    1f54:	98 87       	std	Y+8, r25	; 0x08
    1f56:	a9 87       	std	Y+9, r26	; 0x09
    1f58:	ba 87       	std	Y+10, r27	; 0x0a

		if (n > 2)
		{
			// Double butterfly
			butdis = n - 2;
			for (butloc = 1; butloc < (n >> 1); butloc++)
    1f5a:	ed a5       	ldd	r30, Y+45	; 0x2d
    1f5c:	fe a5       	ldd	r31, Y+46	; 0x2e
    1f5e:	29 a5       	ldd	r18, Y+41	; 0x29
    1f60:	3a a5       	ldd	r19, Y+42	; 0x2a
    1f62:	e2 17       	cp	r30, r18
    1f64:	f3 07       	cpc	r31, r19
    1f66:	08 f4       	brcc	.+2      	; 0x1f6a <fhtDitInt+0x434>
    1f68:	bf ce       	rjmp	.-642    	; 0x1ce8 <fhtDitInt+0x1b2>
    1f6a:	2b 84       	ldd	r2, Y+11	; 0x0b
    1f6c:	3c 84       	ldd	r3, Y+12	; 0x0c
    1f6e:	1c c0       	rjmp	.+56     	; 0x1fa8 <fhtDitInt+0x472>
			{
				if (n > 2)
				{
					// Double butterfly
					butdis = n - 2;
					for (butloc = 1; butloc < (n >> 1); butloc++)
    1f70:	ed 8f       	std	Y+29, r30	; 0x1d
    1f72:	fe 8f       	std	Y+30, r31	; 0x1e
							fx[k + n + butdis] = (fx[k + butdis] >> 1) - (int16_t)temp32bit2;
							fx[k] = (fx[k] >> 1) + (int16_t)temp32bit1;
							fx[k + butdis] = (fx[k + butdis] >> 1) + (int16_t)temp32bit2;
						}

						temp32bit1 = (fcos * dcos - fsin * dsin) >> SC_SCALE;
    1f74:	24 01       	movw	r4, r8
    1f76:	35 01       	movw	r6, r10
				{
					// Double butterfly
					butdis = n - 2;
					for (butloc = 1; butloc < (n >> 1); butloc++)
					{
						for (k = butloc; k <= FHT_LEN; k += istep)
    1f78:	e1 30       	cpi	r30, 0x01	; 1
    1f7a:	31 e0       	ldi	r19, 0x01	; 1
    1f7c:	f3 07       	cpc	r31, r19
    1f7e:	0c f0       	brlt	.+2      	; 0x1f82 <fhtDitInt+0x44c>
    1f80:	58 cf       	rjmp	.-336    	; 0x1e32 <fhtDitInt+0x2fc>
    1f82:	1f 01       	movw	r2, r30
    1f84:	22 0c       	add	r2, r2
    1f86:	33 1c       	adc	r3, r3
    1f88:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1f8a:	58 a1       	ldd	r21, Y+32	; 0x20
    1f8c:	24 0e       	add	r2, r20
    1f8e:	35 1e       	adc	r3, r21
    1f90:	0b 89       	ldd	r16, Y+19	; 0x13
    1f92:	1c 89       	ldd	r17, Y+20	; 0x14
    1f94:	0e 0f       	add	r16, r30
    1f96:	1f 1f       	adc	r17, r31
    1f98:	00 0f       	add	r16, r16
    1f9a:	11 1f       	adc	r17, r17
    1f9c:	04 0f       	add	r16, r20
    1f9e:	15 1f       	adc	r17, r21
    1fa0:	0d ab       	std	Y+53, r16	; 0x35
    1fa2:	1e ab       	std	Y+54, r17	; 0x36
    1fa4:	8f 01       	movw	r16, r30
    1fa6:	a9 ce       	rjmp	.-686    	; 0x1cfa <fhtDitInt+0x1c4>
			#endif
			#endif
			// End double butterfly
		}

		if (n > 1)
    1fa8:	ed a1       	ldd	r30, Y+37	; 0x25
    1faa:	fe a1       	ldd	r31, Y+38	; 0x26
    1fac:	e2 30       	cpi	r30, 0x02	; 2
    1fae:	f1 05       	cpc	r31, r1
    1fb0:	88 f1       	brcs	.+98     	; 0x2014 <fhtDitInt+0x4de>
		{
			// Nyquist Frequency Loop
			for (k = (n >> 1); k < FHT_LEN; k += istep)
    1fb2:	9f 01       	movw	r18, r30
    1fb4:	36 95       	lsr	r19
    1fb6:	27 95       	ror	r18
    1fb8:	c9 01       	movw	r24, r18
    1fba:	2f 3f       	cpi	r18, 0xFF	; 255
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <fhtDitInt+0x48c>
    1fc0:	4c f5       	brge	.+82     	; 0x2014 <fhtDitInt+0x4de>
    1fc2:	f9 01       	movw	r30, r18
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1fca:	38 a1       	ldd	r19, Y+32	; 0x20
    1fcc:	e2 0f       	add	r30, r18
    1fce:	f3 1f       	adc	r31, r19
    1fd0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fd2:	78 89       	ldd	r23, Y+16	; 0x10
    1fd4:	0d 85       	ldd	r16, Y+13	; 0x0d
    1fd6:	1e 85       	ldd	r17, Y+14	; 0x0e
    1fd8:	df 01       	movw	r26, r30
    1fda:	a2 0d       	add	r26, r2
    1fdc:	b3 1d       	adc	r27, r3
			{
				temp16bit1 = fx[k + n];
    1fde:	2d 91       	ld	r18, X+
    1fe0:	3c 91       	ld	r19, X
    1fe2:	11 97       	sbiw	r26, 0x01	; 1
				fx[k + n] = (fx[k] - temp16bit1) >> 1;
    1fe4:	40 81       	ld	r20, Z
    1fe6:	51 81       	ldd	r21, Z+1	; 0x01
    1fe8:	42 1b       	sub	r20, r18
    1fea:	53 0b       	sbc	r21, r19
    1fec:	55 95       	asr	r21
    1fee:	47 95       	ror	r20
    1ff0:	4d 93       	st	X+, r20
    1ff2:	5c 93       	st	X, r21
				fx[k] = (fx[k] + temp16bit1) >> 1;
    1ff4:	40 81       	ld	r20, Z
    1ff6:	51 81       	ldd	r21, Z+1	; 0x01
    1ff8:	24 0f       	add	r18, r20
    1ffa:	35 1f       	adc	r19, r21
    1ffc:	35 95       	asr	r19
    1ffe:	27 95       	ror	r18
    2000:	20 83       	st	Z, r18
    2002:	31 83       	std	Z+1, r19	; 0x01
		}

		if (n > 1)
		{
			// Nyquist Frequency Loop
			for (k = (n >> 1); k < FHT_LEN; k += istep)
    2004:	86 0f       	add	r24, r22
    2006:	97 1f       	adc	r25, r23
    2008:	e0 0f       	add	r30, r16
    200a:	f1 1f       	adc	r31, r17
    200c:	8f 3f       	cpi	r24, 0xFF	; 255
    200e:	91 05       	cpc	r25, r1
    2010:	19 f3       	breq	.-58     	; 0x1fd8 <fhtDitInt+0x4a2>
    2012:	14 f3       	brlt	.-60     	; 0x1fd8 <fhtDitInt+0x4a2>

	// Start of FHT function
	n = 1;
	tablePointer = 0;

	while (n < FHT_LEN)
    2014:	eb a5       	ldd	r30, Y+43	; 0x2b
    2016:	fc a5       	ldd	r31, Y+44	; 0x2c
    2018:	e0 52       	subi	r30, 0x20	; 32
    201a:	f0 42       	sbci	r31, 0x20	; 32
    201c:	29 f0       	breq	.+10     	; 0x2028 <fhtDitInt+0x4f2>
    201e:	ef a1       	ldd	r30, Y+39	; 0x27
    2020:	f8 a5       	ldd	r31, Y+40	; 0x28
    2022:	ed a3       	std	Y+37, r30	; 0x25
    2024:	fe a3       	std	Y+38, r31	; 0x26
    2026:	e6 cd       	rjmp	.-1076   	; 0x1bf4 <fhtDitInt+0xbe>

	#ifdef PRINTF_DEBUG
	printf("Output from fhtDitInt():\r\n");
	outputfx(fx, FHT_LEN);
	#endif
}
    2028:	e6 96       	adiw	r28, 0x36	; 54
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	ff 90       	pop	r15
    2038:	ef 90       	pop	r14
    203a:	df 90       	pop	r13
    203c:	cf 90       	pop	r12
    203e:	bf 90       	pop	r11
    2040:	af 90       	pop	r10
    2042:	9f 90       	pop	r9
    2044:	8f 90       	pop	r8
    2046:	7f 90       	pop	r7
    2048:	6f 90       	pop	r6
    204a:	5f 90       	pop	r5
    204c:	4f 90       	pop	r4
    204e:	3f 90       	pop	r3
    2050:	2f 90       	pop	r2
    2052:	08 95       	ret

00002054 <take_sample>:
}

//hack! I am using static variables defined outside of main, which seems very sketchy, but I could not figure out how to pass argumets to this function, so I just did that...
static void take_sample(void)
{
	left[samples_taken] = adc_get_result(&AUDIO_IN, LEFT_AUDIO_IN_CHANNEL);
    2054:	80 91 70 22 	lds	r24, 0x2270
    2058:	90 91 71 22 	lds	r25, 0x2271
    205c:	e0 e0       	ldi	r30, 0x00	; 0
    205e:	f2 e0       	ldi	r31, 0x02	; 2
    2060:	44 a1       	ldd	r20, Z+36	; 0x24
    2062:	55 a1       	ldd	r21, Z+37	; 0x25
    2064:	9c 01       	movw	r18, r24
    2066:	22 0f       	add	r18, r18
    2068:	33 1f       	adc	r19, r19
    206a:	f9 01       	movw	r30, r18
    206c:	ee 58       	subi	r30, 0x8E	; 142
    206e:	fb 4d       	sbci	r31, 0xDB	; 219
    2070:	40 83       	st	Z, r20
    2072:	51 83       	std	Z+1, r21	; 0x01
	right[samples_taken] = adc_get_result(&AUDIO_IN, RIGHT_AUDIO_IN_CHANNEL);
    2074:	e8 e2       	ldi	r30, 0x28	; 40
    2076:	f2 e0       	ldi	r31, 0x02	; 2
    2078:	44 81       	ldd	r20, Z+4	; 0x04
    207a:	55 81       	ldd	r21, Z+5	; 0x05
    207c:	f9 01       	movw	r30, r18
    207e:	ee 58       	subi	r30, 0x8E	; 142
    2080:	fd 4d       	sbci	r31, 0xDD	; 221
    2082:	40 83       	st	Z, r20
    2084:	51 83       	std	Z+1, r21	; 0x01
	samples_taken++;
    2086:	01 96       	adiw	r24, 0x01	; 1
    2088:	80 93 70 22 	sts	0x2270, r24
    208c:	90 93 71 22 	sts	0x2271, r25
    2090:	08 95       	ret

00002092 <main>:
static int16_t left[SAMPLE_SIZE];
static int16_t right[SAMPLE_SIZE];
static int samples_taken = 0;

int main (void)
{
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	2f 97       	sbiw	r28, 0x0f	; 15
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	de bf       	out	0x3e, r29	; 62
	sysclk_init();
    20a0:	37 dc       	rcall	.-1938   	; 0x1910 <sysclk_init>
	board_init();
    20a2:	ac dc       	rcall	.-1704   	; 0x19fc <board_init>
static void adc_init(void)
{
	struct adc_config adca_conf;
	struct adc_channel_config adcch0_conf;
	struct adc_channel_config adcch1_conf;
	adc_read_configuration(&AUDIO_IN, &adca_conf);
    20a4:	be 01       	movw	r22, r28
    20a6:	6f 5f       	subi	r22, 0xFF	; 255
    20a8:	7f 4f       	sbci	r23, 0xFF	; 255
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	92 e0       	ldi	r25, 0x02	; 2
    20ae:	94 db       	rcall	.-2264   	; 0x17d8 <adc_read_configuration>
	adcch_read_configuration(&AUDIO_IN, LEFT_AUDIO_IN_CHANNEL, &adcch0_conf);
    20b0:	ae 01       	movw	r20, r28
    20b2:	44 5f       	subi	r20, 0xF4	; 244
    20b4:	5f 4f       	sbci	r21, 0xFF	; 255
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	92 e0       	ldi	r25, 0x02	; 2
    20bc:	ed db       	rcall	.-2086   	; 0x1898 <adcch_read_configuration>
	adcch_read_configuration(&AUDIO_IN, RIGHT_AUDIO_IN_CHANNEL, &adcch1_conf);
    20be:	ae 01       	movw	r20, r28
    20c0:	48 5f       	subi	r20, 0xF8	; 248
    20c2:	5f 4f       	sbci	r21, 0xFF	; 255
    20c4:	62 e0       	ldi	r22, 0x02	; 2
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	92 e0       	ldi	r25, 0x02	; 2
    20ca:	e6 db       	rcall	.-2100   	; 0x1898 <adcch_read_configuration>
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	8f 78       	andi	r24, 0x8F	; 143
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	99 7e       	andi	r25, 0xE9	; 233
		conf->ctrlb |= ADC_FREERUN_bm;
		break;

#if ADC_NR_OF_CHANNELS > 1
	case ADC_TRIG_FREERUN_SWEEP:
		conf->ctrlb |= ADC_FREERUN_bm;
    20d4:	98 61       	ori	r25, 0x18	; 24
    20d6:	9a 83       	std	Y+2, r25	; 0x02
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
    20d8:	90 e4       	ldi	r25, 0x40	; 64
    20da:	9c 83       	std	Y+4, r25	; 0x04
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    20dc:	82 60       	ori	r24, 0x02	; 2
    20de:	8b 83       	std	Y+3, r24	; 0x03
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	8d 83       	std	Y+5, r24	; 0x05
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    20e4:	8b e1       	ldi	r24, 0x1B	; 27
    20e6:	8c 87       	std	Y+12, r24	; 0x0c
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    20e8:	1d 86       	std	Y+13, r1	; 0x0d
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
    20ea:	88 87       	std	Y+8, r24	; 0x08
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
    20ec:	89 e0       	ldi	r24, 0x09	; 9
    20ee:	89 87       	std	Y+9, r24	; 0x09
	adc_set_conversion_trigger(&adca_conf, ADC_TRIG_FREERUN_SWEEP, 2, 0);
	adc_enable_internal_input(&adca_conf, ADC_INT_BANDGAP);
	adc_set_clock_rate(&adca_conf, 2000000UL);
	adcch_set_input(&adcch0_conf, ADCCH_POS_PIN0, ADCCH_NEG_PIN4, GAIN);
	adcch_set_input(&adcch1_conf, ADCCH_POS_PIN1, ADCCH_NEG_PIN5, GAIN);
	adc_write_configuration(&AUDIO_IN, &adca_conf);
    20f0:	be 01       	movw	r22, r28
    20f2:	6f 5f       	subi	r22, 0xFF	; 255
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	92 e0       	ldi	r25, 0x02	; 2
    20fa:	1b db       	rcall	.-2506   	; 0x1732 <adc_write_configuration>
	adcch_write_configuration(&AUDIO_IN, LEFT_AUDIO_IN_CHANNEL, &adcch0_conf);
    20fc:	ae 01       	movw	r20, r28
    20fe:	44 5f       	subi	r20, 0xF4	; 244
    2100:	5f 4f       	sbci	r21, 0xFF	; 255
    2102:	61 e0       	ldi	r22, 0x01	; 1
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	92 e0       	ldi	r25, 0x02	; 2
    2108:	8c db       	rcall	.-2280   	; 0x1822 <adcch_write_configuration>
	adcch_write_configuration(&AUDIO_IN, RIGHT_AUDIO_IN_CHANNEL, &adcch1_conf);
    210a:	ae 01       	movw	r20, r28
    210c:	48 5f       	subi	r20, 0xF8	; 248
    210e:	5f 4f       	sbci	r21, 0xFF	; 255
    2110:	62 e0       	ldi	r22, 0x02	; 2
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	92 e0       	ldi	r25, 0x02	; 2
    2116:	85 db       	rcall	.-2294   	; 0x1822 <adcch_write_configuration>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2118:	87 e0       	ldi	r24, 0x07	; 7
    211a:	e0 ea       	ldi	r30, 0xA0	; 160
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	82 83       	std	Z+2, r24	; 0x02
	board_init();
	adc_init();
	pmic_init();
	ioport_init();

	adc_enable(&AUDIO_IN);
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	92 e0       	ldi	r25, 0x02	; 2
    2124:	0e 94 20 02 	call	0x440	; 0x440 <adc_enable>
	
	//Set up a timer to call take_sample() every 3,200 cycles
	tc_enable(&TCC0);
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	98 e0       	ldi	r25, 0x08	; 8
    212c:	0e 94 8b 08 	call	0x1116	; 0x1116 <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0, take_sample);
    2130:	6a e2       	ldi	r22, 0x2A	; 42
    2132:	70 e1       	ldi	r23, 0x10	; 16
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	98 e0       	ldi	r25, 0x08	; 8
    2138:	4c d8       	rcall	.-3944   	; 0x11d2 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    213a:	e0 e0       	ldi	r30, 0x00	; 0
    213c:	f8 e0       	ldi	r31, 0x08	; 8
    213e:	81 81       	ldd	r24, Z+1	; 0x01
    2140:	88 7f       	andi	r24, 0xF8	; 248
    2142:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2144:	80 e8       	ldi	r24, 0x80	; 128
    2146:	9c e0       	ldi	r25, 0x0C	; 12
    2148:	86 a3       	std	Z+38, r24	; 0x26
    214a:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    214c:	86 81       	ldd	r24, Z+6	; 0x06
    214e:	8c 7f       	andi	r24, 0xFC	; 252
    2150:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    2152:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    2154:	81 60       	ori	r24, 0x01	; 1
    2156:	86 83       	std	Z+6, r24	; 0x06
	tc_set_wgm(&TCC0, TC_WG_NORMAL);
	tc_write_period(&TCC0, 3200);
	tc_set_overflow_interrupt_level(&TCC0, TC_INT_LVL_LO);
	cpu_irq_enable();
    2158:	78 94       	sei
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    215a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    215c:	80 7f       	andi	r24, 0xF0	; 240
    215e:	81 60       	ori	r24, 0x01	; 1
    2160:	80 83       	st	Z, r24
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2162:	e0 e4       	ldi	r30, 0x40	; 64
    2164:	f6 e0       	ldi	r31, 0x06	; 6
    2166:	80 e8       	ldi	r24, 0x80	; 128
    2168:	81 83       	std	Z+1, r24	; 0x01
    216a:	80 e4       	ldi	r24, 0x40	; 64
    216c:	81 83       	std	Z+1, r24	; 0x01
    216e:	80 e2       	ldi	r24, 0x20	; 32
    2170:	81 83       	std	Z+1, r24	; 0x01
    2172:	80 e1       	ldi	r24, 0x10	; 16
    2174:	81 83       	std	Z+1, r24	; 0x01
    2176:	88 e0       	ldi	r24, 0x08	; 8
    2178:	81 83       	std	Z+1, r24	; 0x01
    217a:	84 e0       	ldi	r24, 0x04	; 4
    217c:	81 83       	std	Z+1, r24	; 0x01
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	e0 ee       	ldi	r30, 0xE0	; 224
    2182:	f7 e0       	ldi	r31, 0x07	; 7
    2184:	81 83       	std	Z+1, r24	; 0x01
    2186:	0f 2e       	mov	r0, r31
    2188:	fc e7       	ldi	r31, 0x7C	; 124
    218a:	6f 2e       	mov	r6, r31
    218c:	f1 e2       	ldi	r31, 0x21	; 33
    218e:	7f 2e       	mov	r7, r31
    2190:	f0 2d       	mov	r31, r0
    2192:	0f 2e       	mov	r0, r31
    2194:	f2 ea       	ldi	r31, 0xA2	; 162
    2196:	8f 2e       	mov	r8, r31
    2198:	f1 e2       	ldi	r31, 0x21	; 33
    219a:	9f 2e       	mov	r9, r31
    219c:	f0 2d       	mov	r31, r0
    219e:	0f 2e       	mov	r0, r31
    21a0:	f0 e7       	ldi	r31, 0x70	; 112
    21a2:	ef 2e       	mov	r14, r31
    21a4:	f2 e2       	ldi	r31, 0x22	; 34
    21a6:	ff 2e       	mov	r15, r31
    21a8:	f0 2d       	mov	r31, r0
    21aa:	0f 2e       	mov	r0, r31
    21ac:	fc e7       	ldi	r31, 0x7C	; 124
    21ae:	4f 2e       	mov	r4, r31
    21b0:	f0 e2       	ldi	r31, 0x20	; 32
    21b2:	5f 2e       	mov	r5, r31
    21b4:	f0 2d       	mov	r31, r0
    21b6:	0f 2e       	mov	r0, r31
    21b8:	f2 ea       	ldi	r31, 0xA2	; 162
    21ba:	af 2e       	mov	r10, r31
    21bc:	f0 e2       	ldi	r31, 0x20	; 32
    21be:	bf 2e       	mov	r11, r31
    21c0:	f0 2d       	mov	r31, r0
    21c2:	00 e7       	ldi	r16, 0x70	; 112
    21c4:	11 e2       	ldi	r17, 0x21	; 33
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    21c6:	0f 2e       	mov	r0, r31
    21c8:	f0 e4       	ldi	r31, 0x40	; 64
    21ca:	2f 2e       	mov	r2, r31
    21cc:	f6 e0       	ldi	r31, 0x06	; 6
    21ce:	3f 2e       	mov	r3, r31
    21d0:	f0 2d       	mov	r31, r0
    21d2:	0f 2e       	mov	r0, r31
    21d4:	f2 e7       	ldi	r31, 0x72	; 114
    21d6:	cf 2e       	mov	r12, r31
    21d8:	f5 e2       	ldi	r31, 0x25	; 37
    21da:	df 2e       	mov	r13, r31
    21dc:	f0 2d       	mov	r31, r0
	static bool right_treble = false;


	while(true)
	{		
		if (samples_taken == SAMPLE_SIZE)
    21de:	80 91 70 22 	lds	r24, 0x2270
    21e2:	90 91 71 22 	lds	r25, 0x2271
    21e6:	81 15       	cp	r24, r1
    21e8:	91 40       	sbci	r25, 0x01	; 1
    21ea:	09 f0       	breq	.+2      	; 0x21ee <main+0x15c>
    21ec:	37 c0       	rjmp	.+110    	; 0x225c <main+0x1ca>
		{
			cpu_irq_disable();
    21ee:	f8 94       	cli
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	80 93 e6 07 	sts	0x07E6, r24
			ioport_set_pin_level(TRANSFORMING_LED, false);
			
			applyHannWindow(left);
    21f6:	82 e7       	ldi	r24, 0x72	; 114
    21f8:	94 e2       	ldi	r25, 0x24	; 36
    21fa:	b3 d8       	rcall	.-3738   	; 0x1362 <applyHannWindow>
			fhtDitInt(left);
    21fc:	82 e7       	ldi	r24, 0x72	; 114
    21fe:	94 e2       	ldi	r25, 0x24	; 36
    2200:	9a dc       	rcall	.-1740   	; 0x1b36 <fhtDitInt>
			complexToDecibelWithGain(left);
    2202:	82 e7       	ldi	r24, 0x72	; 114
    2204:	94 e2       	ldi	r25, 0x24	; 36
    2206:	23 d8       	rcall	.-4026   	; 0x124e <complexToDecibelWithGain>
    2208:	e2 e7       	ldi	r30, 0x72	; 114
    220a:	f4 e2       	ldi	r31, 0x24	; 36
    220c:	a0 e7       	ldi	r26, 0x70	; 112
    220e:	b1 e2       	ldi	r27, 0x21	; 33
			for (int i = 0; i < SAMPLE_SIZE / 2; i++)
				left_results[i] = left[i];
    2210:	81 91       	ld	r24, Z+
    2212:	91 91       	ld	r25, Z+
    2214:	8d 93       	st	X+, r24
    2216:	9d 93       	st	X+, r25
			ioport_set_pin_level(TRANSFORMING_LED, false);
			
			applyHannWindow(left);
			fhtDitInt(left);
			complexToDecibelWithGain(left);
			for (int i = 0; i < SAMPLE_SIZE / 2; i++)
    2218:	ec 15       	cp	r30, r12
    221a:	fd 05       	cpc	r31, r13
    221c:	c9 f7       	brne	.-14     	; 0x2210 <main+0x17e>
				left_results[i] = left[i];
			
			applyHannWindow(right);
    221e:	82 e7       	ldi	r24, 0x72	; 114
    2220:	92 e2       	ldi	r25, 0x22	; 34
    2222:	9f d8       	rcall	.-3778   	; 0x1362 <applyHannWindow>
			fhtDitInt(right);
    2224:	82 e7       	ldi	r24, 0x72	; 114
    2226:	92 e2       	ldi	r25, 0x22	; 34
    2228:	86 dc       	rcall	.-1780   	; 0x1b36 <fhtDitInt>
			complexToDecibelWithGain(right);
    222a:	82 e7       	ldi	r24, 0x72	; 114
    222c:	92 e2       	ldi	r25, 0x22	; 34
    222e:	0f d8       	rcall	.-4066   	; 0x124e <complexToDecibelWithGain>
    2230:	e2 e7       	ldi	r30, 0x72	; 114
    2232:	f2 e2       	ldi	r31, 0x22	; 34
    2234:	a0 e7       	ldi	r26, 0x70	; 112
    2236:	b0 e2       	ldi	r27, 0x20	; 32
    2238:	22 e7       	ldi	r18, 0x72	; 114
    223a:	33 e2       	ldi	r19, 0x23	; 35
			for (int i = 0; i < SAMPLE_SIZE / 2; i++)
				right_results[i] = right[i];
    223c:	81 91       	ld	r24, Z+
    223e:	91 91       	ld	r25, Z+
    2240:	8d 93       	st	X+, r24
    2242:	9d 93       	st	X+, r25
				left_results[i] = left[i];
			
			applyHannWindow(right);
			fhtDitInt(right);
			complexToDecibelWithGain(right);
			for (int i = 0; i < SAMPLE_SIZE / 2; i++)
    2244:	e2 17       	cp	r30, r18
    2246:	f3 07       	cpc	r31, r19
    2248:	c9 f7       	brne	.-14     	; 0x223c <main+0x1aa>
				right_results[i] = right[i];
				
			samples_taken = 0;
    224a:	10 92 70 22 	sts	0x2270, r1
    224e:	10 92 71 22 	sts	0x2271, r1
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	80 93 e5 07 	sts	0x07E5, r24
			ioport_set_pin_level(TRANSFORMING_LED, true);
			cpu_irq_enable();
    2258:	78 94       	sei
    225a:	c1 cf       	rjmp	.-126    	; 0x21de <main+0x14c>
    225c:	e2 e7       	ldi	r30, 0x72	; 114
    225e:	f1 e2       	ldi	r31, 0x21	; 33
	static bool right_treble = false;


	while(true)
	{		
		if (samples_taken == SAMPLE_SIZE)
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
			int right_mid_sum = 0;
			int right_treble_sum = 0;
			
			//Activate LED when bass is playing on left
			for (int i = 1; i < BASS_THRESHOLD; i++)
				left_bass_sum += left_results[i];
    2264:	21 91       	ld	r18, Z+
    2266:	31 91       	ld	r19, Z+
    2268:	82 0f       	add	r24, r18
    226a:	93 1f       	adc	r25, r19
			int right_bass_sum = 0;
			int right_mid_sum = 0;
			int right_treble_sum = 0;
			
			//Activate LED when bass is playing on left
			for (int i = 1; i < BASS_THRESHOLD; i++)
    226c:	e6 15       	cp	r30, r6
    226e:	f7 05       	cpc	r31, r7
    2270:	c9 f7       	brne	.-14     	; 0x2264 <main+0x1d2>
				left_bass_sum += left_results[i];
			if (left_bass_sum > SIGNAL_THRESHOLD)
    2272:	4a 97       	sbiw	r24, 0x1a	; 26
    2274:	24 f0       	brlt	.+8      	; 0x227e <main+0x1ec>
				left_bass = true;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	80 93 6f 20 	sts	0x206F, r24
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <main+0x1f0>
			else
				left_bass = false;
    227e:	10 92 6f 20 	sts	0x206F, r1
    2282:	f3 01       	movw	r30, r6
			cpu_irq_enable();
		}
		else
		{
			int left_bass_sum = 0;
			int left_mid_sum = 0;
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
			else
				left_bass = false;
				
			//Activate LED when mid is playing on left
			for (int i = BASS_THRESHOLD; i < TREBLE_THRESHOLD; i++)
				left_mid_sum += left_results[i];
    2288:	21 91       	ld	r18, Z+
    228a:	31 91       	ld	r19, Z+
    228c:	82 0f       	add	r24, r18
    228e:	93 1f       	adc	r25, r19
				left_bass = true;
			else
				left_bass = false;
				
			//Activate LED when mid is playing on left
			for (int i = BASS_THRESHOLD; i < TREBLE_THRESHOLD; i++)
    2290:	e8 15       	cp	r30, r8
    2292:	f9 05       	cpc	r31, r9
    2294:	c9 f7       	brne	.-14     	; 0x2288 <main+0x1f6>
				left_mid_sum += left_results[i];
			if (left_mid_sum > SIGNAL_THRESHOLD)
    2296:	4a 97       	sbiw	r24, 0x1a	; 26
    2298:	24 f0       	brlt	.+8      	; 0x22a2 <main+0x210>
				left_mid = true;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 93 6e 20 	sts	0x206E, r24
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <main+0x214>
			else
				left_mid = false;
    22a2:	10 92 6e 20 	sts	0x206E, r1
    22a6:	f4 01       	movw	r30, r8
		}
		else
		{
			int left_bass_sum = 0;
			int left_mid_sum = 0;
			int left_treble_sum = 0;
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
			else
				left_mid = false;
			
			//Activate LED when treble is playing on left (for now, more like mids. True treble seems to almost never activate)
			for (int i = TREBLE_THRESHOLD; i < SAMPLE_SIZE / 2; i++)
				left_treble_sum += left_results[i];
    22ac:	21 91       	ld	r18, Z+
    22ae:	31 91       	ld	r19, Z+
    22b0:	82 0f       	add	r24, r18
    22b2:	93 1f       	adc	r25, r19
				left_mid = true;
			else
				left_mid = false;
			
			//Activate LED when treble is playing on left (for now, more like mids. True treble seems to almost never activate)
			for (int i = TREBLE_THRESHOLD; i < SAMPLE_SIZE / 2; i++)
    22b4:	ee 15       	cp	r30, r14
    22b6:	ff 05       	cpc	r31, r15
    22b8:	c9 f7       	brne	.-14     	; 0x22ac <main+0x21a>
				left_treble_sum += left_results[i];
			if (left_treble_sum > SIGNAL_THRESHOLD)
    22ba:	4a 97       	sbiw	r24, 0x1a	; 26
    22bc:	24 f0       	brlt	.+8      	; 0x22c6 <main+0x234>
				left_treble = true;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	80 93 6d 20 	sts	0x206D, r24
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <main+0x238>
			else
				left_treble = false;
    22c6:	10 92 6d 20 	sts	0x206D, r1
    22ca:	e2 e7       	ldi	r30, 0x72	; 114
    22cc:	f0 e2       	ldi	r31, 0x20	; 32
		else
		{
			int left_bass_sum = 0;
			int left_mid_sum = 0;
			int left_treble_sum = 0;
			int right_bass_sum = 0;
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
			else
				left_treble = false;
			
			//Activate LED when bass is playing on right
			for (int i = 1; i < BASS_THRESHOLD; i++)
				right_bass_sum += right_results[i];
    22d2:	21 91       	ld	r18, Z+
    22d4:	31 91       	ld	r19, Z+
    22d6:	82 0f       	add	r24, r18
    22d8:	93 1f       	adc	r25, r19
				left_treble = true;
			else
				left_treble = false;
			
			//Activate LED when bass is playing on right
			for (int i = 1; i < BASS_THRESHOLD; i++)
    22da:	e4 15       	cp	r30, r4
    22dc:	f5 05       	cpc	r31, r5
    22de:	c9 f7       	brne	.-14     	; 0x22d2 <main+0x240>
				right_bass_sum += right_results[i];
			if (right_bass_sum > SIGNAL_THRESHOLD)
    22e0:	4a 97       	sbiw	r24, 0x1a	; 26
    22e2:	24 f0       	brlt	.+8      	; 0x22ec <main+0x25a>
				right_bass = true;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	80 93 6c 20 	sts	0x206C, r24
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <main+0x25e>
			else
				right_bass = false;
    22ec:	10 92 6c 20 	sts	0x206C, r1
    22f0:	f2 01       	movw	r30, r4
		{
			int left_bass_sum = 0;
			int left_mid_sum = 0;
			int left_treble_sum = 0;
			int right_bass_sum = 0;
			int right_mid_sum = 0;
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
			else
				right_bass = false;
				
			//Activate LED when mid is playing on right
			for (int i = BASS_THRESHOLD; i < TREBLE_THRESHOLD; i++)
				right_mid_sum += right_results[i];
    22f6:	21 91       	ld	r18, Z+
    22f8:	31 91       	ld	r19, Z+
    22fa:	82 0f       	add	r24, r18
    22fc:	93 1f       	adc	r25, r19
				right_bass = true;
			else
				right_bass = false;
				
			//Activate LED when mid is playing on right
			for (int i = BASS_THRESHOLD; i < TREBLE_THRESHOLD; i++)
    22fe:	ea 15       	cp	r30, r10
    2300:	fb 05       	cpc	r31, r11
    2302:	c9 f7       	brne	.-14     	; 0x22f6 <main+0x264>
				right_mid_sum += right_results[i];
			if (right_mid_sum > SIGNAL_THRESHOLD)
    2304:	4a 97       	sbiw	r24, 0x1a	; 26
    2306:	24 f0       	brlt	.+8      	; 0x2310 <main+0x27e>
				right_mid = true;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	80 93 6b 20 	sts	0x206B, r24
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <main+0x282>
			else
				right_mid = false;
    2310:	10 92 6b 20 	sts	0x206B, r1
    2314:	f5 01       	movw	r30, r10
			int left_bass_sum = 0;
			int left_mid_sum = 0;
			int left_treble_sum = 0;
			int right_bass_sum = 0;
			int right_mid_sum = 0;
			int right_treble_sum = 0;
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
			else
				right_mid = false;
				
			//Activate LED when treble is playing on right (for now, more like mids. True treble seems to almost never activate)
			for (int i = TREBLE_THRESHOLD; i < SAMPLE_SIZE / 2; i++)
				right_treble_sum += right_results[i];
    231a:	21 91       	ld	r18, Z+
    231c:	31 91       	ld	r19, Z+
    231e:	82 0f       	add	r24, r18
    2320:	93 1f       	adc	r25, r19
				right_mid = true;
			else
				right_mid = false;
				
			//Activate LED when treble is playing on right (for now, more like mids. True treble seems to almost never activate)
			for (int i = TREBLE_THRESHOLD; i < SAMPLE_SIZE / 2; i++)
    2322:	e0 17       	cp	r30, r16
    2324:	f1 07       	cpc	r31, r17
    2326:	c9 f7       	brne	.-14     	; 0x231a <main+0x288>
				right_treble_sum += right_results[i];
			if (right_treble_sum > SIGNAL_THRESHOLD)
    2328:	4a 97       	sbiw	r24, 0x1a	; 26
    232a:	24 f0       	brlt	.+8      	; 0x2334 <main+0x2a2>
				right_treble = true;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	80 93 6a 20 	sts	0x206A, r24
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <main+0x2a6>
			else
				right_treble = false;
    2334:	10 92 6a 20 	sts	0x206A, r1
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2338:	80 91 6f 20 	lds	r24, 0x206F
    233c:	88 23       	and	r24, r24
    233e:	21 f0       	breq	.+8      	; 0x2348 <main+0x2b6>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2340:	80 e8       	ldi	r24, 0x80	; 128
    2342:	f1 01       	movw	r30, r2
    2344:	85 83       	std	Z+5, r24	; 0x05
    2346:	03 c0       	rjmp	.+6      	; 0x234e <main+0x2bc>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2348:	80 e8       	ldi	r24, 0x80	; 128
    234a:	f1 01       	movw	r30, r2
    234c:	86 83       	std	Z+6, r24	; 0x06
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    234e:	80 91 6e 20 	lds	r24, 0x206E
    2352:	88 23       	and	r24, r24
    2354:	21 f0       	breq	.+8      	; 0x235e <main+0x2cc>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2356:	80 e4       	ldi	r24, 0x40	; 64
    2358:	f1 01       	movw	r30, r2
    235a:	85 83       	std	Z+5, r24	; 0x05
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <main+0x2d2>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    235e:	80 e4       	ldi	r24, 0x40	; 64
    2360:	f1 01       	movw	r30, r2
    2362:	86 83       	std	Z+6, r24	; 0x06
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2364:	80 91 6d 20 	lds	r24, 0x206D
    2368:	88 23       	and	r24, r24
    236a:	21 f0       	breq	.+8      	; 0x2374 <main+0x2e2>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    236c:	80 e2       	ldi	r24, 0x20	; 32
    236e:	f1 01       	movw	r30, r2
    2370:	85 83       	std	Z+5, r24	; 0x05
    2372:	03 c0       	rjmp	.+6      	; 0x237a <main+0x2e8>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2374:	80 e2       	ldi	r24, 0x20	; 32
    2376:	f1 01       	movw	r30, r2
    2378:	86 83       	std	Z+6, r24	; 0x06
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    237a:	80 91 6c 20 	lds	r24, 0x206C
    237e:	88 23       	and	r24, r24
    2380:	21 f0       	breq	.+8      	; 0x238a <main+0x2f8>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2382:	80 e1       	ldi	r24, 0x10	; 16
    2384:	f1 01       	movw	r30, r2
    2386:	85 83       	std	Z+5, r24	; 0x05
    2388:	03 c0       	rjmp	.+6      	; 0x2390 <main+0x2fe>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    238a:	80 e1       	ldi	r24, 0x10	; 16
    238c:	f1 01       	movw	r30, r2
    238e:	86 83       	std	Z+6, r24	; 0x06
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2390:	80 91 6b 20 	lds	r24, 0x206B
    2394:	88 23       	and	r24, r24
    2396:	21 f0       	breq	.+8      	; 0x23a0 <main+0x30e>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2398:	88 e0       	ldi	r24, 0x08	; 8
    239a:	f1 01       	movw	r30, r2
    239c:	85 83       	std	Z+5, r24	; 0x05
    239e:	03 c0       	rjmp	.+6      	; 0x23a6 <main+0x314>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    23a0:	88 e0       	ldi	r24, 0x08	; 8
    23a2:	f1 01       	movw	r30, r2
    23a4:	86 83       	std	Z+6, r24	; 0x06
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    23a6:	80 91 6a 20 	lds	r24, 0x206A
    23aa:	88 23       	and	r24, r24
    23ac:	21 f0       	breq	.+8      	; 0x23b6 <main+0x324>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    23ae:	84 e0       	ldi	r24, 0x04	; 4
    23b0:	f1 01       	movw	r30, r2
    23b2:	85 83       	std	Z+5, r24	; 0x05
    23b4:	14 cf       	rjmp	.-472    	; 0x21de <main+0x14c>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    23b6:	84 e0       	ldi	r24, 0x04	; 4
    23b8:	f1 01       	movw	r30, r2
    23ba:	86 83       	std	Z+6, r24	; 0x06
    23bc:	10 cf       	rjmp	.-480    	; 0x21de <main+0x14c>

000023be <__mulsi3>:
    23be:	db 01       	movw	r26, r22
    23c0:	8f 93       	push	r24
    23c2:	9f 93       	push	r25
    23c4:	26 d0       	rcall	.+76     	; 0x2412 <__muluhisi3>
    23c6:	bf 91       	pop	r27
    23c8:	af 91       	pop	r26
    23ca:	a2 9f       	mul	r26, r18
    23cc:	80 0d       	add	r24, r0
    23ce:	91 1d       	adc	r25, r1
    23d0:	a3 9f       	mul	r26, r19
    23d2:	90 0d       	add	r25, r0
    23d4:	b2 9f       	mul	r27, r18
    23d6:	90 0d       	add	r25, r0
    23d8:	11 24       	eor	r1, r1
    23da:	08 95       	ret

000023dc <__mulhisi3>:
    23dc:	05 d0       	rcall	.+10     	; 0x23e8 <__umulhisi3>
    23de:	33 23       	and	r19, r19
    23e0:	12 f4       	brpl	.+4      	; 0x23e6 <__mulhisi3+0xa>
    23e2:	8a 1b       	sub	r24, r26
    23e4:	9b 0b       	sbc	r25, r27
    23e6:	10 c0       	rjmp	.+32     	; 0x2408 <__usmulhisi3_tail>

000023e8 <__umulhisi3>:
    23e8:	a2 9f       	mul	r26, r18
    23ea:	b0 01       	movw	r22, r0
    23ec:	b3 9f       	mul	r27, r19
    23ee:	c0 01       	movw	r24, r0
    23f0:	a3 9f       	mul	r26, r19
    23f2:	70 0d       	add	r23, r0
    23f4:	81 1d       	adc	r24, r1
    23f6:	11 24       	eor	r1, r1
    23f8:	91 1d       	adc	r25, r1
    23fa:	b2 9f       	mul	r27, r18
    23fc:	70 0d       	add	r23, r0
    23fe:	81 1d       	adc	r24, r1
    2400:	11 24       	eor	r1, r1
    2402:	91 1d       	adc	r25, r1
    2404:	08 95       	ret

00002406 <__usmulhisi3>:
    2406:	f0 df       	rcall	.-32     	; 0x23e8 <__umulhisi3>

00002408 <__usmulhisi3_tail>:
    2408:	b7 ff       	sbrs	r27, 7
    240a:	08 95       	ret
    240c:	82 1b       	sub	r24, r18
    240e:	93 0b       	sbc	r25, r19
    2410:	08 95       	ret

00002412 <__muluhisi3>:
    2412:	ea df       	rcall	.-44     	; 0x23e8 <__umulhisi3>
    2414:	a5 9f       	mul	r26, r21
    2416:	90 0d       	add	r25, r0
    2418:	b4 9f       	mul	r27, r20
    241a:	90 0d       	add	r25, r0
    241c:	a4 9f       	mul	r26, r20
    241e:	80 0d       	add	r24, r0
    2420:	91 1d       	adc	r25, r1
    2422:	11 24       	eor	r1, r1
    2424:	08 95       	ret

00002426 <_exit>:
    2426:	f8 94       	cli

00002428 <__stop_program>:
    2428:	ff cf       	rjmp	.-2      	; 0x2428 <__stop_program>
